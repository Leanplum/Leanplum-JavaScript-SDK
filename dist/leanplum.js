!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Leanplum=e():t.Leanplum=e()}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=27)}([function(t,e,n){var r=n(18),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();t.exports=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.4.0",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_METADATA:"actionMetadata",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_METADATA:"__leanplum_action_metadata",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)"}}},function(t,e,n){var r=n(47),o=n(53);t.exports=function(t,e){var n=o(t,e);return r(n)?n:void 0}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(1)),i=function(){function t(){this.argString="",this.argValues={}}return t.prototype.add=function(t,e){return void 0===e?this:(this.argString&&(this.argString+="&"),this.argString+=t+"="+encodeURIComponent(e),this.argValues[t]=e,this)},t.prototype.body=function(t){return t?(this._body=t,this):this._body},t.prototype.attachApiKeys=function(t,e){return this.add(o.default.PARAMS.APP_ID,t).add(o.default.PARAMS.CLIENT,o.default.CLIENT).add(o.default.PARAMS.CLIENT_KEY,e)},t.prototype.build=function(){return this.argString},t.prototype.buildDict=function(){return this.argValues},t}();e.default=i},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0});var o={},i=function(){function t(){}return t.getFromLocalStorage=function(t){return!1===r?o[t]:localStorage[t]},t.saveToLocalStorage=function(t,e){if(!1!==r)try{localStorage[t]=e}catch(n){r=!1,o[t]=e}else o[t]=e},t.removeFromLocalStorage=function(t){if(!1!==r)try{localStorage.removeItem(t)}catch(e){r=!1,delete o[t]}else delete o[t]},t}();e.default=i},function(t,e,n){var r=n(37),o=n(38),i=n(39),s=n(40),a=n(41);function u(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=s,u.prototype.set=a,t.exports=u},function(t,e,n){var r=n(16);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},function(t,e,n){var r=n(12),o=n(49),i=n(50),s=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":s&&s in Object(t)?o(t):i(t)}},function(t,e,n){var r=n(2)(Object,"create");t.exports=r},function(t,e,n){var r=n(62);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){var r=n(2)(n(0),"Map");t.exports=r},function(t,e,n){var r=n(0).Symbol;t.exports=r},function(t,e){var n=Array.isArray;t.exports=n},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this.networkTimeoutSeconds=10,this.requestQueue=[],this.runningRequest=!1}return t.prototype.setNetworkTimeout=function(t){this.networkTimeoutSeconds=t},t.prototype.ajax=function(t,e,n,r,o,i,s){var a=this;if(i){if(this.runningRequest)return this.enqueueRequest(arguments);this.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===e.indexOf("https:")&&(e="http:"+e.substring(6)),this.ajaxIE8.call(this,arguments);var u=!1,c=new XMLHttpRequest;c.onreadystatechange=function(){if(4===c.readyState){if(u)return;var t;u=!0;var e=!1;if(s)t=c.responseText;else try{t=JSON.parse(c.responseText)}catch(t){setTimeout((function(){o&&o(null,c)}),0),e=!0}e||(c.status>=200&&c.status<300?setTimeout((function(){r&&r(t,c)}),0):setTimeout((function(){o&&o(t,c)}),0)),i&&(a.runningRequest=!1,a.dequeueRequest())}},c.open(t,e,!0),c.setRequestHeader("Content-Type","text/plain"),c.send(n),setTimeout((function(){u||c.abort()}),1e3*this.networkTimeoutSeconds)},t.prototype.ajaxIE8=function(t,e,n,r,o,i,s){var a=this,u=new XDomainRequest;u.onload=function(){var t,e=!1;if(s)t=u.responseText;else try{t=JSON.parse(u.responseText)}catch(t){setTimeout((function(){o&&o(null,u)}),0),e=!0}e||setTimeout((function(){r&&r(t,u)}),0),i&&(a.runningRequest=!1,a.dequeueRequest())},u.onerror=u.ontimeout=function(){setTimeout((function(){o&&o(null,u)}),0),i&&(a.runningRequest=!1,a.dequeueRequest())},u.onprogress=function(){},u.open(t,e),u.timeout=1e3*this.networkTimeoutSeconds,u.send(n)},t.prototype.enqueueRequest=function(t){this.requestQueue.push(t)},t.prototype.dequeueRequest=function(){var t=this.requestQueue.shift();t&&this.ajax.call(this,t)},t}();e.default=r},function(t,e,n){var r=n(34);t.exports=function(t,e){return r(t,e)}},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(7),o=n(19);t.exports=function(t){if(!o(t))return!1;var e=r(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(48))},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,n){var r=n(54),o=n(61),i=n(63),s=n(64),a=n(65);function u(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=s,u.prototype.set=a,t.exports=u},function(t,e,n){var r=n(66),o=n(69),i=n(70);t.exports=function(t,e,n,s,a,u){var c=1&n,l=t.length,f=e.length;if(l!=f&&!(c&&f>l))return!1;var p=u.get(t);if(p&&u.get(e))return p==e;var d=-1,h=!0,v=2&n?new r:void 0;for(u.set(t,e),u.set(e,t);++d<l;){var _=t[d],S=e[d];if(s)var b=c?s(S,_,d,e,t,u):s(_,S,d,t,e,u);if(void 0!==b){if(b)continue;h=!1;break}if(v){if(!o(e,(function(t,e){if(!i(v,e)&&(_===t||a(_,t,n,s,u)))return v.push(e)}))){h=!1;break}}else if(_!==S&&!a(_,S,n,s,u)){h=!1;break}}return u.delete(t),u.delete(e),h}},function(t,e,n){(function(t){var r=n(0),o=n(87),i=e&&!e.nodeType&&e,s=i&&"object"==typeof t&&t&&!t.nodeType&&t,a=s&&s.exports===i?r.Buffer:void 0,u=(a?a.isBuffer:void 0)||o;t.exports=u}).call(this,n(24)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){var r=n(89),o=n(90),i=n(91),s=i&&i.isTypedArray,a=s?o(s):r;t.exports=a},function(t,e){t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},function(t,e,n){var r=n(28);t.exports=r.default},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(29)),i=function(){function t(){}return t.setApiPath=function(e){t._lp.setApiPath(e)},t.setEmail=function(e){t._lp.setEmail(e)},t.setNetworkTimeout=function(e){t._lp.setNetworkTimeout(e)},t.setAppIdForDevelopmentMode=function(e,n){t._lp.setAppIdForDevelopmentMode(e,n)},t.setAppIdForProductionMode=function(e,n){t._lp.setAppIdForProductionMode(e,n)},t.setSocketHost=function(e){t._lp.setSocketHost(e)},t.setDeviceId=function(e){t._lp.setDeviceId(e)},t.setAppVersion=function(e){t._lp.setAppVersion(e)},t.setDeviceName=function(e){t._lp.setDeviceName(e)},t.setDeviceModel=function(e){t._lp.setDeviceModel(e)},t.setRequestBatching=function(e,n){t._lp.setRequestBatching(e,n)},t.setSystemName=function(e){t._lp.setSystemName(e)},t.setSystemVersion=function(e){t._lp.setSystemVersion(e)},t.setVariables=function(e){t._lp.setVariables(e)},t.setVariantDebugInfoEnabled=function(e){t._lp.setVariantDebugInfoEnabled(e)},t.getVariantDebugInfo=function(){return t._lp.getVariantDebugInfo()},t.getVariables=function(){return t._lp.getVariables()},t.getVariable=function(){for(var e,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return(e=t._lp).getVariable.apply(e,n)},t.getVariants=function(){return t._lp.getVariants()},t.addStartResponseHandler=function(e){t._lp.addStartResponseHandler(e)},t.removeStartResponseHandler=function(e){t._lp.removeStartResponseHandler(e)},t.addVariablesChangedHandler=function(e){t._lp.addVariablesChangedHandler(e)},t.removeVariablesChangedHandler=function(e){t._lp.removeVariablesChangedHandler(e)},t.forceContentUpdate=function(e){t._lp.forceContentUpdate(e)},t.start=function(e,n,r){t._lp.start(e,n,r)},t.startFromCache=function(e,n,r){t._lp.startFromCache(e,n,r)},t.stop=function(){t._lp.stop()},t.pauseSession=function(){t._lp.pauseSession()},t.resumeSession=function(){t._lp.resumeSession()},t.pauseState=function(){t._lp.pauseState()},t.resumeState=function(){t._lp.resumeState()},t.setUserId=function(e){t.setUserAttributes(e)},t.setUserAttributes=function(e,n){t._lp.setUserAttributes(e,n)},t.track=function(e,n,r,o){t._lp.track(e,n,r,o)},t.trackPurchase=function(e,n,r,o){void 0===o&&(o="Purchase"),t._lp.trackPurchase(e,n,r,o)},t.advanceTo=function(e,n,r){t._lp.advanceTo(e,n,r)},t.isWebPushSupported=function(){return t._lp.isWebPushSupported()},t.isWebPushSubscribed=function(){return t._lp.isWebPushSubscribed()},t.registerForWebPush=function(e){return t._lp.registerForWebPush(e)},t.unregisterFromWebPush=function(){return t._lp.unregisterFromWebPush()},t.clearUserContent=function(){t._lp.clearUserContent()},t.__destroy=function(){this._lp=new o.default(window)},t._lp=new o.default(window),t}();e.default=i},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=o(n(3)),s=o(n(30)),a=o(n(1)),u=o(n(31)),c=o(n(32)),l=o(n(33)),f=o(n(4)),p=o(n(103)),d=o(n(104)),h=function(){function t(t){this._internalState=new u.default,this._lpRequest=new c.default,this._lpSocket=new l.default,this._pushManager=new p.default(this.createRequest.bind(this)),this._varCache=new d.default(this.createRequest.bind(this)),this._browserDetector=new s.default(t)}return t.prototype.setApiPath=function(t){this._lpRequest.apiPath&&(this._lpRequest.apiPath=t)},t.prototype.setEmail=function(t){this._email=t},t.prototype.setNetworkTimeout=function(t){this._lpRequest.setNetworkTimeout(t),this._lpSocket.setNetworkTimeout(t)},t.prototype.setAppIdForDevelopmentMode=function(t,e){this._lpRequest.appId=t,this._lpRequest.clientKey=e,this._internalState.devMode=!0},t.prototype.setAppIdForProductionMode=function(t,e){this._lpRequest.appId=t,this._lpRequest.clientKey=e,this._internalState.devMode=!1},t.prototype.setSocketHost=function(t){this._lpSocket.setSocketHost(t)},t.prototype.setDeviceId=function(t){this._lpRequest.deviceId=t},t.prototype.setAppVersion=function(t){this._lpRequest.versionName=t},t.prototype.setDeviceName=function(t){this._deviceName=t},t.prototype.setDeviceModel=function(t){this._deviceModel=t},t.prototype.setRequestBatching=function(t,e){this._lpRequest.batchEnabled=t,this._lpRequest.batchCooldown=e},t.prototype.setSystemName=function(t){this._systemName=t},t.prototype.setSystemVersion=function(t){this._systemVersion=t},t.prototype.setVariables=function(t){this._varCache.setVariables(t)},t.prototype.setVariantDebugInfoEnabled=function(t){this._internalState.variantDebugInfoEnabled=t},t.prototype.getVariantDebugInfo=function(){return this._varCache.getVariantDebugInfo()},t.prototype.getVariables=function(){return this._varCache.getVariables()},t.prototype.getVariable=function(){for(var t,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return(t=this._varCache).getVariable.apply(t,e)},t.prototype.getVariants=function(){return this._varCache.variants||[]},t.prototype.addStartResponseHandler=function(t){this._internalState.addStartResponseHandler(t)},t.prototype.removeStartResponseHandler=function(t){this._internalState.removeStartResponseHandler(t)},t.prototype.addVariablesChangedHandler=function(t){this._varCache.addVariablesChangedHandler(t)},t.prototype.removeVariablesChangedHandler=function(t){this._varCache.removeVariablesChangedHandler(t)},t.prototype.forceContentUpdate=function(t){var e=this,n=(new i.default).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1).add(a.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,this._internalState.variantDebugInfoEnabled);this.createRequest(a.default.METHODS.GET_VARS,n,{queued:!1,sendNow:!0,response:function(n){var r=e._lpRequest.getLastResponse(n),o=e._lpRequest.isResponseSuccess(r);o&&(e._varCache.applyDiffs(r[a.default.KEYS.VARS],r[a.default.KEYS.VARIANTS],r[a.default.KEYS.ACTION_METADATA]),e._varCache.setVariantDebugInfo(r[a.default.KEYS.VARIANT_DEBUG_INFO])),t&&t(o)}})},t.prototype.start=function(t,e,n){var r=this;"function"==typeof t?(n=t,e={},t=null):"object"==typeof t&&null!=t?(n=e,e=t,t=null):"function"==typeof e&&(n=e,e={}),this._lpRequest.userId=t,n&&this.addStartResponseHandler(n),this._varCache.onUpdate=function(){r._varCache.triggerVariablesChangedHandlers()};var o=(new i.default).add(a.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(e)).add(a.default.PARAMS.COUNTRY,a.default.VALUES.DETECT).add(a.default.PARAMS.REGION,a.default.VALUES.DETECT).add(a.default.PARAMS.CITY,a.default.VALUES.DETECT).add(a.default.PARAMS.LOCATION,a.default.VALUES.DETECT).add(a.default.PARAMS.SYSTEM_NAME,this._systemName||this._browserDetector.OS).add(a.default.PARAMS.SYSTEM_VERSION,(this._systemVersion||"").toString()).add(a.default.PARAMS.BROWSER_NAME,this._browserDetector.browser).add(a.default.PARAMS.BROWSER_VERSION,this._browserDetector.version.toString()).add(a.default.PARAMS.LOCALE,a.default.VALUES.DETECT).add(a.default.PARAMS.DEVICE_NAME,this._deviceName||this._browserDetector.browser+" "+this._browserDetector.version).add(a.default.PARAMS.DEVICE_MODEL,this._deviceModel||"Web Browser").add(a.default.PARAMS.INCLUDE_DEFAULTS,!1).add(a.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,this._internalState.variantDebugInfoEnabled);this.createRequest(a.default.METHODS.START,o,{queued:!0,sendNow:!0,response:function(t){r._internalState.hasStarted=!0;var e=r._lpRequest.getLastResponse(t);if(r._lpRequest.isResponseSuccess(e)){if(r._internalState.startSuccessful=!0,r._internalState.devMode){var n=e[a.default.KEYS.LATEST_VERSION];n&&console.log("A newer version of Leanplum, "+n+', is available.\nUse "npm update leanplum-sdk" or go to https://docs.leanplum.com/reference#javascript-setup to download it.'),r.connectSocket()}r._varCache.applyDiffs(e[a.default.KEYS.VARS],e[a.default.KEYS.VARIANTS],e[a.default.KEYS.ACTION_METADATA]),r._varCache.setVariantDebugInfo(e[a.default.KEYS.VARIANT_DEBUG_INFO]),r._varCache.token=e[a.default.KEYS.TOKEN]}else r._internalState.startSuccessful=!1,r._varCache.loadDiffs();r._internalState.triggerStartHandlers()}})},t.prototype.startFromCache=function(t,e,n){"function"==typeof t?(n=t,e={},t=null):"object"==typeof t&&null!=t?(n=e,e=t,t=null):"function"==typeof e&&(n=e,e={}),this._lpRequest.userId=t,n&&this.addStartResponseHandler(n),this._internalState.hasStarted=!0,this._internalState.startSuccessful=!0,this._internalState.devMode&&this.connectSocket(),this._varCache.loadDiffs(),this._internalState.triggerStartHandlers()},t.prototype.stop=function(){this.createRequest(a.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0})},t.prototype.pauseSession=function(){this.createRequest(a.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},t.prototype.resumeSession=function(){this.createRequest(a.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},t.prototype.pauseState=function(){this.createRequest(a.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},t.prototype.resumeState=function(){this.createRequest(a.default.METHODS.RESUME_STATE,void 0,{queued:!0})},t.prototype.setUserId=function(t){this.setUserAttributes(t)},t.prototype.setUserAttributes=function(t,e){if(void 0===e)if("object"==typeof t)e=t,t=void 0;else if("string"!=typeof t)return void console.log("Leanplum: setUserAttributes expects a string or an object");var n=(new i.default).add(a.default.PARAMS.USER_ATTRIBUTES,e?JSON.stringify(e):void 0).add(a.default.PARAMS.NEW_USER_ID,t);this.createRequest(a.default.METHODS.SET_USER_ATTRIBUTES,n,{queued:!0}),t&&(this._lpRequest.userId=t,f.default.saveToLocalStorage(a.default.DEFAULT_KEYS.USER_ID,this._lpRequest.userId))},t.prototype.track=function(t,e,n,r){"object"==typeof e&&null!=e?(r=e,n=void 0,e=void 0):"string"==typeof e?(r=n,n=e,e=void 0):"object"==typeof n&&null!=n&&(r=n,n=void 0);var o=(new i.default).add(a.default.PARAMS.EVENT,t).add(a.default.PARAMS.VALUE,e||0).add(a.default.PARAMS.INFO,n).add(a.default.PARAMS.PARAMS,JSON.stringify(r));this.createRequest(a.default.METHODS.TRACK,o,{queued:!0})},t.prototype.trackPurchase=function(t,e,n,r){void 0===r&&(r="Purchase");var o=n;e&&(o=Object.assign({},n,{currencyCode:e})),this.track(r,t,o)},t.prototype.advanceTo=function(t,e,n){"object"==typeof e&&null!=e&&(n=e,e=void 0);var r=(new i.default).add(a.default.PARAMS.STATE,t).add(a.default.PARAMS.INFO,e).add(a.default.PARAMS.PARAMS,JSON.stringify(n));this.createRequest(a.default.METHODS.ADVANCE,r,{queued:!0})},t.prototype.isWebPushSupported=function(){return this._pushManager.isWebPushSupported()},t.prototype.isWebPushSubscribed=function(){return this._pushManager.isWebPushSubscribed()},t.prototype.registerForWebPush=function(t){var e=this;return this._pushManager.isWebPushSupported()?this._pushManager.register(t,(function(t){return t?Promise.resolve(!0):e._pushManager.subscribeUser()})):Promise.reject("Leanplum: WebPush is not supported.")},t.prototype.unregisterFromWebPush=function(){return this._pushManager.unsubscribeUser()},t.prototype.clearUserContent=function(){this._varCache.clearUserContent()},t.prototype.createRequest=function(t,e,n){void 0===n&&(n={}),this._lpRequest.request(t,e,r({devMode:this._internalState.devMode},n))},t.prototype.connectSocket=function(){this._lpSocket.connect(this._varCache,{appId:this._lpRequest.appId,deviceId:this._lpRequest.deviceId},this.createRequest,this._lpRequest.getLastResponse)},t}();e.default=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.browser=this.searchString(this.getBrowserData(t))||"Unknown Browser",this.version=this.searchVersion(t.navigator.userAgent)||this.searchVersion(t.navigator.appVersion)||"Unknown Version",this.OS=this.searchString(this.getOSData(t))||"Unknown OS"}return t.prototype.searchString=function(t){for(var e=0;e<t.length;e++){var n=t[e].string,r=t[e].prop;if(this.versionSearchString=t[e].versionSearch||t[e].identity,n){if(-1!==n.indexOf(t[e].subString))return t[e].identity}else if(r)return t[e].identity}},t.prototype.searchVersion=function(t){if(t){var e=t.indexOf(this.versionSearchString);if(-1!==e)return parseFloat(t.substring(e+this.versionSearchString.length+1))}},t.prototype.getBrowserData=function(t){return[{string:t.navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:t.navigator.userAgent,subString:"OmniWeb",identity:"OmniWeb",versionSearch:"OmniWeb/"},{string:t.navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:t.opera,identity:"Opera",versionSearch:"Version"},{string:t.navigator.vendor,subString:"iCab",identity:"iCab"},{string:t.navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:t.navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:t.navigator.vendor,subString:"Camino",identity:"Camino"},{string:t.navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:t.navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:t.navigator.userAgent,subString:"Android",identity:"Android Browser",versionSearch:"Version"},{string:t.navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:t.navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}]},t.prototype.getOSData=function(t){return[{string:t.navigator.platform,subString:"Win",identity:"Windows"},{string:t.navigator.platform,subString:"Mac",identity:"Mac OS"},{string:t.navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:t.navigator.userAgent,subString:"Android",identity:"Android"},{string:t.navigator.platform,subString:"Linux",identity:"Linux"}]},t}();e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this.startHandlers=[],this.devMode=!1,this.hasStarted=!1,this.startSuccessful=!1,this.variantDebugInfoEnabled=!1}return t.prototype.addStartResponseHandler=function(t){this.startHandlers.push(t),this.hasStarted&&t(this.startSuccessful)},t.prototype.removeStartResponseHandler=function(t){var e=this.startHandlers.indexOf(t);e>=0&&this.startHandlers.splice(e,1)},t.prototype.triggerStartHandlers=function(){for(var t=0;t<this.startHandlers.length;t++)this.startHandlers[t](this.startSuccessful)},t}();e.default=r},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(3)),i=r(n(1)),s=r(n(4)),a=r(n(14)),u=function(){function t(){this.cooldownTimeout=null,this.lastRequestTime=void 0,this.network=new a.default,this.apiPath="https://www.leanplum.com/api",this.batchCooldown=5,this.batchEnabled=!0}return t.prototype.request=function(t,e,n){var r=this;if(void 0===n&&(n={}),n=n||{},e=e||new o.default,this.deviceId||(this.deviceId=this.loadLocal(i.default.DEFAULT_KEYS.DEVICE_ID)),!this.deviceId){for(var s="",a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",u=0;u<16;u++)s+=a.charAt(Math.floor(Math.random()*a.length));this.deviceId=s,this.saveLocal(i.default.DEFAULT_KEYS.DEVICE_ID,s)}this.userId||(this.userId=this.loadLocal(i.default.DEFAULT_KEYS.USER_ID),this.userId||(this.userId=this.deviceId)),this.saveLocal(i.default.DEFAULT_KEYS.USER_ID,this.userId);var c=e.attachApiKeys(this.appId,this.clientKey).add(i.default.PARAMS.SDK_VERSION,i.default.SDK_VERSION).add(i.default.PARAMS.DEVICE_ID,this.deviceId).add(i.default.PARAMS.USER_ID,this.userId).add(i.default.PARAMS.ACTION,t).add(i.default.PARAMS.VERSION_NAME,this.versionName).add(i.default.PARAMS.DEV_MODE,n.devMode).add(i.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),l=n.success||n.response,f=n.error||n.response;if(!this.appId||!this.clientKey){var p="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(p),void(f&&f(p))}if(e.body())this.network.ajax("POST",this.apiPath+"?"+c.build(),e.body(),l,f,n.queued);else{var d=n.devMode||n.sendNow||!this.batchEnabled,h=function(){var t=r.popUnsentRequests();if(t.length>0){var e=JSON.stringify({data:t}),s=(new o.default).attachApiKeys(r.appId,r.clientKey).add(i.default.PARAMS.SDK_VERSION,i.default.SDK_VERSION).add(i.default.PARAMS.ACTION,i.default.METHODS.MULTI).add(i.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();r.network.ajax("POST",r.apiPath+"?"+s,e,l,f,n.queued)}};if(!d&&this.batchCooldown){var v=(new Date).getTime()/1e3;!this.lastRequestTime||v-this.lastRequestTime>=this.batchCooldown?(d=!0,this.lastRequestTime=v):this.cooldownTimeout||(this.cooldownTimeout=setTimeout((function(){r.cooldownTimeout=null,r.lastRequestTime=(new Date).getTime()/1e3,h()}),1e3*(this.batchCooldown-(v-this.lastRequestTime))))}this.saveRequestForLater(c.buildDict()),d&&h()}},t.prototype.setNetworkTimeout=function(t){this.network.setNetworkTimeout(t)},t.prototype.getLastResponse=function(t){var e,n,r,o,i,s=null!=(r=null===(n=null===(e=t)||void 0===e?void 0:e.response)||void 0===n?void 0:n.length)?r:0;return s>0?null===(i=null===(o=t)||void 0===o?void 0:o.response)||void 0===i?void 0:i[s-1]:null},t.prototype.isResponseSuccess=function(t){var e;return Boolean(null===(e=t)||void 0===e?void 0:e.success)},t.prototype.saveRequestForLater=function(t){var e=this.loadLocal(i.default.DEFAULT_KEYS.COUNT)||0,n=i.default.DEFAULT_KEYS.ITEM+e;this.saveLocal(n,JSON.stringify(t)),e++,this.saveLocal(i.default.DEFAULT_KEYS.COUNT,e)},t.prototype.popUnsentRequests=function(){var t=[],e=this.loadLocal(i.default.DEFAULT_KEYS.COUNT)||0;this.removeLocal(i.default.DEFAULT_KEYS.COUNT);for(var n=0;n<e;n++){var r=i.default.DEFAULT_KEYS.ITEM+n;try{t.push(JSON.parse(this.loadLocal(r)))}catch(t){}this.removeLocal(r)}return t},t.prototype.loadLocal=function(t){return s.default.getFromLocalStorage(t)},t.prototype.saveLocal=function(t,e){s.default.saveToLocalStorage(t,e)},t.prototype.removeLocal=function(t){s.default.removeFromLocalStorage(t)},t}();e.default=u},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(15)),i=r(n(3)),s=r(n(1)),a=r(n(102)),u=function(){function t(){this.networkTimeoutSeconds=10,this.socketClient=null,this.socketHost="dev.leanplum.com"}return t.prototype.connect=function(t,e,n,r){var u=this;if(WebSocket){var c=!1;this.socketClient=new a.default,this.socketClient.setNetworkTimeout(this.networkTimeoutSeconds),this.socketClient.onopen=function(){var t;c||(console.log("Leanplum: Connected to development server."),u.socketClient.send("auth",((t={})[s.default.PARAMS.APP_ID]=e.appId,t[s.default.PARAMS.DEVICE_ID]=e.deviceId,t)),c=!0)},this.socketClient.onerror=function(t){console.log("Leanplum: Socket error",t)},this.socketClient.onmessage=function(e,a){if("updateVars"===e){var c=(new i.default).add(s.default.PARAMS.INCLUDE_DEFAULTS,!1);n(s.default.METHODS.GET_VARS,c,{queued:!1,sendNow:!0,response:function(e){var n=r(e),i=n[s.default.KEYS.VARS],a=n[s.default.KEYS.VARIANTS],u=n[s.default.KEYS.ACTION_METADATA];o.default(i,t.diffs)||t.applyDiffs(i,a,u)}})}else"getVariables"===e?(t.sendVariables(),u.socketClient.send("getContentResponse",{updated:!0})):"getActions"===e?u.socketClient.send("getContentResponse",{updated:!1}):"registerDevice"===e&&alert("Your device has been registered to "+a[0].email+".")},this.socketClient.onclose=function(){console.log("Leanplum: Disconnected to development server."),c=!1},this.socketClient.connect(this.socketHost),setInterval((function(){u.socketClient.connected||u.socketClient.connecting||u.socketClient.connect(u.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},t.prototype.setSocketHost=function(t){this.socketHost=t},t.prototype.setNetworkTimeout=function(t){var e;this.networkTimeoutSeconds=t,null===(e=this.socketClient)||void 0===e||e.setNetworkTimeout(t)},t}();e.default=u},function(t,e,n){var r=n(35),o=n(10);t.exports=function t(e,n,i,s,a){return e===n||(null==e||null==n||!o(e)&&!o(n)?e!=e&&n!=n:r(e,n,i,s,t,a))}},function(t,e,n){var r=n(36),o=n(22),i=n(71),s=n(75),a=n(97),u=n(13),c=n(23),l=n(25),f="[object Object]",p=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,d,h,v){var _=u(t),S=u(e),b=_?"[object Array]":a(t),g=S?"[object Array]":a(e),y=(b="[object Arguments]"==b?f:b)==f,A=(g="[object Arguments]"==g?f:g)==f,E=b==g;if(E&&c(t)){if(!c(e))return!1;_=!0,y=!1}if(E&&!y)return v||(v=new r),_||l(t)?o(t,e,n,d,h,v):i(t,e,b,n,d,h,v);if(!(1&n)){var T=y&&p.call(t,"__wrapped__"),R=A&&p.call(e,"__wrapped__");if(T||R){var m=T?t.value():t,I=R?e.value():e;return v||(v=new r),h(m,I,n,d,v)}}return!!E&&(v||(v=new r),s(t,e,n,d,h,v))}},function(t,e,n){var r=n(5),o=n(42),i=n(43),s=n(44),a=n(45),u=n(46);function c(t){var e=this.__data__=new r(t);this.size=e.size}c.prototype.clear=o,c.prototype.delete=i,c.prototype.get=s,c.prototype.has=a,c.prototype.set=u,t.exports=c},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,n){var r=n(6),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0)&&(n==e.length-1?e.pop():o.call(e,n,1),--this.size,!0)}},function(t,e,n){var r=n(6);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},function(t,e,n){var r=n(6);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,e,n){var r=n(6);t.exports=function(t,e){var n=this.__data__,o=r(n,t);return o<0?(++this.size,n.push([t,e])):n[o][1]=e,this}},function(t,e,n){var r=n(5);t.exports=function(){this.__data__=new r,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,n){var r=n(5),o=n(11),i=n(21);t.exports=function(t,e){var n=this.__data__;if(n instanceof r){var s=n.__data__;if(!o||s.length<199)return s.push([t,e]),this.size=++n.size,this;n=this.__data__=new i(s)}return n.set(t,e),this.size=n.size,this}},function(t,e,n){var r=n(17),o=n(51),i=n(19),s=n(20),a=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,l=u.toString,f=c.hasOwnProperty,p=RegExp("^"+l.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||o(t))&&(r(t)?p:a).test(s(t))}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(12),o=Object.prototype,i=o.hasOwnProperty,s=o.toString,a=r?r.toStringTag:void 0;t.exports=function(t){var e=i.call(t,a),n=t[a];try{t[a]=void 0;var r=!0}catch(t){}var o=s.call(t);return r&&(e?t[a]=n:delete t[a]),o}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r,o=n(52),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!i&&i in t}},function(t,e,n){var r=n(0)["__core-js_shared__"];t.exports=r},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e,n){var r=n(55),o=n(5),i=n(11);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(t,e,n){var r=n(56),o=n(57),i=n(58),s=n(59),a=n(60);function u(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=s,u.prototype.set=a,t.exports=u},function(t,e,n){var r=n(8);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,n){var r=n(8),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(e,t)?e[t]:void 0}},function(t,e,n){var r=n(8),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:o.call(e,t)}},function(t,e,n){var r=n(8);t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(t,e,n){var r=n(9);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,n){var r=n(9);t.exports=function(t){return r(this,t).get(t)}},function(t,e,n){var r=n(9);t.exports=function(t){return r(this,t).has(t)}},function(t,e,n){var r=n(9);t.exports=function(t,e){var n=r(this,t),o=n.size;return n.set(t,e),this.size+=n.size==o?0:1,this}},function(t,e,n){var r=n(21),o=n(67),i=n(68);function s(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new r;++e<n;)this.add(t[e])}s.prototype.add=s.prototype.push=o,s.prototype.has=i,t.exports=s},function(t,e){t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}},function(t,e){t.exports=function(t,e){return t.has(e)}},function(t,e,n){var r=n(12),o=n(72),i=n(16),s=n(22),a=n(73),u=n(74),c=r?r.prototype:void 0,l=c?c.valueOf:void 0;t.exports=function(t,e,n,r,c,f,p){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!f(new o(t),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var d=a;case"[object Set]":var h=1&r;if(d||(d=u),t.size!=e.size&&!h)return!1;var v=p.get(t);if(v)return v==e;r|=2,p.set(t,e);var _=s(d(t),d(e),r,c,f,p);return p.delete(t),_;case"[object Symbol]":if(l)return l.call(t)==l.call(e)}return!1}},function(t,e,n){var r=n(0).Uint8Array;t.exports=r},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}},function(t,e,n){var r=n(76),o=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,i,s,a){var u=1&n,c=r(t),l=c.length;if(l!=r(e).length&&!u)return!1;for(var f=l;f--;){var p=c[f];if(!(u?p in e:o.call(e,p)))return!1}var d=a.get(t);if(d&&a.get(e))return d==e;var h=!0;a.set(t,e),a.set(e,t);for(var v=u;++f<l;){var _=t[p=c[f]],S=e[p];if(i)var b=u?i(S,_,p,e,t,a):i(_,S,p,t,e,a);if(!(void 0===b?_===S||s(_,S,n,i,a):b)){h=!1;break}v||(v="constructor"==p)}if(h&&!v){var g=t.constructor,y=e.constructor;g!=y&&"constructor"in t&&"constructor"in e&&!("function"==typeof g&&g instanceof g&&"function"==typeof y&&y instanceof y)&&(h=!1)}return a.delete(t),a.delete(e),h}},function(t,e,n){var r=n(77),o=n(79),i=n(82);t.exports=function(t){return r(t,i,o)}},function(t,e,n){var r=n(78),o=n(13);t.exports=function(t,e,n){var i=e(t);return o(t)?i:r(i,n(t))}},function(t,e){t.exports=function(t,e){for(var n=-1,r=e.length,o=t.length;++n<r;)t[o+n]=e[n];return t}},function(t,e,n){var r=n(80),o=n(81),i=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,a=s?function(t){return null==t?[]:(t=Object(t),r(s(t),(function(e){return i.call(t,e)})))}:o;t.exports=a},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,o=0,i=[];++n<r;){var s=t[n];e(s,n,t)&&(i[o++]=s)}return i}},function(t,e){t.exports=function(){return[]}},function(t,e,n){var r=n(83),o=n(92),i=n(96);t.exports=function(t){return i(t)?r(t):o(t)}},function(t,e,n){var r=n(84),o=n(85),i=n(13),s=n(23),a=n(88),u=n(25),c=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=i(t),l=!n&&o(t),f=!n&&!l&&s(t),p=!n&&!l&&!f&&u(t),d=n||l||f||p,h=d?r(t.length,String):[],v=h.length;for(var _ in t)!e&&!c.call(t,_)||d&&("length"==_||f&&("offset"==_||"parent"==_)||p&&("buffer"==_||"byteLength"==_||"byteOffset"==_)||a(_,v))||h.push(_);return h}},function(t,e){t.exports=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}},function(t,e,n){var r=n(86),o=n(10),i=Object.prototype,s=i.hasOwnProperty,a=i.propertyIsEnumerable,u=r(function(){return arguments}())?r:function(t){return o(t)&&s.call(t,"callee")&&!a.call(t,"callee")};t.exports=u},function(t,e,n){var r=n(7),o=n(10);t.exports=function(t){return o(t)&&"[object Arguments]"==r(t)}},function(t,e){t.exports=function(){return!1}},function(t,e){var n=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var r=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&n.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,n){var r=n(7),o=n(26),i=n(10),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&o(t.length)&&!!s[r(t)]}},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,n){(function(t){var r=n(18),o=e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,s=i&&i.exports===o&&r.process,a=function(){try{var t=i&&i.require&&i.require("util").types;return t||s&&s.binding&&s.binding("util")}catch(t){}}();t.exports=a}).call(this,n(24)(t))},function(t,e,n){var r=n(93),o=n(94),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return o(t);var e=[];for(var n in Object(t))i.call(t,n)&&"constructor"!=n&&e.push(n);return e}},function(t,e){var n=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||n)}},function(t,e,n){var r=n(95)(Object.keys,Object);t.exports=r},function(t,e){t.exports=function(t,e){return function(n){return t(e(n))}}},function(t,e,n){var r=n(17),o=n(26);t.exports=function(t){return null!=t&&o(t.length)&&!r(t)}},function(t,e,n){var r=n(98),o=n(11),i=n(99),s=n(100),a=n(101),u=n(7),c=n(20),l=c(r),f=c(o),p=c(i),d=c(s),h=c(a),v=u;(r&&"[object DataView]"!=v(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=v(new o)||i&&"[object Promise]"!=v(i.resolve())||s&&"[object Set]"!=v(new s)||a&&"[object WeakMap]"!=v(new a))&&(v=function(t){var e=u(t),n="[object Object]"==e?t.constructor:void 0,r=n?c(n):"";if(r)switch(r){case l:return"[object DataView]";case f:return"[object Map]";case p:return"[object Promise]";case d:return"[object Set]";case h:return"[object WeakMap]"}return e}),t.exports=v},function(t,e,n){var r=n(2)(n(0),"DataView");t.exports=r},function(t,e,n){var r=n(2)(n(0),"Promise");t.exports=r},function(t,e,n){var r=n(2)(n(0),"Set");t.exports=r},function(t,e,n){var r=n(2)(n(0),"WeakMap");t.exports=r},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(14)),i=function(){function t(){this.network=new o.default,this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return t.prototype.connect=function(t){var e=this;e.connecting=!0,this.network.ajax("POST","https://"+t+"/socket.io/1","",(function(n){var r=n.split(":"),o=r[0],i=parseInt(r[1])/2*1e3;e.socket=new WebSocket("wss://"+t+"/socket.io/1/websocket/"+o);var s=null;e.socket.onopen=function(){e.connected=!0,e.connecting=!1,e.onopen&&e.onopen(),s=setInterval((function(){e.socket.send("2:::")}),i)},e.socket.onclose=function(){e.connected=!1,clearInterval(s),e.onclose&&e.onclose()},e.socket.onmessage=function(t){var n=t.data.split(":"),r=parseInt(n[0]);if(2===r)e.socket.send("2::");else if(5===r){var o=n[1],i=JSON.parse(n.slice(3).join(":")),s=i.name,a=i.args;o&&e.socket.send("6:::"+o),e.onmessage&&e.onmessage(s,a)}else 7===r&&console.log("Socket error: "+t.data)},e.socket.onerror=function(t){e.socket.close(),e.onerror&&e.onerror(t)}}),null,!1,!0)},t.prototype.send=function(t,e){if(this.connected){var n=JSON.stringify({name:t,args:e});this.socket.send("5:::"+n)}else console.log("Leanplum: Socket is not connected.")},t.prototype.setNetworkTimeout=function(t){this.network.setNetworkTimeout(t)},t}();e.default=i},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{u(r.next(t))}catch(t){i(t)}}function a(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=i(n(15)),a=i(n(3)),u=i(n(1)),c=i(n(4)),l=function(){function t(t){this.createRequest=t,this.serviceWorkerRegistration=null}return Object.defineProperty(t.prototype,"serviceWorker",{get:function(){return window.navigator.serviceWorker},enumerable:!0,configurable:!0}),t.prototype.isWebPushSupported=function(){var t;return Boolean(void 0!==(null===(t=window)||void 0===t?void 0:t.navigator)&&"serviceWorker"in window.navigator&&"PushManager"in window)},t.prototype.isWebPushSubscribed=function(){return r(this,void 0,void 0,(function(){var t,e,n;return o(this,(function(r){switch(r.label){case 0:return this.isWebPushSupported()?[4,this.getServiceWorkerRegistration()]:[2,!1];case 1:return(t=r.sent())?[4,t.pushManager.getSubscription()]:[2,!1];case 2:return e=r.sent(),(n=null!==e)&&this.updateNewSubscriptionOnServer(e),[2,n]}}))}))},t.prototype.register=function(t,e){return r(this,void 0,void 0,(function(){var n,r,i,s;return o(this,(function(o){switch(o.label){case 0:if(!this.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),[2,e(!1)];o.label=1;case 1:return o.trys.push([1,3,,4]),n=this,[4,this.serviceWorker.register(t||"/sw.min.js",null)];case 2:return n.serviceWorkerRegistration=o.sent(),r=this.serviceWorkerRegistration.pushManager.getSubscription(),(i=null!==r)&&this.updateNewSubscriptionOnServer(r),[2,e(i)];case 3:return s=o.sent(),console.log("Leanplum: Service Worker Error: ",s),[2,e(!1)];case 4:return[2]}}))}))},t.prototype.subscribeUser=function(){return r(this,void 0,void 0,(function(){var t,e,n;return o(this,(function(r){switch(r.label){case 0:t=this.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68"),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this.serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:t})];case 2:if(!(e=r.sent()))throw new Error;return this.updateNewSubscriptionOnServer(e),[3,4];case 3:throw n=r.sent(),new Error("Leanplum: Failed to subscribe the user: "+n);case 4:return[2,!0]}}))}))},t.prototype.unsubscribeUser=function(){return r(this,void 0,void 0,(function(){var t,e;return o(this,(function(n){switch(n.label){case 0:return[4,this.isWebPushSubscribed()];case 1:if(!n.sent())return[3,6];n.label=2;case 2:return n.trys.push([2,5,,6]),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:if(!(t=n.sent()))throw new Error;return[4,t.unsubscribe()];case 4:return n.sent(),[3,6];case 5:throw e=n.sent(),new Error("Leanplum: Error unsubscribing: "+e);case 6:return[2]}}))}))},t.prototype.getServiceWorkerRegistration=function(){return r(this,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return this.serviceWorkerRegistration?[3,2]:(t=this,[4,this.serviceWorker.getRegistration()]);case 1:t.serviceWorkerRegistration=e.sent(),e.label=2;case 2:return[2,this.serviceWorkerRegistration]}}))}))},t.prototype.urlB64ToUint8Array=function(t){for(var e=(t+"=".repeat((4-t.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),n=this.decodeData(e),r=new Uint8Array(n.length),o=0;o<n.length;++o)r[o]=n.charCodeAt(o);return r},t.prototype.prepareSubscription=function(t){var e=Function.prototype.apply,n=t.getKey?t.getKey("p256dh"):"",r=t.getKey?t.getKey("auth"):"",o=this.encodeData(e.call(String.fromCharCode,null,new Uint8Array(n))),i=this.encodeData(e.call(String.fromCharCode,null,new Uint8Array(r)));return{endpoint:t.endpoint,key:o,auth:i}},t.prototype.updateNewSubscriptionOnServer=function(t){if(t){var e=this.prepareSubscription(t),n=JSON.stringify(e),r=c.default.getFromLocalStorage(u.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION);s.default(r,n)||(c.default.saveToLocalStorage(u.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,n),this.setSubscription(n))}},t.prototype.setSubscription=function(t){if(t){var e=(new a.default).add(u.default.PARAMS.WEB_PUSH_SUBSCRIPTION,t);this.createRequest(u.default.METHODS.SET_DEVICE_ATTRIBUTES,e,{queued:!1,sendNow:!0})}},t.prototype.encodeData=function(t){return window.btoa(t)},t.prototype.decodeData=function(t){return window.atob(t)},t}();e.default=l},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(3)),i=r(n(1)),s=r(n(4)),a=function(){function t(t){this.createRequest=t,this.actionMetadata={},this.hasReceivedDiffs=!1,this.merged=void 0,this.variables=null,this.variablesChangedHandlers=[],this.variantDebugInfo={},this.diffs=void 0,this.token="",this.variants=[]}return t.prototype.applyDiffs=function(t,e,n){this.diffs=t,this.variants=e,this.actionMetadata=n,this.hasReceivedDiffs=!0,this.merged=function t(e,n){if("number"==typeof n||"boolean"==typeof n||"string"==typeof n)return n;if(null==n)return e;var r=function(t){return function(e){if(t instanceof Array)for(var n=0;n<t.length;n++)e(t[n]);else for(var r in t)({}).hasOwnProperty.call(t,r)&&e(r)}},o=r(e),i=r(n),s=!1;if(null===e&&!(n instanceof Array))for(var a in s=null,n)if(n.hasOwnProperty(a)){if(null===s&&(s=!0),"string"!=typeof a){s=!1;break}if(a.length<3||"["!==a.charAt(0)||"]"!==a.charAt(a.length-1)){s=!1;break}}if(e instanceof Array||s){var u=[];return o((function(t){u.push(t)})),i((function(e){for(var r=parseInt(e.substring(1,e.length-1)),o=n[e];r>=u.length;)u.push(null);u[r]=t(u[r],o)})),u}var c={};return o((function(t){null!==n[t]&&void 0!==n[t]||(c[t]=e[t])})),i((function(r){c[r]=t(null===e?null:e[r]||{},n[r])})),c}(this.variables,t),this.saveDiffs(),this.onUpdate&&this.onUpdate()},t.prototype.loadDiffs=function(){try{this.applyDiffs(JSON.parse(this.loadLocal(i.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(this.loadLocal(i.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(this.loadLocal(i.default.DEFAULT_KEYS.ACTION_METADATA)||null)),this.token=this.loadLocal(i.default.DEFAULT_KEYS.TOKEN),this.variantDebugInfo=this.loadLocal(i.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(t){console.log("Leanplum: Invalid diffs: "+t)}},t.prototype.saveDiffs=function(){this.saveLocal(i.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(this.diffs||{})),this.saveLocal(i.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(this.variants||[])),this.saveLocal(i.default.DEFAULT_KEYS.ACTION_METADATA,JSON.stringify(this.actionMetadata||{})),this.saveLocal(i.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(this.variantDebugInfo||{})),this.saveLocal(i.default.DEFAULT_KEYS.TOKEN,this.token)},t.prototype.getVariable=function(){for(var t,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(0===(null===(t=e)||void 0===t?void 0:t.length))return null;var r=this.getVariables();if(r)for(var o=0;o<e.length;o++)r=r[e[o]];return r},t.prototype.getVariables=function(){return void 0!==this.merged?this.merged:this.variables},t.prototype.setVariables=function(t){this.variables=t},t.prototype.addVariablesChangedHandler=function(t){this.variablesChangedHandlers.push(t),this.hasReceivedDiffs&&t()},t.prototype.removeVariablesChangedHandler=function(t){var e=this.variablesChangedHandlers.indexOf(t);e>=0&&this.variablesChangedHandlers.splice(e,1)},t.prototype.triggerVariablesChangedHandlers=function(){for(var t=0;t<this.variablesChangedHandlers.length;t++)this.variablesChangedHandlers[t]()},t.prototype.getVariantDebugInfo=function(){return this.variantDebugInfo},t.prototype.setVariantDebugInfo=function(t){this.variantDebugInfo=t},t.prototype.sendVariables=function(){var t,e=((t={})[i.default.PARAMS.VARIABLES]=this.variables,t),n=(new o.default).body(JSON.stringify(e));this.createRequest(i.default.METHODS.SET_VARS,n,{sendNow:!0})},t.prototype.clearUserContent=function(){this.diffs=void 0,this.variables=null,this.variants=[],this.variantDebugInfo={},this.merged=void 0},t.prototype.loadLocal=function(t){return s.default.getFromLocalStorage(t)},t.prototype.saveLocal=function(t,e){s.default.saveToLocalStorage(t,e)},t}();e.default=a}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,