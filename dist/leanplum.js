!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.5.0",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",CURRENCY_CODE:"currencyCode",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",NEWSFEED_MESSAGES:"newsfeedMessages",MESSAGE_ID:"messageId",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",SYNC_INBOX:"syncNewsfeed",MESSAGES:"messages",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_METADATA:"actionMetadata",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_METADATA:"__leanplum_action_metadata",INBOX_MESSAGES:"__leanplum_inbox_messages",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)",DEFAULT_PUSH_ACTION:"Open action"}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(0)),i=function(){function e(){this.argString="",this.argValues={}}return e.prototype.add=function(e,t){if(void 0===t)return this;this.argString&&(this.argString+="&");var n="";return n=t instanceof Array?JSON.stringify(t):encodeURIComponent(t),this.argString+=e+"="+n,this.argValues[e]=t,this},e.prototype.body=function(e){return e?(this._body=e,this):this._body},e.prototype.attachApiKeys=function(e,t){return this.add(o.default.PARAMS.APP_ID,e).add(o.default.PARAMS.CLIENT,o.default.CLIENT).add(o.default.PARAMS.CLIENT_KEY,t)},e.prototype.build=function(){return this.argString},e.prototype.buildDict=function(){return this.argValues},e}();t.default=i},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0});var o={},i=function(){function e(){}return e.getFromLocalStorage=function(e){return!1===r?o[e]:localStorage[e]},e.saveToLocalStorage=function(e,t){if(!1!==r)try{localStorage[e]=t}catch(n){r=!1,o[e]=t}else o[e]=t},e.removeFromLocalStorage=function(e){if(!1!==r)try{localStorage.removeItem(e)}catch(t){r=!1,delete o[e]}else delete o[e]},e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.networkTimeoutSeconds=10,this.requestQueue=[],this.runningRequest=!1}return e.prototype.setNetworkTimeout=function(e){this.networkTimeoutSeconds=e},e.prototype.ajax=function(e,t,n,r,o,i,s){var a=this;if(i){if(this.runningRequest)return this.enqueueRequest(arguments);this.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===t.indexOf("https:")&&(t="http:"+t.substring(6)),this.ajaxIE8.call(this,arguments);var u=!1,c=new XMLHttpRequest;c.onreadystatechange=function(){if(4===c.readyState){if(u)return;var e;u=!0;var t=!1;if(s)e=c.responseText;else try{e=JSON.parse(c.responseText)}catch(e){setTimeout((function(){o&&o(null,c)}),0),t=!0}t||(c.status>=200&&c.status<300?setTimeout((function(){r&&r(e,c)}),0):setTimeout((function(){o&&o(e,c)}),0)),i&&(a.runningRequest=!1,a.dequeueRequest())}},c.open(e,t,!0),c.setRequestHeader("Content-Type","text/plain"),c.send(n),setTimeout((function(){u||c.abort()}),1e3*this.networkTimeoutSeconds)},e.prototype.ajaxIE8=function(e,t,n,r,o,i,s){var a=this,u=new XDomainRequest;u.onload=function(){var e,t=!1;if(s)e=u.responseText;else try{e=JSON.parse(u.responseText)}catch(e){setTimeout((function(){o&&o(null,u)}),0),t=!0}t||setTimeout((function(){r&&r(e,u)}),0),i&&(a.runningRequest=!1,a.dequeueRequest())},u.onerror=u.ontimeout=function(){setTimeout((function(){o&&o(null,u)}),0),i&&(a.runningRequest=!1,a.dequeueRequest())},u.onprogress=function(){},u.open(e,t),u.timeout=1e3*this.networkTimeoutSeconds,u.send(n)},e.prototype.enqueueRequest=function(e){this.requestQueue.push(e)},e.prototype.dequeueRequest=function(){var e=this.requestQueue.shift();e&&this.ajax.call(this,e)},e}();t.default=r},function(e,t,n){var r=n(5);e.exports=r.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(0)),i=r(n(6)),s=function(){function e(){}return e.setApiPath=function(t){e._lp.setApiPath(t)},e.setEmail=function(t){e._lp.setEmail(t)},e.setNetworkTimeout=function(t){e._lp.setNetworkTimeout(t)},e.setAppIdForDevelopmentMode=function(t,n){e._lp.setAppIdForDevelopmentMode(t,n)},e.setAppIdForProductionMode=function(t,n){e._lp.setAppIdForProductionMode(t,n)},e.setSocketHost=function(t){e._lp.setSocketHost(t)},e.setDeviceId=function(t){e._lp.setDeviceId(t)},e.setAppVersion=function(t){e._lp.setAppVersion(t)},e.setDeviceName=function(t){e._lp.setDeviceName(t)},e.setDeviceModel=function(t){e._lp.setDeviceModel(t)},e.setRequestBatching=function(t,n){e._lp.setRequestBatching(t,n)},e.setSystemName=function(t){e._lp.setSystemName(t)},e.setSystemVersion=function(t){e._lp.setSystemVersion(t)},e.setVariables=function(t){e._lp.setVariables(t)},e.setVariantDebugInfoEnabled=function(t){e._lp.setVariantDebugInfoEnabled(t)},e.getVariantDebugInfo=function(){return e._lp.getVariantDebugInfo()},e.getVariables=function(){return e._lp.getVariables()},e.getVariable=function(){for(var t,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return(t=e._lp).getVariable.apply(t,n)},e.getVariants=function(){return e._lp.getVariants()},e.inbox=function(){return e._lp.inbox()},e.addStartResponseHandler=function(t){e._lp.addStartResponseHandler(t)},e.removeStartResponseHandler=function(t){e._lp.removeStartResponseHandler(t)},e.addVariablesChangedHandler=function(t){e._lp.addVariablesChangedHandler(t)},e.removeVariablesChangedHandler=function(t){e._lp.removeVariablesChangedHandler(t)},e.forceContentUpdate=function(t){e._lp.forceContentUpdate(t)},e.start=function(t,n,r){e._lp.start(t,n,r)},e.startFromCache=function(t,n,r){e._lp.startFromCache(t,n,r)},e.stop=function(){e._lp.stop()},e.pauseSession=function(){e._lp.pauseSession()},e.resumeSession=function(){e._lp.resumeSession()},e.pauseState=function(){e._lp.pauseState()},e.resumeState=function(){e._lp.resumeState()},e.setUserId=function(t){e.setUserAttributes(t)},e.setUserAttributes=function(t,n){e._lp.setUserAttributes(t,n)},e.track=function(t,n,r,o){e._lp.track(t,n,r,o)},e.trackPurchase=function(t,n,r,o){void 0===o&&(o="Purchase"),e._lp.trackPurchase(t,n,r,o)},e.advanceTo=function(t,n,r){e._lp.advanceTo(t,n,r)},e.isWebPushSupported=function(){return e._lp.isWebPushSupported()},e.isWebPushSubscribed=function(){return e._lp.isWebPushSubscribed()},e.registerForWebPush=function(t){return e._lp.registerForWebPush(t)},e.unregisterFromWebPush=function(){return e._lp.unregisterFromWebPush()},e.clearUserContent=function(){e._lp.clearUserContent()},e.__destroy=function(){this._lp=new i.default(window)},e._lp=new i.default(window),e.VERSION=o.default.SDK_VERSION,e}();t.default=s},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(1)),s=o(n(7)),a=o(n(0)),u=o(n(8)),c=o(n(9)),l=o(n(10)),d=o(n(11)),f=o(n(2)),p=o(n(16)),h=o(n(17)),_=function(){function e(e){this.wnd=e,this._internalState=new u.default,this._lpInbox=new c.default(this.createRequest.bind(this),this.onInboxAction.bind(this)),this._lpRequest=new l.default,this._lpSocket=new d.default,this._pushManager=new p.default(this.createRequest.bind(this)),this._varCache=new h.default(this.createRequest.bind(this)),this._browserDetector=new s.default(e)}return e.prototype.setApiPath=function(e){this._lpRequest.apiPath&&(this._lpRequest.apiPath=e)},e.prototype.setEmail=function(e){this._email=e},e.prototype.setNetworkTimeout=function(e){this._lpRequest.setNetworkTimeout(e),this._lpSocket.setNetworkTimeout(e)},e.prototype.setAppIdForDevelopmentMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!0},e.prototype.setAppIdForProductionMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!1},e.prototype.setSocketHost=function(e){this._lpSocket.setSocketHost(e)},e.prototype.setDeviceId=function(e){this._lpRequest.deviceId=e},e.prototype.setAppVersion=function(e){this._lpRequest.versionName=e},e.prototype.setDeviceName=function(e){this._deviceName=e},e.prototype.setDeviceModel=function(e){this._deviceModel=e},e.prototype.setRequestBatching=function(e,t){this._lpRequest.batchEnabled=e,this._lpRequest.batchCooldown=t},e.prototype.setSystemName=function(e){this._systemName=e},e.prototype.setSystemVersion=function(e){this._systemVersion=e},e.prototype.setVariables=function(e){this._varCache.setVariables(e)},e.prototype.setVariantDebugInfoEnabled=function(e){this._internalState.variantDebugInfoEnabled=e},e.prototype.getVariantDebugInfo=function(){return this._varCache.getVariantDebugInfo()},e.prototype.getVariables=function(){return this._varCache.getVariables()},e.prototype.getVariable=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(e=this._varCache).getVariable.apply(e,t)},e.prototype.getVariants=function(){return this._varCache.variants||[]},e.prototype.inbox=function(){return this._lpInbox},e.prototype.onInboxAction=function(e,t){var n=this;switch(t.__name__){case"Chain to Existing Message":var r=this._messageCache[t["Chained message"]];r&&this.onInboxAction(e,r.vars);break;case"Open URL":var o=(new i.default).add(a.default.PARAMS.MESSAGE_ID,e).add(a.default.PARAMS.EVENT,"Open");this.createRequest(a.default.METHODS.TRACK,o,{queued:!1,sendNow:!0,response:function(){return n.wnd.location.assign(t.URL)}})}},e.prototype.addStartResponseHandler=function(e){this._internalState.addStartResponseHandler(e)},e.prototype.removeStartResponseHandler=function(e){this._internalState.removeStartResponseHandler(e)},e.prototype.addVariablesChangedHandler=function(e){this._varCache.addVariablesChangedHandler(e)},e.prototype.removeVariablesChangedHandler=function(e){this._varCache.removeVariablesChangedHandler(e)},e.prototype.forceContentUpdate=function(e){var t=this,n=(new i.default).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1).add(a.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,this._internalState.variantDebugInfoEnabled);this.createRequest(a.default.METHODS.GET_VARS,n,{queued:!1,sendNow:!0,response:function(n){var r=t._lpRequest.getLastResponse(n),o=t._lpRequest.isResponseSuccess(r);o&&(t._varCache.applyDiffs(r[a.default.KEYS.VARS],r[a.default.KEYS.VARIANTS],r[a.default.KEYS.ACTION_METADATA]),t._varCache.setVariantDebugInfo(r[a.default.KEYS.VARIANT_DEBUG_INFO])),e&&e(o)}})},e.prototype.start=function(e,t,n){var r=this;"function"==typeof e?(n=e,t={},e=null):"object"==typeof e&&null!=e?(n=t,t=e,e=null):"function"==typeof t&&(n=t,t={}),this._lpRequest.userId=e,n&&this.addStartResponseHandler(n),this._varCache.onUpdate=function(){r._varCache.triggerVariablesChangedHandlers()};var o=(new i.default).add(a.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(t)).add(a.default.PARAMS.COUNTRY,a.default.VALUES.DETECT).add(a.default.PARAMS.REGION,a.default.VALUES.DETECT).add(a.default.PARAMS.CITY,a.default.VALUES.DETECT).add(a.default.PARAMS.LOCATION,a.default.VALUES.DETECT).add(a.default.PARAMS.SYSTEM_NAME,this._systemName||this._browserDetector.OS).add(a.default.PARAMS.SYSTEM_VERSION,(this._systemVersion||"").toString()).add(a.default.PARAMS.BROWSER_NAME,this._browserDetector.browser).add(a.default.PARAMS.BROWSER_VERSION,this._browserDetector.version.toString()).add(a.default.PARAMS.LOCALE,a.default.VALUES.DETECT).add(a.default.PARAMS.DEVICE_NAME,this._deviceName||this._browserDetector.browser+" "+this._browserDetector.version).add(a.default.PARAMS.DEVICE_MODEL,this._deviceModel||"Web Browser").add(a.default.PARAMS.NEWSFEED_MESSAGES,this._lpInbox.messageIds()).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1).add(a.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,this._internalState.variantDebugInfoEnabled);this.createRequest(a.default.METHODS.START,o,{queued:!0,sendNow:!0,response:function(e){r._internalState.hasStarted=!0;var t=r._lpRequest.getLastResponse(e);if(r._lpRequest.isResponseSuccess(t)){if(r._internalState.startSuccessful=!0,r._messageCache=t[a.default.KEYS.MESSAGES],t[a.default.KEYS.SYNC_INBOX]&&r._lpInbox.downloadMessages(),r._internalState.devMode){var n=t[a.default.KEYS.LATEST_VERSION];n&&console.log("A newer version of the Leanplum SDK, "+n+', is available.\nUse "npm update leanplum-sdk" or go to https://docs.leanplum.com/reference#javascript-setup to download it.'),r.connectSocket()}r._varCache.applyDiffs(t[a.default.KEYS.VARS],t[a.default.KEYS.VARIANTS],t[a.default.KEYS.ACTION_METADATA]),r._varCache.setVariantDebugInfo(t[a.default.KEYS.VARIANT_DEBUG_INFO]),r._varCache.token=t[a.default.KEYS.TOKEN]}else r._internalState.startSuccessful=!1,r._varCache.loadDiffs();r._internalState.triggerStartHandlers()}})},e.prototype.startFromCache=function(e,t,n){"function"==typeof e?(n=e,t={},e=null):"object"==typeof e&&null!=e?(n=t,t=e,e=null):"function"==typeof t&&(n=t,t={}),this._lpRequest.userId=e,n&&this.addStartResponseHandler(n),this._internalState.hasStarted=!0,this._internalState.startSuccessful=!0,this._internalState.devMode&&this.connectSocket(),this._varCache.loadDiffs(),this._internalState.triggerStartHandlers()},e.prototype.stop=function(){this.createRequest(a.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0})},e.prototype.pauseSession=function(){this.createRequest(a.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.resumeSession=function(){this.createRequest(a.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.pauseState=function(){this.createRequest(a.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},e.prototype.resumeState=function(){this.createRequest(a.default.METHODS.RESUME_STATE,void 0,{queued:!0})},e.prototype.setUserId=function(e){this.setUserAttributes(e)},e.prototype.setUserAttributes=function(e,t){if(void 0===t)if("object"==typeof e)t=e,e=void 0;else if("string"!=typeof e)return void console.log("Leanplum: setUserAttributes expects a string or an object");var n=(new i.default).add(a.default.PARAMS.USER_ATTRIBUTES,t?JSON.stringify(t):void 0).add(a.default.PARAMS.NEW_USER_ID,e);this.createRequest(a.default.METHODS.SET_USER_ATTRIBUTES,n,{queued:!0}),e&&(this._lpRequest.userId=e,f.default.saveToLocalStorage(a.default.DEFAULT_KEYS.USER_ID,this._lpRequest.userId))},e.prototype.track=function(e,t,n,r){"object"==typeof t&&null!=t?(r=t,n=void 0,t=void 0):"string"==typeof t?(r=n,n=t,t=void 0):"object"==typeof n&&null!=n&&(r=n,n=void 0);var o=(new i.default).add(a.default.PARAMS.EVENT,e).add(a.default.PARAMS.VALUE,t||0).add(a.default.PARAMS.INFO,n).add(a.default.PARAMS.PARAMS,JSON.stringify(r));this.createRequest(a.default.METHODS.TRACK,o,{queued:!0})},e.prototype.trackPurchase=function(e,t,n,r){void 0===r&&(r="Purchase");var o=(new i.default).add(a.default.PARAMS.EVENT,r).add(a.default.PARAMS.VALUE,e||0).add(a.default.PARAMS.PARAMS,JSON.stringify(n));t&&o.add(a.default.PARAMS.CURRENCY_CODE,t),this.createRequest(a.default.METHODS.TRACK,o,{queued:!0})},e.prototype.advanceTo=function(e,t,n){"object"==typeof t&&null!=t&&(n=t,t=void 0);var r=(new i.default).add(a.default.PARAMS.STATE,e).add(a.default.PARAMS.INFO,t).add(a.default.PARAMS.PARAMS,JSON.stringify(n));this.createRequest(a.default.METHODS.ADVANCE,r,{queued:!0})},e.prototype.isWebPushSupported=function(){return this._pushManager.isWebPushSupported()},e.prototype.isWebPushSubscribed=function(){return this._pushManager.isWebPushSubscribed()},e.prototype.registerForWebPush=function(e){var t=this;return this._pushManager.isWebPushSupported()?this._pushManager.register(e,(function(e){return e?Promise.resolve(!0):t._pushManager.subscribeUser()})):Promise.reject("Leanplum: WebPush is not supported.")},e.prototype.unregisterFromWebPush=function(){return this._pushManager.unsubscribeUser()},e.prototype.clearUserContent=function(){this._varCache.clearUserContent()},e.prototype.createRequest=function(e,t,n){void 0===n&&(n={}),this._lpRequest.request(e,t,r({devMode:this._internalState.devMode},n))},e.prototype.connectSocket=function(){this._lpSocket.connect(this._varCache,{appId:this._lpRequest.appId,deviceId:this._lpRequest.deviceId},this.createRequest,this._lpRequest.getLastResponse)},e}();t.default=_},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.browser=this.searchString(this.getBrowserData(e))||"Unknown Browser",this.version=this.searchVersion(e.navigator.userAgent)||this.searchVersion(e.navigator.appVersion)||"Unknown Version",this.OS=this.searchString(this.getOSData(e))||"Unknown OS"}return e.prototype.searchString=function(e){for(var t=0;t<e.length;t++){var n=e[t].string,r=e[t].prop;if(this.versionSearchString=e[t].versionSearch||e[t].identity,n){if(-1!==n.indexOf(e[t].subString))return e[t].identity}else if(r)return e[t].identity}},e.prototype.searchVersion=function(e){if(e){var t=e.indexOf(this.versionSearchString);if(-1!==t)return parseFloat(e.substring(t+this.versionSearchString.length+1))}},e.prototype.getBrowserData=function(e){return[{string:e.navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:e.navigator.userAgent,subString:"OmniWeb",identity:"OmniWeb",versionSearch:"OmniWeb/"},{string:e.navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:e.opera,identity:"Opera",versionSearch:"Version"},{string:e.navigator.vendor,subString:"iCab",identity:"iCab"},{string:e.navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:e.navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:e.navigator.vendor,subString:"Camino",identity:"Camino"},{string:e.navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:e.navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:e.navigator.userAgent,subString:"Android",identity:"Android Browser",versionSearch:"Version"},{string:e.navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:e.navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}]},e.prototype.getOSData=function(e){return[{string:e.navigator.platform,subString:"Win",identity:"Windows"},{string:e.navigator.platform,subString:"Mac",identity:"Mac OS"},{string:e.navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:e.navigator.userAgent,subString:"Android",identity:"Android"},{string:e.navigator.platform,subString:"Linux",identity:"Linux"}]},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.startHandlers=[],this.devMode=!1,this.hasStarted=!1,this.startSuccessful=!1,this.variantDebugInfoEnabled=!1}return e.prototype.addStartResponseHandler=function(e){this.startHandlers.push(e),this.hasStarted&&e(this.startSuccessful)},e.prototype.removeStartResponseHandler=function(e){var t=this.startHandlers.indexOf(e);t>=0&&this.startHandlers.splice(t,1)},e.prototype.triggerStartHandlers=function(){for(var e=0;e<this.startHandlers.length;e++)this.startHandlers[e](this.startSuccessful)},e}();t.default=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(0)),i=r(n(1)),s=function(){function e(e,t){this.createRequest=e,this.onAction=t,this.messageMap={},this.changeHandlers=[],this.load()}return e.prototype.downloadMessages=function(){var e=this;this.createRequest("getNewsfeedMessages",void 0,{queued:!0,sendNow:!0,response:function(t){e.messageMap=t.response[0].newsfeedMessages,e.triggerChangeHandlers()}})},e.prototype.read=function(e){var t=this.messageMap[e];if(t){if(!t.isRead){t.isRead=!0,this.triggerChangeHandlers();var n=new i.default;n.add("newsfeedMessageId",e),this.createRequest("markNewsfeedMessageAsRead",n,{})}var r=this.message(e);if(r.openAction()){var o=e.split("##")[0];this.onAction(o,r.openAction())}}},e.prototype.remove=function(e){if(this.messageMap[e]){delete this.messageMap[e],this.triggerChangeHandlers();var t=new i.default;t.add("newsfeedMessageId",e),this.createRequest("deleteNewsfeedMessage",t,{})}},e.prototype.onChanged=function(e){this.changeHandlers.push(e)},e.prototype.triggerChangeHandlers=function(){this.changeHandlers.forEach((function(e){return e()})),this.save()},e.prototype.save=function(){sessionStorage.setItem(o.default.DEFAULT_KEYS.INBOX_MESSAGES,JSON.stringify(this.messageMap))},e.prototype.load=function(){var e=sessionStorage.getItem(o.default.DEFAULT_KEYS.INBOX_MESSAGES);this.messageMap=JSON.parse(e)||{}},e.prototype.count=function(){return Object.values(this.messageMap).length},e.prototype.unreadCount=function(){return Object.values(this.messageMap).filter((function(e){return!e.isRead})).length},e.prototype.messages=function(e){var t=[];for(var n in this.messageMap){var r=this.messageMap[n];e(r)&&t.push(a.create(n,r))}return t},e.prototype.allMessages=function(){return this.messages((function(){return!0}))},e.prototype.unreadMessages=function(){return this.messages((function(e){return!e.isRead}))},e.prototype.messageIds=function(){return Object.keys(this.messageMap)},e.prototype.message=function(e){var t=this.messageMap[e];return t?a.create(e,t):null},e}();t.default=s;var a=function(){function e(e,t,n,r,o,i,s){this._id=e,this._title=t,this._subtitle=n,this._timestamp=r,this._isRead=o,this._imageUrl=i,this._openAction=s}return e.create=function(t,n){var r,i,s,a,u,c,l,d;return new e(t,null===(i=null===(r=n.messageData)||void 0===r?void 0:r.vars)||void 0===i?void 0:i.Title,null===(a=null===(s=n.messageData)||void 0===s?void 0:s.vars)||void 0===a?void 0:a.Subtitle,n.deliveryTimestamp,n.isRead,null===(c=null===(u=n.messageData)||void 0===u?void 0:u.vars)||void 0===c?void 0:c.Image,null===(d=null===(l=n.messageData)||void 0===l?void 0:l.vars)||void 0===d?void 0:d[o.default.VALUES.DEFAULT_PUSH_ACTION])},e.prototype.id=function(){return this._id},e.prototype.title=function(){return this._title},e.prototype.subtitle=function(){return this._subtitle},e.prototype.timestamp=function(){return this._timestamp},e.prototype.isRead=function(){return this._isRead},e.prototype.imageUrl=function(){return this._imageUrl},e.prototype.openAction=function(){return this._openAction},e}();t.InboxMessage=a},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),i=r(n(0)),s=r(n(2)),a=r(n(3)),u=function(){function e(){this.cooldownTimeout=null,this.lastRequestTime=void 0,this.network=new a.default,this.apiPath="https://www.leanplum.com/api",this.batchCooldown=5,this.batchEnabled=!0}return e.prototype.request=function(e,t,n){var r=this;if(void 0===n&&(n={}),n=n||{},t=t||new o.default,this.deviceId||(this.deviceId=this.loadLocal(i.default.DEFAULT_KEYS.DEVICE_ID)),!this.deviceId){for(var s="",a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",u=0;u<16;u++)s+=a.charAt(Math.floor(Math.random()*a.length));this.deviceId=s,this.saveLocal(i.default.DEFAULT_KEYS.DEVICE_ID,s)}this.userId||(this.userId=this.loadLocal(i.default.DEFAULT_KEYS.USER_ID),this.userId||(this.userId=this.deviceId)),this.saveLocal(i.default.DEFAULT_KEYS.USER_ID,this.userId);var c=t.attachApiKeys(this.appId,this.clientKey).add(i.default.PARAMS.SDK_VERSION,i.default.SDK_VERSION).add(i.default.PARAMS.DEVICE_ID,this.deviceId).add(i.default.PARAMS.USER_ID,this.userId).add(i.default.PARAMS.ACTION,e).add(i.default.PARAMS.VERSION_NAME,this.versionName).add(i.default.PARAMS.DEV_MODE,n.devMode).add(i.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),l=n.success||n.response,d=n.error||n.response;if(!this.appId||!this.clientKey){var f="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(f),void(d&&d(f))}if(t.body())this.network.ajax("POST",this.apiPath+"?"+c.build(),t.body(),l,d,n.queued);else{var p=n.devMode||n.sendNow||!this.batchEnabled,h=function(){var e=r.popUnsentRequests();if(e.length>0){var t=JSON.stringify({data:e}),s=(new o.default).attachApiKeys(r.appId,r.clientKey).add(i.default.PARAMS.SDK_VERSION,i.default.SDK_VERSION).add(i.default.PARAMS.ACTION,i.default.METHODS.MULTI).add(i.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();r.network.ajax("POST",r.apiPath+"?"+s,t,l,d,n.queued)}};if(!p&&this.batchCooldown){var _=(new Date).getTime()/1e3;!this.lastRequestTime||_-this.lastRequestTime>=this.batchCooldown?(p=!0,this.lastRequestTime=_):this.cooldownTimeout||(this.cooldownTimeout=setTimeout((function(){r.cooldownTimeout=null,r.lastRequestTime=(new Date).getTime()/1e3,h()}),1e3*(this.batchCooldown-(_-this.lastRequestTime))))}this.saveRequestForLater(c.buildDict()),p&&h()}},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e.prototype.getLastResponse=function(e){var t,n,r,o=null!==(n=null===(t=null==e?void 0:e.response)||void 0===t?void 0:t.length)&&void 0!==n?n:0;return o>0?null===(r=null==e?void 0:e.response)||void 0===r?void 0:r[o-1]:null},e.prototype.isResponseSuccess=function(e){return Boolean(null==e?void 0:e.success)},e.prototype.saveRequestForLater=function(e){var t=this.loadLocal(i.default.DEFAULT_KEYS.COUNT)||0,n=i.default.DEFAULT_KEYS.ITEM+t;this.saveLocal(n,JSON.stringify(e)),t++,this.saveLocal(i.default.DEFAULT_KEYS.COUNT,t)},e.prototype.popUnsentRequests=function(){var e=[],t=this.loadLocal(i.default.DEFAULT_KEYS.COUNT)||0;this.removeLocal(i.default.DEFAULT_KEYS.COUNT);for(var n=0;n<t;n++){var r=i.default.DEFAULT_KEYS.ITEM+n;try{e.push(JSON.parse(this.loadLocal(r)))}catch(e){}this.removeLocal(r)}return e},e.prototype.loadLocal=function(e){return s.default.getFromLocalStorage(e)},e.prototype.saveLocal=function(e,t){s.default.saveToLocalStorage(e,t)},e.prototype.removeLocal=function(e){s.default.removeFromLocalStorage(e)},e}();t.default=u},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(12)),i=r(n(1)),s=r(n(0)),a=r(n(15)),u=function(){function e(){this.networkTimeoutSeconds=10,this.socketClient=null,this.socketHost="dev.leanplum.com"}return e.prototype.connect=function(e,t,n,r){var u=this;if(WebSocket){var c=!1;this.socketClient=new a.default,this.socketClient.setNetworkTimeout(this.networkTimeoutSeconds),this.socketClient.onopen=function(){var e;c||(console.log("Leanplum: Connected to development server."),u.socketClient.send("auth",((e={})[s.default.PARAMS.APP_ID]=t.appId,e[s.default.PARAMS.DEVICE_ID]=t.deviceId,e)),c=!0)},this.socketClient.onerror=function(e){console.log("Leanplum: Socket error",e)},this.socketClient.onmessage=function(t,a){if("updateVars"===t){var c=(new i.default).add(s.default.PARAMS.INCLUDE_DEFAULTS,!1);n(s.default.METHODS.GET_VARS,c,{queued:!1,sendNow:!0,response:function(t){var n=r(t),i=n[s.default.KEYS.VARS],a=n[s.default.KEYS.VARIANTS],u=n[s.default.KEYS.ACTION_METADATA];o.default(i,e.diffs)||e.applyDiffs(i,a,u)}})}else"getVariables"===t?(e.sendVariables(),u.socketClient.send("getContentResponse",{updated:!0})):"getActions"===t?u.socketClient.send("getContentResponse",{updated:!1}):"registerDevice"===t&&alert("Your device has been registered to "+a[0].email+".")},this.socketClient.onclose=function(){console.log("Leanplum: Disconnected from development server."),c=!1},this.socketClient.connect(this.socketHost),setInterval((function(){u.socketClient.connected||u.socketClient.connecting||u.socketClient.connect(u.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},e.prototype.setSocketHost=function(e){this.socketHost=e},e.prototype.setNetworkTimeout=function(e){var t;this.networkTimeoutSeconds=e,null===(t=this.socketClient)||void 0===t||t.setNetworkTimeout(e)},e}();t.default=u},function(e,t,n){(function(e,n){var r="[object Arguments]",o="[object Map]",i="[object Object]",s="[object Set]",a=/^\[object .+?Constructor\]$/,u=/^(?:0|[1-9]\d*)$/,c={};c["[object Float32Array]"]=c["[object Float64Array]"]=c["[object Int8Array]"]=c["[object Int16Array]"]=c["[object Int32Array]"]=c["[object Uint8Array]"]=c["[object Uint8ClampedArray]"]=c["[object Uint16Array]"]=c["[object Uint32Array]"]=!0,c[r]=c["[object Array]"]=c["[object ArrayBuffer]"]=c["[object Boolean]"]=c["[object DataView]"]=c["[object Date]"]=c["[object Error]"]=c["[object Function]"]=c[o]=c["[object Number]"]=c[i]=c["[object RegExp]"]=c[s]=c["[object String]"]=c["[object WeakMap]"]=!1;var l="object"==typeof e&&e&&e.Object===Object&&e,d="object"==typeof self&&self&&self.Object===Object&&self,f=l||d||Function("return this")(),p=t&&!t.nodeType&&t,h=p&&"object"==typeof n&&n&&!n.nodeType&&n,_=h&&h.exports===p,S=_&&l.process,v=function(){try{return S&&S.binding&&S.binding("util")}catch(e){}}(),g=v&&v.isTypedArray;function b(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function y(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function A(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var E,R,m,T=Array.prototype,I=Function.prototype,D=Object.prototype,M=f["__core-js_shared__"],w=I.toString,O=D.hasOwnProperty,N=(E=/[^.]+$/.exec(M&&M.keys&&M.keys.IE_PROTO||""))?"Symbol(src)_1."+E:"",C=D.toString,P=RegExp("^"+w.call(O).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),U=_?f.Buffer:void 0,V=f.Symbol,L=f.Uint8Array,k=D.propertyIsEnumerable,j=T.splice,q=V?V.toStringTag:void 0,F=Object.getOwnPropertySymbols,H=U?U.isBuffer:void 0,K=(R=Object.keys,m=Object,function(e){return R(m(e))}),W=ve(f,"DataView"),x=ve(f,"Map"),Y=ve(f,"Promise"),B=ve(f,"Set"),z=ve(f,"WeakMap"),G=ve(Object,"create"),J=Ae(W),X=Ae(x),$=Ae(Y),Q=Ae(B),Z=Ae(z),ee=V?V.prototype:void 0,te=ee?ee.valueOf:void 0;function ne(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function re(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function oe(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ie(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new oe;++t<n;)this.add(e[t])}function se(e){var t=this.__data__=new re(e);this.size=t.size}function ae(e,t){var n=me(e),r=!n&&Re(e),o=!n&&!r&&Te(e),i=!n&&!r&&!o&&Oe(e),s=n||r||o||i,a=s?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],u=a.length;for(var c in e)!t&&!O.call(e,c)||s&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||ye(c,u))||a.push(c);return a}function ue(e,t){for(var n=e.length;n--;)if(Ee(e[n][0],t))return n;return-1}function ce(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":q&&q in Object(e)?function(e){var t=O.call(e,q),n=e[q];try{e[q]=void 0;var r=!0}catch(e){}var o=C.call(e);r&&(t?e[q]=n:delete e[q]);return o}(e):function(e){return C.call(e)}(e)}function le(e){return we(e)&&ce(e)==r}function de(e,t,n,a,u){return e===t||(null==e||null==t||!we(e)&&!we(t)?e!=e&&t!=t:function(e,t,n,a,u,c){var l=me(e),d=me(t),f=l?"[object Array]":be(e),p=d?"[object Array]":be(t),h=(f=f==r?i:f)==i,_=(p=p==r?i:p)==i,S=f==p;if(S&&Te(e)){if(!Te(t))return!1;l=!0,h=!1}if(S&&!h)return c||(c=new se),l||Oe(e)?he(e,t,n,a,u,c):function(e,t,n,r,i,a,u){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!a(new L(e),new L(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return Ee(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case o:var c=y;case s:var l=1&r;if(c||(c=A),e.size!=t.size&&!l)return!1;var d=u.get(e);if(d)return d==t;r|=2,u.set(e,t);var f=he(c(e),c(t),r,i,a,u);return u.delete(e),f;case"[object Symbol]":if(te)return te.call(e)==te.call(t)}return!1}(e,t,f,n,a,u,c);if(!(1&n)){var v=h&&O.call(e,"__wrapped__"),g=_&&O.call(t,"__wrapped__");if(v||g){var b=v?e.value():e,E=g?t.value():t;return c||(c=new se),u(b,E,n,a,c)}}if(!S)return!1;return c||(c=new se),function(e,t,n,r,o,i){var s=1&n,a=_e(e),u=a.length,c=_e(t).length;if(u!=c&&!s)return!1;var l=u;for(;l--;){var d=a[l];if(!(s?d in t:O.call(t,d)))return!1}var f=i.get(e);if(f&&i.get(t))return f==t;var p=!0;i.set(e,t),i.set(t,e);var h=s;for(;++l<u;){d=a[l];var _=e[d],S=t[d];if(r)var v=s?r(S,_,d,t,e,i):r(_,S,d,e,t,i);if(!(void 0===v?_===S||o(_,S,n,r,i):v)){p=!1;break}h||(h="constructor"==d)}if(p&&!h){var g=e.constructor,b=t.constructor;g==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof g&&g instanceof g&&"function"==typeof b&&b instanceof b||(p=!1)}return i.delete(e),i.delete(t),p}(e,t,n,a,u,c)}(e,t,n,a,de,u))}function fe(e){return!(!Me(e)||function(e){return!!N&&N in e}(e))&&(Ie(e)?P:a).test(Ae(e))}function pe(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||D,t!==r)return K(e);var t,n,r,o=[];for(var i in Object(e))O.call(e,i)&&"constructor"!=i&&o.push(i);return o}function he(e,t,n,r,o,i){var s=1&n,a=e.length,u=t.length;if(a!=u&&!(s&&u>a))return!1;var c=i.get(e);if(c&&i.get(t))return c==t;var l=-1,d=!0,f=2&n?new ie:void 0;for(i.set(e,t),i.set(t,e);++l<a;){var p=e[l],h=t[l];if(r)var _=s?r(h,p,l,t,e,i):r(p,h,l,e,t,i);if(void 0!==_){if(_)continue;d=!1;break}if(f){if(!b(t,(function(e,t){if(s=t,!f.has(s)&&(p===e||o(p,e,n,r,i)))return f.push(t);var s}))){d=!1;break}}else if(p!==h&&!o(p,h,n,r,i)){d=!1;break}}return i.delete(e),i.delete(t),d}function _e(e){return function(e,t,n){var r=t(e);return me(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,Ne,ge)}function Se(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function ve(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return fe(n)?n:void 0}ne.prototype.clear=function(){this.__data__=G?G(null):{},this.size=0},ne.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ne.prototype.get=function(e){var t=this.__data__;if(G){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return O.call(t,e)?t[e]:void 0},ne.prototype.has=function(e){var t=this.__data__;return G?void 0!==t[e]:O.call(t,e)},ne.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=G&&void 0===t?"__lodash_hash_undefined__":t,this},re.prototype.clear=function(){this.__data__=[],this.size=0},re.prototype.delete=function(e){var t=this.__data__,n=ue(t,e);return!(n<0)&&(n==t.length-1?t.pop():j.call(t,n,1),--this.size,!0)},re.prototype.get=function(e){var t=this.__data__,n=ue(t,e);return n<0?void 0:t[n][1]},re.prototype.has=function(e){return ue(this.__data__,e)>-1},re.prototype.set=function(e,t){var n=this.__data__,r=ue(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},oe.prototype.clear=function(){this.size=0,this.__data__={hash:new ne,map:new(x||re),string:new ne}},oe.prototype.delete=function(e){var t=Se(this,e).delete(e);return this.size-=t?1:0,t},oe.prototype.get=function(e){return Se(this,e).get(e)},oe.prototype.has=function(e){return Se(this,e).has(e)},oe.prototype.set=function(e,t){var n=Se(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},ie.prototype.add=ie.prototype.push=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this},ie.prototype.has=function(e){return this.__data__.has(e)},se.prototype.clear=function(){this.__data__=new re,this.size=0},se.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},se.prototype.get=function(e){return this.__data__.get(e)},se.prototype.has=function(e){return this.__data__.has(e)},se.prototype.set=function(e,t){var n=this.__data__;if(n instanceof re){var r=n.__data__;if(!x||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new oe(r)}return n.set(e,t),this.size=n.size,this};var ge=F?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var s=e[n];t(s,n,e)&&(i[o++]=s)}return i}(F(e),(function(t){return k.call(e,t)})))}:function(){return[]},be=ce;function ye(e,t){return!!(t=null==t?9007199254740991:t)&&("number"==typeof e||u.test(e))&&e>-1&&e%1==0&&e<t}function Ae(e){if(null!=e){try{return w.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Ee(e,t){return e===t||e!=e&&t!=t}(W&&"[object DataView]"!=be(new W(new ArrayBuffer(1)))||x&&be(new x)!=o||Y&&"[object Promise]"!=be(Y.resolve())||B&&be(new B)!=s||z&&"[object WeakMap]"!=be(new z))&&(be=function(e){var t=ce(e),n=t==i?e.constructor:void 0,r=n?Ae(n):"";if(r)switch(r){case J:return"[object DataView]";case X:return o;case $:return"[object Promise]";case Q:return s;case Z:return"[object WeakMap]"}return t});var Re=le(function(){return arguments}())?le:function(e){return we(e)&&O.call(e,"callee")&&!k.call(e,"callee")},me=Array.isArray;var Te=H||function(){return!1};function Ie(e){if(!Me(e))return!1;var t=ce(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function De(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}function Me(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function we(e){return null!=e&&"object"==typeof e}var Oe=g?function(e){return function(t){return e(t)}}(g):function(e){return we(e)&&De(e.length)&&!!c[ce(e)]};function Ne(e){return null!=(t=e)&&De(t.length)&&!Ie(t)?ae(e):pe(e);var t}n.exports=function(e,t){return de(e,t)}}).call(this,n(13),n(14)(e))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(3)),i=function(){function e(){this.network=new o.default,this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return e.prototype.connect=function(e){var t=this;this.connecting=!0,this.network.ajax("POST","https://"+e+"/socket.io/1","",(function(n){var r=n.split(":"),o=r[0],i=parseInt(r[1])/2*1e3;t.socket=new WebSocket("wss://"+e+"/socket.io/1/websocket/"+o);var s=null;t.socket.onopen=function(){t.connected=!0,t.connecting=!1,t.onopen&&t.onopen(),s=setInterval((function(){t.socket.send("2:::")}),i)},t.socket.onclose=function(){t.connected=!1,clearInterval(s),t.onclose&&t.onclose()},t.socket.onmessage=function(e){var n=e.data.split(":"),r=parseInt(n[0]);if(2===r)t.socket.send("2::");else if(5===r){var o=n[1],i=JSON.parse(n.slice(3).join(":")),s=i.name,a=i.args;o&&t.socket.send("6:::"+o),t.onmessage&&t.onmessage(s,a)}else 7===r&&console.log("Socket error: "+e.data)},t.socket.onerror=function(e){t.socket.close(),t.onerror&&self.onerror(e)}}),null,!1,!0)},e.prototype.send=function(e,t){if(this.connected){var n=JSON.stringify({name:e,args:t});this.socket.send("5:::"+n)}else console.log("Leanplum: Socket is not connected.")},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e}();t.default=i},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=i(n(1)),a=i(n(0)),u=i(n(2)),c=function(){function e(e){this.createRequest=e,this.serviceWorkerRegistration=null}return Object.defineProperty(e.prototype,"serviceWorker",{get:function(){return window.navigator.serviceWorker},enumerable:!0,configurable:!0}),e.prototype.isWebPushSupported=function(){return Boolean(void 0!==(null===window||void 0===window?void 0:window.navigator)&&"serviceWorker"in window.navigator&&"PushManager"in window)},e.prototype.isWebPushSubscribed=function(){return r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:return this.isWebPushSupported()?[4,this.getServiceWorkerRegistration()]:[2,!1];case 1:return(e=r.sent())?[4,e.pushManager.getSubscription()]:[2,!1];case 2:return t=r.sent(),(n=null!==t)&&this.updateNewSubscriptionOnServer(t),[2,n]}}))}))},e.prototype.register=function(e,t){return r(this,void 0,void 0,(function(){var n,r,i,s;return o(this,(function(o){switch(o.label){case 0:if(!this.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),[2,t(!1)];o.label=1;case 1:return o.trys.push([1,4,,5]),n=this,[4,this.serviceWorker.register(e||"/sw.min.js",null)];case 2:return n.serviceWorkerRegistration=o.sent(),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:return r=o.sent(),(i=null!==r)&&this.updateNewSubscriptionOnServer(r),[2,t(i)];case 4:return s=o.sent(),console.log("Leanplum: Service Worker Error: ",s),[2,t(!1)];case 5:return[2]}}))}))},e.prototype.subscribeUser=function(){return r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:e=this.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68"),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this.serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})];case 2:if(!(t=r.sent()))throw new Error;return this.updateNewSubscriptionOnServer(t),[3,4];case 3:throw n=r.sent(),new Error("Leanplum: Failed to subscribe the user: "+n);case 4:return[2,!0]}}))}))},e.prototype.unsubscribeUser=function(){return r(this,void 0,void 0,(function(){var e,t;return o(this,(function(n){switch(n.label){case 0:return[4,this.isWebPushSubscribed()];case 1:if(!n.sent())return[3,6];n.label=2;case 2:return n.trys.push([2,5,,6]),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:if(!(e=n.sent()))throw new Error;return[4,e.unsubscribe()];case 4:return n.sent(),[3,6];case 5:throw t=n.sent(),new Error("Leanplum: Error unsubscribing: "+t);case 6:return[2]}}))}))},e.prototype.getServiceWorkerRegistration=function(){return r(this,void 0,void 0,(function(){var e;return o(this,(function(t){switch(t.label){case 0:return this.serviceWorkerRegistration?[3,2]:(e=this,[4,this.serviceWorker.getRegistration()]);case 1:e.serviceWorkerRegistration=t.sent(),t.label=2;case 2:return[2,this.serviceWorkerRegistration]}}))}))},e.prototype.urlB64ToUint8Array=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),n=this.decodeData(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r[o]=n.charCodeAt(o);return r},e.prototype.updateNewSubscriptionOnServer=function(e){if(e){var t=this.prepareSubscription(e),n=JSON.stringify(t);u.default.getFromLocalStorage(a.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION)!==n&&(u.default.saveToLocalStorage(a.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,n),this.setSubscription(n))}},e.prototype.prepareSubscription=function(e){var t="getKey"in e?e.getKey("p256dh"):[],n="getKey"in e?e.getKey("auth"):[],r=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(t))),o=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(n)));return{endpoint:e.endpoint,key:r,auth:o}},e.prototype.setSubscription=function(e){if(e){var t=(new s.default).add(a.default.PARAMS.WEB_PUSH_SUBSCRIPTION,e);this.createRequest(a.default.METHODS.SET_DEVICE_ATTRIBUTES,t,{queued:!1,sendNow:!0})}},e.prototype.encodeData=function(e){return window.btoa(e)},e.prototype.decodeData=function(e){return window.atob(e)},e}();t.default=c},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),i=r(n(0)),s=r(n(2)),a=function(){function e(e){this.createRequest=e,this.actionMetadata={},this.hasReceivedDiffs=!1,this.merged=void 0,this.variables=null,this.variablesChangedHandlers=[],this.variantDebugInfo={},this.diffs=void 0,this.token="",this.variants=[]}return e.prototype.applyDiffs=function(e,t,n){this.diffs=e,this.variants=t,this.actionMetadata=n,this.hasReceivedDiffs=!0,this.merged=function e(t,n){if("number"==typeof n||"boolean"==typeof n||"string"==typeof n)return n;if(null==n)return t;var r=function(e){return function(t){if(e instanceof Array)for(var n=0;n<e.length;n++)t(e[n]);else for(var r in e)({}).hasOwnProperty.call(e,r)&&t(r)}},o=r(t),i=r(n),s=!1;if(null===t&&!(n instanceof Array))for(var a in s=null,n)if(n.hasOwnProperty(a)){if(null===s&&(s=!0),"string"!=typeof a){s=!1;break}if(a.length<3||"["!==a.charAt(0)||"]"!==a.charAt(a.length-1)){s=!1;break}}if(t instanceof Array||s){var u=[];return o((function(e){u.push(e)})),i((function(t){for(var r=parseInt(t.substring(1,t.length-1)),o=n[t];r>=u.length;)u.push(null);u[r]=e(u[r],o)})),u}var c={};return o((function(e){null!==n[e]&&void 0!==n[e]||(c[e]=t[e])})),i((function(r){c[r]=e(null===t?null:t[r]||{},n[r])})),c}(this.variables,e),this.saveDiffs(),this.onUpdate&&this.onUpdate()},e.prototype.loadDiffs=function(){try{this.applyDiffs(JSON.parse(this.loadLocal(i.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(this.loadLocal(i.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(this.loadLocal(i.default.DEFAULT_KEYS.ACTION_METADATA)||null)),this.token=this.loadLocal(i.default.DEFAULT_KEYS.TOKEN),this.variantDebugInfo=this.loadLocal(i.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(e){console.log("Leanplum: Invalid diffs: "+e)}},e.prototype.saveDiffs=function(){this.saveLocal(i.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(this.diffs||{})),this.saveLocal(i.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(this.variants||[])),this.saveLocal(i.default.DEFAULT_KEYS.ACTION_METADATA,JSON.stringify(this.actionMetadata||{})),this.saveLocal(i.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(this.variantDebugInfo||{})),this.saveLocal(i.default.DEFAULT_KEYS.TOKEN,this.token)},e.prototype.getVariable=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.getVariables();if(n)for(var r=0;r<e.length;r++)n=n[e[r]];return n},e.prototype.getVariables=function(){return void 0!==this.merged?this.merged:this.variables},e.prototype.setVariables=function(e){this.variables=e},e.prototype.addVariablesChangedHandler=function(e){this.variablesChangedHandlers.push(e),this.hasReceivedDiffs&&e()},e.prototype.removeVariablesChangedHandler=function(e){var t=this.variablesChangedHandlers.indexOf(e);t>=0&&this.variablesChangedHandlers.splice(t,1)},e.prototype.triggerVariablesChangedHandlers=function(){for(var e=0;e<this.variablesChangedHandlers.length;e++)this.variablesChangedHandlers[e]()},e.prototype.getVariantDebugInfo=function(){return this.variantDebugInfo},e.prototype.setVariantDebugInfo=function(e){this.variantDebugInfo=e},e.prototype.sendVariables=function(){var e,t=((e={})[i.default.PARAMS.VARIABLES]=this.variables,e),n=(new o.default).body(JSON.stringify(t));this.createRequest(i.default.METHODS.SET_VARS,n,{sendNow:!0})},e.prototype.clearUserContent=function(){this.diffs=void 0,this.variables=null,this.variants=[],this.variantDebugInfo={},this.merged=void 0},e.prototype.loadLocal=function(e){return s.default.getFromLocalStorage(e)},e.prototype.saveLocal=function(e,t){s.default.saveToLocalStorage(e,t)},e}();t.default=a}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,