!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=27)}([function(e,t,n){var r=n(18),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.4.0",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_METADATA:"actionMetadata",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_METADATA:"__leanplum_action_metadata",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)"}}},function(e,t,n){var r=n(46),o=n(52);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),i=function(){function e(){this.argString="",this.argValues={}}return e.prototype.add=function(e,t){return void 0===t?this:(this.argString&&(this.argString+="&"),this.argString+=e+"="+encodeURIComponent(t),this.argValues[e]=t,this)},e.prototype.body=function(e){return e?(this._body=e,this):this._body},e.prototype.attachApiKeys=function(e,t){return this.add(o.default.PARAMS.APP_ID,e).add(o.default.PARAMS.CLIENT,o.default.CLIENT).add(o.default.PARAMS.CLIENT_KEY,t)},e.prototype.build=function(){return this.argString},e.prototype.buildDict=function(){return this.argValues},e}();t.default=i},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0});var o={},i=function(){function e(){}return e.getFromLocalStorage=function(e){return!1===r?o[e]:localStorage[e]},e.saveToLocalStorage=function(e,t){if(!1!==r)try{localStorage[e]=t}catch(n){r=!1,o[e]=t}else o[e]=t},e.removeFromLocalStorage=function(e){if(!1!==r)try{localStorage.removeItem(e)}catch(t){r=!1,delete o[e]}else delete o[e]},e}();t.default=i},function(e,t,n){var r=n(36),o=n(37),i=n(38),a=n(39),s=n(40);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=a,u.prototype.set=s,e.exports=u},function(e,t,n){var r=n(16);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(12),o=n(48),i=n(49),a=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?o(e):i(e)}},function(e,t,n){var r=n(2)(Object,"create");e.exports=r},function(e,t,n){var r=n(61);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var r=n(2)(n(0),"Map");e.exports=r},function(e,t,n){var r=n(0).Symbol;e.exports=r},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.networkTimeoutSeconds=10,this.requestQueue=[],this.runningRequest=!1}return e.prototype.setNetworkTimeout=function(e){this.networkTimeoutSeconds=e},e.prototype.ajax=function(e,t,n,r,o,i,a){var s=this;if(i){if(this.runningRequest)return this.enqueueRequest(arguments);this.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===t.indexOf("https:")&&(t="http:"+t.substring(6)),this.ajaxIE8.call(this,arguments);var u=!1,c=new XMLHttpRequest;c.onreadystatechange=function(){if(4===c.readyState){if(u)return;var e;u=!0;var t=!1;if(a)e=c.responseText;else try{e=JSON.parse(c.responseText)}catch(e){setTimeout((function(){o&&o(null,c)}),0),t=!0}t||(c.status>=200&&c.status<300?setTimeout((function(){r&&r(e,c)}),0):setTimeout((function(){o&&o(e,c)}),0)),i&&(s.runningRequest=!1,s.dequeueRequest())}},c.open(e,t,!0),c.setRequestHeader("Content-Type","text/plain"),c.send(n),setTimeout((function(){u||c.abort()}),1e3*this.networkTimeoutSeconds)},e.prototype.ajaxIE8=function(e,t,n,r,o,i,a){var s=this,u=new XDomainRequest;u.onload=function(){var e,t=!1;if(a)e=u.responseText;else try{e=JSON.parse(u.responseText)}catch(e){setTimeout((function(){o&&o(null,u)}),0),t=!0}t||setTimeout((function(){r&&r(e,u)}),0),i&&(s.runningRequest=!1,s.dequeueRequest())},u.onerror=u.ontimeout=function(){setTimeout((function(){o&&o(null,u)}),0),i&&(s.runningRequest=!1,s.dequeueRequest())},u.onprogress=function(){},u.open(e,t),u.timeout=1e3*this.networkTimeoutSeconds,u.send(n)},e.prototype.enqueueRequest=function(e){this.requestQueue.push(e)},e.prototype.dequeueRequest=function(){var e=this.requestQueue.shift();e&&this.ajax.call(this,e)},e}();t.default=r},function(e,t,n){var r=n(33);e.exports=function(e,t){return r(e,t)}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(7),o=n(19);e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(47))},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(53),o=n(60),i=n(62),a=n(63),s=n(64);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=a,u.prototype.set=s,e.exports=u},function(e,t,n){var r=n(65),o=n(68),i=n(69);e.exports=function(e,t,n,a,s,u){var c=1&n,l=e.length,f=t.length;if(l!=f&&!(c&&f>l))return!1;var d=u.get(e);if(d&&u.get(t))return d==t;var p=-1,h=!0,v=2&n?new r:void 0;for(u.set(e,t),u.set(t,e);++p<l;){var S=e[p],_=t[p];if(a)var g=c?a(_,S,p,t,e,u):a(S,_,p,e,t,u);if(void 0!==g){if(g)continue;h=!1;break}if(v){if(!o(t,(function(e,t){if(!i(v,t)&&(S===e||s(S,e,n,a,u)))return v.push(t)}))){h=!1;break}}else if(S!==_&&!s(S,_,n,a,u)){h=!1;break}}return u.delete(e),u.delete(t),h}},function(e,t,n){(function(e){var r=n(0),o=n(86),i=t&&!t.nodeType&&t,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,s=a&&a.exports===i?r.Buffer:void 0,u=(s?s.isBuffer:void 0)||o;e.exports=u}).call(this,n(24)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(88),o=n(89),i=n(90),a=i&&i.isTypedArray,s=a?o(a):r;e.exports=s},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t,n){var r=n(28);e.exports=r.default},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(3)),a=o(n(29)),s=o(n(1)),u=o(n(30)),c=o(n(31)),l=o(n(32)),f=o(n(4)),d=o(n(102)),p=o(n(103)),h=new a.default(window),v=function(){function e(){}return e.setApiPath=function(t){e._lpRequest.apiPath&&(e._lpRequest.apiPath=t)},e.setEmail=function(t){e._email=t},e.setNetworkTimeout=function(t){e._lpRequest.setNetworkTimeout(t),e._lpSocket.setNetworkTimeout(t)},e.setVariantDebugInfoEnabled=function(t){e._internalState.variantDebugInfoEnabled=t},e.getVariantDebugInfo=function(){return e._varCache.getVariantDebugInfo()},e.setAppIdForDevelopmentMode=function(t,n){e._lpRequest.appId=t,e._lpRequest.clientKey=n,e._internalState.devMode=!0},e.setAppIdForProductionMode=function(t,n){e._lpRequest.appId=t,e._lpRequest.clientKey=n,e._internalState.devMode=!1},e.setSocketHost=function(t){e._lpSocket.setSocketHost(t)},e.setDeviceId=function(t){e._lpRequest.deviceId=t},e.setAppVersion=function(t){e._lpRequest.versionName=t},e.setDeviceName=function(t){e._deviceName=t},e.setDeviceModel=function(t){e._deviceModel=t},e.setRequestBatching=function(t,n){e._lpRequest.batchEnabled=t,e._lpRequest.batchCooldown=n},e.setSystemName=function(t){e._systemName=t},e.setSystemVersion=function(t){e._systemVersion=t},e.setVariables=function(t){e._varCache.setVariables(t)},e.getVariables=function(){return e._varCache.getVariables()},e.getVariable=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var r=e.getVariables(),o=0;o<t.length;o++)r=r[t[o]];return r},e.getVariants=function(){return e._varCache.variants||[]},e.addStartResponseHandler=function(t){e._internalState.addStartResponseHandler(t)},e.removeStartResponseHandler=function(t){e._internalState.removeStartResponseHandler(t)},e.__destroy=function(){e._lpRequest=new c.default,e._internalState=new u.default,e._lpSocket=new l.default,e._pushManager=new d.default(e.createRequest),e._varCache=new p.default(e.createRequest)},e.addVariablesChangedHandler=function(t){e._varCache.addVariablesChangedHandler(t)},e.removeVariablesChangedHandler=function(t){e._varCache.removeVariablesChangedHandler(t)},e.forceContentUpdate=function(t){var n=(new i.default).add(s.default.PARAMS.INCLUDE_DEFAULTS,!1).add(s.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,e._internalState.variantDebugInfoEnabled);e.createRequest(s.default.METHODS.GET_VARS,n,{queued:!1,sendNow:!0,response:function(n){var r=e._lpRequest.getLastResponse(n),o=e._lpRequest.isResponseSuccess(r);o&&(e._varCache.applyDiffs(r[s.default.KEYS.VARS],r[s.default.KEYS.VARIANTS],r[s.default.KEYS.ACTION_METADATA]),e._varCache.setVariantDebugInfo(r[s.default.KEYS.VARIANT_DEBUG_INFO])),t&&t(o)}})},e.start=function(t,n,r){"function"==typeof t?(r=t,n={},t=null):"object"==typeof t&&null!=t?(r=n,n=t,t=null):"function"==typeof n&&(r=n,n={}),e._lpRequest.userId=t,r&&e.addStartResponseHandler(r),e._varCache.onUpdate=function(){e._varCache.triggerVariablesChangedHandlers()};var o=(new i.default).add(s.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(n)).add(s.default.PARAMS.COUNTRY,s.default.VALUES.DETECT).add(s.default.PARAMS.REGION,s.default.VALUES.DETECT).add(s.default.PARAMS.CITY,s.default.VALUES.DETECT).add(s.default.PARAMS.LOCATION,s.default.VALUES.DETECT).add(s.default.PARAMS.SYSTEM_NAME,e._systemName||h.OS).add(s.default.PARAMS.SYSTEM_VERSION,(e._systemVersion||"").toString()).add(s.default.PARAMS.BROWSER_NAME,h.browser).add(s.default.PARAMS.BROWSER_VERSION,h.version.toString()).add(s.default.PARAMS.LOCALE,s.default.VALUES.DETECT).add(s.default.PARAMS.DEVICE_NAME,e._deviceName||h.browser+" "+h.version).add(s.default.PARAMS.DEVICE_MODEL,e._deviceModel||"Web Browser").add(s.default.PARAMS.INCLUDE_DEFAULTS,!1).add(s.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,e._internalState.variantDebugInfoEnabled);e.createRequest(s.default.METHODS.START,o,{queued:!0,sendNow:!0,response:function(t){e._internalState.hasStarted=!0;var n=e._lpRequest.getLastResponse(t);if(e._lpRequest.isResponseSuccess(n)){if(e._internalState.startSuccessful=!0,e._internalState.devMode){var r=n[s.default.KEYS.LATEST_VERSION];r&&console.log("A newer version of Leanplum, "+r+', is available.\nUse "npm update leanplum-sdk" or go to https://docs.leanplum.com/reference#javascript-setup to download it.'),e.connectSocket()}e._varCache.applyDiffs(n[s.default.KEYS.VARS],n[s.default.KEYS.VARIANTS],n[s.default.KEYS.ACTION_METADATA]),e._varCache.setVariantDebugInfo(n[s.default.KEYS.VARIANT_DEBUG_INFO]),e._varCache.token=n[s.default.KEYS.TOKEN]}else e._internalState.startSuccessful=!1,e._varCache.loadDiffs();e._internalState.triggerStartHandlers()}})},e.startFromCache=function(t,n,r){"function"==typeof t?(r=t,n={},t=null):"object"==typeof t&&null!=t?(r=n,n=t,t=null):"function"==typeof n&&(r=n,n={}),e._lpRequest.userId=t,r&&e.addStartResponseHandler(r),e._internalState.hasStarted=!0,e._internalState.startSuccessful=!0,e._internalState.devMode&&e.connectSocket(),e._varCache.loadDiffs(),e._internalState.triggerStartHandlers()},e.stop=function(){e.createRequest(s.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0})},e.pauseSession=function(){e.createRequest(s.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},e.resumeSession=function(){e.createRequest(s.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},e.pauseState=function(){e.createRequest(s.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},e.resumeState=function(){e.createRequest(s.default.METHODS.RESUME_STATE,void 0,{queued:!0})},e.setUserId=function(t){e.setUserAttributes(t)},e.setUserAttributes=function(t,n){if(void 0===n)if("object"==typeof t)n=t,t=void 0;else if("string"!=typeof t)return void console.log("Leanplum: setUserAttributes expects a string or an object");var r=(new i.default).add(s.default.PARAMS.USER_ATTRIBUTES,n?JSON.stringify(n):void 0).add(s.default.PARAMS.NEW_USER_ID,t);e.createRequest(s.default.METHODS.SET_USER_ATTRIBUTES,r,{queued:!0}),t&&(e._lpRequest.userId=t,f.default.saveToLocalStorage(s.default.DEFAULT_KEYS.USER_ID,e._lpRequest.userId))},e.track=function(t,n,r,o){"object"==typeof n&&null!=n?(o=n,r=void 0,n=void 0):"string"==typeof n?(o=r,r=n,n=void 0):"object"==typeof r&&null!=r&&(o=r,r=void 0);var a=(new i.default).add(s.default.PARAMS.EVENT,t).add(s.default.PARAMS.VALUE,n||0).add(s.default.PARAMS.INFO,r).add(s.default.PARAMS.PARAMS,JSON.stringify(o));e.createRequest(s.default.METHODS.TRACK,a,{queued:!0})},e.trackPurchase=function(t,n,r,o){void 0===o&&(o="Purchase");var i=r;n&&(i=Object.assign({},r,{currencyCode:n})),e.track(o,t,i)},e.advanceTo=function(t,n,r){"object"==typeof n&&null!=n&&(r=n,n=void 0);var o=(new i.default).add(s.default.PARAMS.STATE,t).add(s.default.PARAMS.INFO,n).add(s.default.PARAMS.PARAMS,JSON.stringify(r));e.createRequest(s.default.METHODS.ADVANCE,o,{queued:!0})},e.isWebPushSupported=function(){return e._pushManager.isWebPushSupported()},e.isWebPushSubscribed=function(){return e._pushManager.isWebPushSubscribed()},e.registerForWebPush=function(t){return e._pushManager.isWebPushSupported()?e._pushManager.register(t,(function(t){return t?Promise.resolve(!0):e._pushManager.subscribeUser()})):Promise.reject("Leanplum: WebPush is not supported.")},e.unregisterFromWebPush=function(){return e._pushManager.unsubscribeUser()},e.clearUserContent=function(){e._varCache.clearUserContent()},e.createRequest=function(t,n,o){void 0===o&&(o={}),e._lpRequest.request(t,n,r({devMode:e._internalState.devMode},o))},e.connectSocket=function(){e._lpSocket.connect(e._varCache,{appId:e._lpRequest.appId,deviceId:e._lpRequest.deviceId},e.createRequest,e._lpRequest.getLastResponse)},e._internalState=new u.default,e._lpRequest=new c.default,e._lpSocket=new l.default,e._pushManager=new d.default(e.createRequest),e._varCache=new p.default(e.createRequest),e}();t.default=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.browser=this.searchString(this.getBrowserData(e))||"Unknown Browser",this.version=this.searchVersion(e.navigator.userAgent)||this.searchVersion(e.navigator.appVersion)||"Unknown Version",this.OS=this.searchString(this.getOSData(e))||"Unknown OS"}return e.prototype.searchString=function(e){for(var t=0;t<e.length;t++){var n=e[t].string,r=e[t].prop;if(this.versionSearchString=e[t].versionSearch||e[t].identity,n){if(-1!==n.indexOf(e[t].subString))return e[t].identity}else if(r)return e[t].identity}},e.prototype.searchVersion=function(e){if(e){var t=e.indexOf(this.versionSearchString);if(-1!==t)return parseFloat(e.substring(t+this.versionSearchString.length+1))}},e.prototype.getBrowserData=function(e){return[{string:e.navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:e.navigator.userAgent,subString:"OmniWeb",identity:"OmniWeb",versionSearch:"OmniWeb/"},{string:e.navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:e.opera,identity:"Opera",versionSearch:"Version"},{string:e.navigator.vendor,subString:"iCab",identity:"iCab"},{string:e.navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:e.navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:e.navigator.vendor,subString:"Camino",identity:"Camino"},{string:e.navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:e.navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:e.navigator.userAgent,subString:"Android",identity:"Android Browser",versionSearch:"Version"},{string:e.navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:e.navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}]},e.prototype.getOSData=function(e){return[{string:e.navigator.platform,subString:"Win",identity:"Windows"},{string:e.navigator.platform,subString:"Mac",identity:"Mac OS"},{string:e.navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:e.navigator.userAgent,subString:"Android",identity:"Android"},{string:e.navigator.platform,subString:"Linux",identity:"Linux"}]},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.startHandlers=[],this.devMode=!1,this.hasStarted=!1,this.startSuccessful=!1,this.variantDebugInfoEnabled=!1}return e.prototype.addStartResponseHandler=function(e){this.startHandlers.push(e),this.hasStarted&&e(this.startSuccessful)},e.prototype.removeStartResponseHandler=function(e){var t=this.startHandlers.indexOf(e);t>=0&&this.startHandlers.splice(t,1)},e.prototype.triggerStartHandlers=function(){for(var e=0;e<this.startHandlers.length;e++)this.startHandlers[e](this.startSuccessful)},e}();t.default=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(3)),i=r(n(1)),a=r(n(4)),s=r(n(14)),u=function(){function e(){this.cooldownTimeout=null,this.lastRequestTime=void 0,this.network=new s.default,this.apiPath="https://www.leanplum.com/api",this.batchCooldown=5,this.batchEnabled=!0}return e.prototype.request=function(e,t,n){var r=this;if(void 0===n&&(n={}),n=n||{},t=t||new o.default,this.deviceId||(this.deviceId=this.loadLocal(i.default.DEFAULT_KEYS.DEVICE_ID)),!this.deviceId){for(var a="",s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",u=0;u<16;u++)a+=s.charAt(Math.floor(Math.random()*s.length));this.deviceId=a,this.saveLocal(i.default.DEFAULT_KEYS.DEVICE_ID,a)}this.userId||(this.userId=this.loadLocal(i.default.DEFAULT_KEYS.USER_ID),this.userId||(this.userId=this.deviceId)),this.saveLocal(i.default.DEFAULT_KEYS.USER_ID,this.userId);var c=t.attachApiKeys(this.appId,this.clientKey).add(i.default.PARAMS.SDK_VERSION,i.default.SDK_VERSION).add(i.default.PARAMS.DEVICE_ID,this.deviceId).add(i.default.PARAMS.USER_ID,this.userId).add(i.default.PARAMS.ACTION,e).add(i.default.PARAMS.VERSION_NAME,this.versionName).add(i.default.PARAMS.DEV_MODE,n.devMode).add(i.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),l=n.success||n.response,f=n.error||n.response;if(!this.appId||!this.clientKey){var d="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(d),void(f&&f(d))}if(t.body())this.network.ajax("POST",this.apiPath+"?"+c.build(),t.body(),l,f,n.queued);else{var p=n.devMode||n.sendNow||!this.batchEnabled,h=function(){var e=r.popUnsentRequests();if(e.length>0){var t=JSON.stringify({data:e}),a=(new o.default).attachApiKeys(r.appId,r.clientKey).add(i.default.PARAMS.SDK_VERSION,i.default.SDK_VERSION).add(i.default.PARAMS.ACTION,i.default.METHODS.MULTI).add(i.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();r.network.ajax("POST",r.apiPath+"?"+a,t,l,f,n.queued)}};if(!p&&this.batchCooldown){var v=(new Date).getTime()/1e3;!this.lastRequestTime||v-this.lastRequestTime>=this.batchCooldown?(p=!0,this.lastRequestTime=v):this.cooldownTimeout||(this.cooldownTimeout=setTimeout((function(){r.cooldownTimeout=null,r.lastRequestTime=(new Date).getTime()/1e3,h()}),1e3*(this.batchCooldown-(v-this.lastRequestTime))))}this.saveRequestForLater(c.buildDict()),p&&h()}},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e.prototype.getLastResponse=function(e){var t,n,r,o,i,a=null!=(r=null===(n=null===(t=e)||void 0===t?void 0:t.response)||void 0===n?void 0:n.length)?r:0;return a>0?null===(i=null===(o=e)||void 0===o?void 0:o.response)||void 0===i?void 0:i[a-1]:null},e.prototype.isResponseSuccess=function(e){var t;return Boolean(null===(t=e)||void 0===t?void 0:t.success)},e.prototype.saveRequestForLater=function(e){var t=this.loadLocal(i.default.DEFAULT_KEYS.COUNT)||0,n=i.default.DEFAULT_KEYS.ITEM+t;this.saveLocal(n,JSON.stringify(e)),t++,this.saveLocal(i.default.DEFAULT_KEYS.COUNT,t)},e.prototype.popUnsentRequests=function(){var e=[],t=this.loadLocal(i.default.DEFAULT_KEYS.COUNT)||0;this.removeLocal(i.default.DEFAULT_KEYS.COUNT);for(var n=0;n<t;n++){var r=i.default.DEFAULT_KEYS.ITEM+n;try{e.push(JSON.parse(this.loadLocal(r)))}catch(e){}this.removeLocal(r)}return e},e.prototype.loadLocal=function(e){return a.default.getFromLocalStorage(e)},e.prototype.saveLocal=function(e,t){a.default.saveToLocalStorage(e,t)},e.prototype.removeLocal=function(e){a.default.removeFromLocalStorage(e)},e}();t.default=u},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(15)),i=r(n(3)),a=r(n(1)),s=r(n(101)),u=function(){function e(){this.networkTimeoutSeconds=10,this.socketClient=null,this.socketHost="dev.leanplum.com"}return e.prototype.connect=function(e,t,n,r){var u=this;if(WebSocket){var c=!1;this.socketClient=new s.default,this.socketClient.setNetworkTimeout(this.networkTimeoutSeconds),this.socketClient.onopen=function(){var e;c||(console.log("Leanplum: Connected to development server."),u.socketClient.send("auth",((e={})[a.default.PARAMS.APP_ID]=t.appId,e[a.default.PARAMS.DEVICE_ID]=t.deviceId,e)),c=!0)},this.socketClient.onerror=function(e){console.log("Leanplum: Socket error",e)},this.socketClient.onmessage=function(t,s){if("updateVars"===t){var c=(new i.default).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1);n(a.default.METHODS.GET_VARS,c,{queued:!1,sendNow:!0,response:function(t){var n=r(t),i=n[a.default.KEYS.VARS],s=n[a.default.KEYS.VARIANTS],u=n[a.default.KEYS.ACTION_METADATA];o.default(i,e.diffs)||e.applyDiffs(i,s,u)}})}else"getVariables"===t?(e.sendVariables(),u.socketClient.send("getContentResponse",{updated:!0})):"getActions"===t?u.socketClient.send("getContentResponse",{updated:!1}):"registerDevice"===t&&alert("Your device has been registered to "+s[0].email+".")},this.socketClient.onclose=function(){console.log("Leanplum: Disconnected to development server."),c=!1},this.socketClient.connect(this.socketHost),setInterval((function(){u.socketClient.connected||u.socketClient.connecting||u.socketClient.connect(u.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},e.prototype.setSocketHost=function(e){this.socketHost=e},e.prototype.setNetworkTimeout=function(e){var t;this.networkTimeoutSeconds=e,null===(t=this.socketClient)||void 0===t||t.setNetworkTimeout(e)},e}();t.default=u},function(e,t,n){var r=n(34),o=n(10);e.exports=function e(t,n,i,a,s){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,i,a,e,s))}},function(e,t,n){var r=n(35),o=n(22),i=n(70),a=n(74),s=n(96),u=n(13),c=n(23),l=n(25),f="[object Object]",d=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,p,h,v){var S=u(e),_=u(t),g=S?"[object Array]":s(e),b=_?"[object Array]":s(t),y=(g="[object Arguments]"==g?f:g)==f,A=(b="[object Arguments]"==b?f:b)==f,E=g==b;if(E&&c(e)){if(!c(t))return!1;S=!0,y=!1}if(E&&!y)return v||(v=new r),S||l(e)?o(e,t,n,p,h,v):i(e,t,g,n,p,h,v);if(!(1&n)){var T=y&&d.call(e,"__wrapped__"),R=A&&d.call(t,"__wrapped__");if(T||R){var I=T?e.value():e,m=R?t.value():t;return v||(v=new r),h(I,m,n,p,v)}}return!!E&&(v||(v=new r),a(e,t,n,p,h,v))}},function(e,t,n){var r=n(5),o=n(41),i=n(42),a=n(43),s=n(44),u=n(45);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=o,c.prototype.delete=i,c.prototype.get=a,c.prototype.has=s,c.prototype.set=u,e.exports=c},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(6),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(6);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(6);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(6);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(5);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(5),o=n(11),i=n(21);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!o||a.length<199)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(a)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(17),o=n(50),i=n(19),a=n(20),s=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,l=u.toString,f=c.hasOwnProperty,d=RegExp("^"+l.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?d:s).test(a(e))}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(12),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(t?e[s]=n:delete e[s]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r,o=n(51),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!i&&i in e}},function(e,t,n){var r=n(0)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(54),o=n(5),i=n(11);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(e,t,n){var r=n(55),o=n(56),i=n(57),a=n(58),s=n(59);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=a,u.prototype.set=s,e.exports=u},function(e,t,n){var r=n(8);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(8),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(8),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(8);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t,n){var r=n(9);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(9);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(9);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(9);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(21),o=n(66),i=n(67);function a(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}a.prototype.add=a.prototype.push=o,a.prototype.has=i,e.exports=a},function(e,t){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t,n){var r=n(12),o=n(71),i=n(16),a=n(22),s=n(72),u=n(73),c=r?r.prototype:void 0,l=c?c.valueOf:void 0;e.exports=function(e,t,n,r,c,f,d){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!f(new o(e),new o(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=s;case"[object Set]":var h=1&r;if(p||(p=u),e.size!=t.size&&!h)return!1;var v=d.get(e);if(v)return v==t;r|=2,d.set(e,t);var S=a(p(e),p(t),r,c,f,d);return d.delete(e),S;case"[object Symbol]":if(l)return l.call(e)==l.call(t)}return!1}},function(e,t,n){var r=n(0).Uint8Array;e.exports=r},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t,n){var r=n(75),o=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,i,a,s){var u=1&n,c=r(e),l=c.length;if(l!=r(t).length&&!u)return!1;for(var f=l;f--;){var d=c[f];if(!(u?d in t:o.call(t,d)))return!1}var p=s.get(e);if(p&&s.get(t))return p==t;var h=!0;s.set(e,t),s.set(t,e);for(var v=u;++f<l;){var S=e[d=c[f]],_=t[d];if(i)var g=u?i(_,S,d,t,e,s):i(S,_,d,e,t,s);if(!(void 0===g?S===_||a(S,_,n,i,s):g)){h=!1;break}v||(v="constructor"==d)}if(h&&!v){var b=e.constructor,y=t.constructor;b!=y&&"constructor"in e&&"constructor"in t&&!("function"==typeof b&&b instanceof b&&"function"==typeof y&&y instanceof y)&&(h=!1)}return s.delete(e),s.delete(t),h}},function(e,t,n){var r=n(76),o=n(78),i=n(81);e.exports=function(e){return r(e,i,o)}},function(e,t,n){var r=n(77),o=n(13);e.exports=function(e,t,n){var i=t(e);return o(e)?i:r(i,n(e))}},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t,n){var r=n(79),o=n(80),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(e){return null==e?[]:(e=Object(e),r(a(e),(function(t){return i.call(e,t)})))}:o;e.exports=s},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(82),o=n(91),i=n(95);e.exports=function(e){return i(e)?r(e):o(e)}},function(e,t,n){var r=n(83),o=n(84),i=n(13),a=n(23),s=n(87),u=n(25),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),l=!n&&o(e),f=!n&&!l&&a(e),d=!n&&!l&&!f&&u(e),p=n||l||f||d,h=p?r(e.length,String):[],v=h.length;for(var S in e)!t&&!c.call(e,S)||p&&("length"==S||f&&("offset"==S||"parent"==S)||d&&("buffer"==S||"byteLength"==S||"byteOffset"==S)||s(S,v))||h.push(S);return h}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(85),o=n(10),i=Object.prototype,a=i.hasOwnProperty,s=i.propertyIsEnumerable,u=r(function(){return arguments}())?r:function(e){return o(e)&&a.call(e,"callee")&&!s.call(e,"callee")};e.exports=u},function(e,t,n){var r=n(7),o=n(10);e.exports=function(e){return o(e)&&"[object Arguments]"==r(e)}},function(e,t){e.exports=function(){return!1}},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(7),o=n(26),i=n(10),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!a[r(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(18),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o&&r.process,s=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=s}).call(this,n(24)(e))},function(e,t,n){var r=n(92),o=n(93),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(94)(Object.keys,Object);e.exports=r},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(17),o=n(26);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(97),o=n(11),i=n(98),a=n(99),s=n(100),u=n(7),c=n(20),l=c(r),f=c(o),d=c(i),p=c(a),h=c(s),v=u;(r&&"[object DataView]"!=v(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=v(new o)||i&&"[object Promise]"!=v(i.resolve())||a&&"[object Set]"!=v(new a)||s&&"[object WeakMap]"!=v(new s))&&(v=function(e){var t=u(e),n="[object Object]"==t?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case l:return"[object DataView]";case f:return"[object Map]";case d:return"[object Promise]";case p:return"[object Set]";case h:return"[object WeakMap]"}return t}),e.exports=v},function(e,t,n){var r=n(2)(n(0),"DataView");e.exports=r},function(e,t,n){var r=n(2)(n(0),"Promise");e.exports=r},function(e,t,n){var r=n(2)(n(0),"Set");e.exports=r},function(e,t,n){var r=n(2)(n(0),"WeakMap");e.exports=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(14)),i=function(){function e(){this.network=new o.default,this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return e.prototype.connect=function(e){var t=this;t.connecting=!0,this.network.ajax("POST","https://"+e+"/socket.io/1","",(function(n){var r=n.split(":"),o=r[0],i=parseInt(r[1])/2*1e3;t.socket=new WebSocket("wss://"+e+"/socket.io/1/websocket/"+o);var a=null;t.socket.onopen=function(){t.connected=!0,t.connecting=!1,t.onopen&&t.onopen(),a=setInterval((function(){t.socket.send("2:::")}),i)},t.socket.onclose=function(){t.connected=!1,clearInterval(a),t.onclose&&t.onclose()},t.socket.onmessage=function(e){var n=e.data.split(":"),r=parseInt(n[0]);if(2===r)t.socket.send("2::");else if(5===r){var o=n[1],i=JSON.parse(n.slice(3).join(":")),a=i.name,s=i.args;o&&t.socket.send("6:::"+o),t.onmessage&&t.onmessage(a,s)}else 7===r&&console.log("Socket error: "+e.data)},t.socket.onerror=function(e){t.socket.close(),t.onerror&&t.onerror(e)}}),null,!1,!0)},e.prototype.send=function(e,t){if(this.connected){var n=JSON.stringify({name:e,args:t});this.socket.send("5:::"+n)}else console.log("Leanplum: Socket is not connected.")},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e}();t.default=i},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(15)),s=i(n(3)),u=i(n(1)),c=i(n(4)),l=function(){function e(e){this.createRequest=e,this.serviceWorkerRegistration=null}return Object.defineProperty(e.prototype,"serviceWorker",{get:function(){return window.navigator.serviceWorker},enumerable:!0,configurable:!0}),e.prototype.isWebPushSupported=function(){var e;return Boolean(void 0!==(null===(e=window)||void 0===e?void 0:e.navigator)&&"serviceWorker"in window.navigator&&"PushManager"in window)},e.prototype.isWebPushSubscribed=function(){return r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:return this.isWebPushSupported()?[4,this.getServiceWorkerRegistration()]:[2,!1];case 1:return(e=r.sent())?[4,e.pushManager.getSubscription()]:[2,!1];case 2:return t=r.sent(),(n=null!==t)&&this.updateNewSubscriptionOnServer(t),[2,n]}}))}))},e.prototype.register=function(e,t){return r(this,void 0,void 0,(function(){var n,r,i,a;return o(this,(function(o){switch(o.label){case 0:if(!this.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),[2,t(!1)];o.label=1;case 1:return o.trys.push([1,3,,4]),n=this,[4,this.serviceWorker.register(e||"/sw.min.js",null)];case 2:return n.serviceWorkerRegistration=o.sent(),r=this.serviceWorkerRegistration.pushManager.getSubscription(),(i=null!==r)&&this.updateNewSubscriptionOnServer(r),[2,t(i)];case 3:return a=o.sent(),console.log("Leanplum: Service Worker Error: ",a),[2,t(!1)];case 4:return[2]}}))}))},e.prototype.subscribeUser=function(){return r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:e=this.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68"),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this.serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})];case 2:if(!(t=r.sent()))throw new Error;return this.updateNewSubscriptionOnServer(t),[3,4];case 3:throw n=r.sent(),new Error("Leanplum: Failed to subscribe the user: "+n);case 4:return[2,!0]}}))}))},e.prototype.unsubscribeUser=function(){return r(this,void 0,void 0,(function(){var e,t;return o(this,(function(n){switch(n.label){case 0:return[4,this.isWebPushSubscribed()];case 1:if(!n.sent())return[3,6];n.label=2;case 2:return n.trys.push([2,5,,6]),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:if(!(e=n.sent()))throw new Error;return[4,e.unsubscribe()];case 4:return n.sent(),[3,6];case 5:throw t=n.sent(),new Error("Leanplum: Error unsubscribing: "+t);case 6:return[2]}}))}))},e.prototype.getServiceWorkerRegistration=function(){return r(this,void 0,void 0,(function(){var e;return o(this,(function(t){switch(t.label){case 0:return this.serviceWorkerRegistration?[3,2]:(e=this,[4,this.serviceWorker.getRegistration()]);case 1:e.serviceWorkerRegistration=t.sent(),t.label=2;case 2:return[2,this.serviceWorkerRegistration]}}))}))},e.prototype.urlB64ToUint8Array=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),n=this.decodeData(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r[o]=n.charCodeAt(o);return r},e.prototype.prepareSubscription=function(e){var t=Function.prototype.apply,n=e.getKey?e.getKey("p256dh"):"",r=e.getKey?e.getKey("auth"):"",o=this.encodeData(t.call(String.fromCharCode,null,new Uint8Array(n))),i=this.encodeData(t.call(String.fromCharCode,null,new Uint8Array(r)));return{endpoint:e.endpoint,key:o,auth:i}},e.prototype.updateNewSubscriptionOnServer=function(e){if(e){var t=this.prepareSubscription(e),n=JSON.stringify(t),r=c.default.getFromLocalStorage(u.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION);a.default(r,n)||(c.default.saveToLocalStorage(u.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,n),this.setSubscription(n))}},e.prototype.setSubscription=function(e){if(e){var t=(new s.default).add(u.default.PARAMS.WEB_PUSH_SUBSCRIPTION,e);this.createRequest(u.default.METHODS.SET_DEVICE_ATTRIBUTES,t,{queued:!1,sendNow:!0})}},e.prototype.encodeData=function(e){return window.btoa(e)},e.prototype.decodeData=function(e){return window.atob(e)},e}();t.default=l},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(3)),i=r(n(1)),a=r(n(4)),s=function(){function e(e){this.createRequest=e,this.actionMetadata={},this.hasReceivedDiffs=!1,this.merged=void 0,this.variables=null,this.variablesChangedHandlers=[],this.variantDebugInfo={},this.diffs=void 0,this.token="",this.variants=[]}return e.prototype.applyDiffs=function(e,t,n){this.diffs=e,this.variants=t,this.actionMetadata=n,this.hasReceivedDiffs=!0,this.merged=function e(t,n){if("number"==typeof n||"boolean"==typeof n||"string"==typeof n)return n;if(null==n)return t;var r=function(e){return function(t){if(e instanceof Array)for(var n=0;n<e.length;n++)t(e[n]);else for(var r in e)({}).hasOwnProperty.call(e,r)&&t(r)}},o=r(t),i=r(n),a=!1;if(null===t&&!(n instanceof Array))for(var s in a=null,n)if(n.hasOwnProperty(s)){if(null===a&&(a=!0),"string"!=typeof s){a=!1;break}if(s.length<3||"["!==s.charAt(0)||"]"!==s.charAt(s.length-1)){a=!1;break}}if(t instanceof Array||a){var u=[];return o((function(e){u.push(e)})),i((function(t){for(var r=parseInt(t.substring(1,t.length-1)),o=n[t];r>=u.length;)u.push(null);u[r]=e(u[r],o)})),u}var c={};return o((function(e){null!==n[e]&&void 0!==n[e]||(c[e]=t[e])})),i((function(r){c[r]=e(null===t?null:t[r]||{},n[r])})),c}(this.variables,e),this.saveDiffs(),this.onUpdate&&this.onUpdate()},e.prototype.loadDiffs=function(){try{this.applyDiffs(JSON.parse(this.loadLocal(i.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(this.loadLocal(i.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(this.loadLocal(i.default.DEFAULT_KEYS.ACTION_METADATA)||null)),this.token=this.loadLocal(i.default.DEFAULT_KEYS.TOKEN),this.variantDebugInfo=this.loadLocal(i.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(e){console.log("Leanplum: Invalid diffs: "+e)}},e.prototype.saveDiffs=function(){this.saveLocal(i.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(this.diffs||{})),this.saveLocal(i.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(this.variants||[])),this.saveLocal(i.default.DEFAULT_KEYS.ACTION_METADATA,JSON.stringify(this.actionMetadata||{})),this.saveLocal(i.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(this.variantDebugInfo||{})),this.saveLocal(i.default.DEFAULT_KEYS.TOKEN,this.token)},e.prototype.getVariables=function(){return void 0!==this.merged?this.merged:this.variables},e.prototype.setVariables=function(e){this.variables=e},e.prototype.addVariablesChangedHandler=function(e){this.variablesChangedHandlers.push(e),this.hasReceivedDiffs&&e()},e.prototype.removeVariablesChangedHandler=function(e){var t=this.variablesChangedHandlers.indexOf(e);t>=0&&this.variablesChangedHandlers.splice(t,1)},e.prototype.triggerVariablesChangedHandlers=function(){for(var e=0;e<this.variablesChangedHandlers.length;e++)this.variablesChangedHandlers[e]()},e.prototype.getVariantDebugInfo=function(){return this.variantDebugInfo},e.prototype.setVariantDebugInfo=function(e){this.variantDebugInfo=e},e.prototype.sendVariables=function(){var e,t=((e={})[i.default.PARAMS.VARIABLES]=this.variables,e),n=(new o.default).body(JSON.stringify(t));this.createRequest(i.default.METHODS.SET_VARS,n,{sendNow:!0})},e.prototype.clearUserContent=function(){this.diffs=void 0,this.variables=null,this.variants=[],this.variantDebugInfo={},this.merged=void 0},e.prototype.loadLocal=function(e){return a.default.getFromLocalStorage(e)},e.prototype.saveLocal=function(e,t){a.default.saveToLocalStorage(e,t)},e}();t.default=s}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,