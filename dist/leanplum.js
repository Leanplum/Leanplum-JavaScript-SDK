!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=27)}([function(e,t,n){var r=n(18),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();e.exports=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.4.0",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_METADATA:"actionMetadata",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_METADATA:"__leanplum_action_metadata",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)"}}},function(e,t,n){var r=n(46),o=n(52);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=function(){function e(){this.argString="",this.argValues={}}return e.prototype.add=function(e,t){return void 0===t?this:(this.argString&&(this.argString+="&"),this.argString+=e+"="+encodeURIComponent(t),this.argValues[e]=t,this)},e.prototype.body=function(e){return e?(this._body=e,this):this._body},e.prototype.attachApiKeys=function(e,t){return this.add(o.default.PARAMS.APP_ID,e).add(o.default.PARAMS.CLIENT,o.default.CLIENT).add(o.default.PARAMS.CLIENT_KEY,t)},e.prototype.build=function(){return this.argString},e.prototype.buildDict=function(){return this.argValues},e}();t.default=a},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0});var o={},a=function(){function e(){}return e.getFromLocalStorage=function(e){return!1===r?o[e]:localStorage[e]},e.saveToLocalStorage=function(e,t){if(!1!==r)try{localStorage[e]=t}catch(n){r=!1,o[e]=t}else o[e]=t},e.removeFromLocalStorage=function(e){if(!1!==r)try{localStorage.removeItem(e)}catch(t){r=!1,delete o[e]}else delete o[e]},e}();t.default=a},function(e,t,n){var r=n(36),o=n(37),a=n(38),i=n(39),s=n(40);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=s,e.exports=u},function(e,t,n){var r=n(16);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(12),o=n(48),a=n(49),i=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?o(e):a(e)}},function(e,t,n){var r=n(2)(Object,"create");e.exports=r},function(e,t,n){var r=n(61);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var r=n(2)(n(0),"Map");e.exports=r},function(e,t,n){var r=n(0).Symbol;e.exports=r},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Function.prototype.apply,o=[],a=10,i=function(){function e(){}return e.setNetworkTimeout=function(e){a=e},e.ajax=function(t,n,o,i,s,u,c){if(u){if(e.runningRequest)return e.enqueueRequest(arguments);e.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===n.indexOf("https:")&&(n="http:"+n.substring(6)),r.call(e.ajaxIE8,null,arguments);var l=!1,f=new XMLHttpRequest;f.onreadystatechange=function(){if(4===f.readyState){if(l)return;var t;l=!0;var n=!1;if(c)t=f.responseText;else try{t=JSON.parse(f.responseText)}catch(e){setTimeout((function(){s&&s(null,f)}),0),n=!0}n||(f.status>=200&&f.status<300?setTimeout((function(){i&&i(t,f)}),0):setTimeout((function(){s&&s(t,f)}),0)),u&&(e.runningRequest=!1,e.dequeueRequest())}},f.open(t,n,!0),f.setRequestHeader("Content-Type","text/plain"),f.send(o),setTimeout((function(){l||f.abort()}),1e3*a)},e.ajaxIE8=function(t,n,r,o,i,s,u){var c=new XDomainRequest;c.onload=function(){var t,n=!1;if(u)t=c.responseText;else try{t=JSON.parse(c.responseText)}catch(e){setTimeout((function(){i&&i(null,c)}),0),n=!0}n||setTimeout((function(){o&&o(t,c)}),0),s&&(e.runningRequest=!1,e.dequeueRequest())},c.onerror=c.ontimeout=function(){setTimeout((function(){i&&i(null,c)}),0),s&&(e.runningRequest=!1,e.dequeueRequest())},c.onprogress=function(){},c.open(t,n),c.timeout=1e3*a,c.send(r)},e.enqueueRequest=function(e){o.push(e)},e.dequeueRequest=function(){var t=o.shift();t&&r.call(e.ajax,null,t)},e.runningRequest=!1,e}();t.default=i},function(e,t,n){var r=n(33);e.exports=function(e,t){return r(e,t)}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(7),o=n(19);e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(47))},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(53),o=n(60),a=n(62),i=n(63),s=n(64);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=s,e.exports=u},function(e,t,n){var r=n(65),o=n(68),a=n(69);e.exports=function(e,t,n,i,s,u){var c=1&n,l=e.length,f=t.length;if(l!=f&&!(c&&f>l))return!1;var d=u.get(e);if(d&&u.get(t))return d==t;var p=-1,v=!0,h=2&n?new r:void 0;for(u.set(e,t),u.set(t,e);++p<l;){var S=e[p],_=t[p];if(i)var g=c?i(_,S,p,t,e,u):i(S,_,p,e,t,u);if(void 0!==g){if(g)continue;v=!1;break}if(h){if(!o(t,(function(e,t){if(!a(h,t)&&(S===e||s(S,e,n,i,u)))return h.push(t)}))){v=!1;break}}else if(S!==_&&!s(S,_,n,i,u)){v=!1;break}}return u.delete(e),u.delete(t),v}},function(e,t,n){(function(e){var r=n(0),o=n(86),a=t&&!t.nodeType&&t,i=a&&"object"==typeof e&&e&&!e.nodeType&&e,s=i&&i.exports===a?r.Buffer:void 0,u=(s?s.isBuffer:void 0)||o;e.exports=u}).call(this,n(24)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(88),o=n(89),a=n(90),i=a&&a.isTypedArray,s=i?o(i):r;e.exports=s},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t,n){var r=n(28);e.exports=r.default},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(3)),i=o(n(29)),s=o(n(1)),u=o(n(30)),c=o(n(31)),l=o(n(32)),f=o(n(4)),d=o(n(102)),p=o(n(103)),v=new i.default(window),h=function(){function e(){}return e.setApiPath=function(t){e._lpRequest.apiPath&&(e._lpRequest.apiPath=t)},e.setEmail=function(t){e._email=t},e.setNetworkTimeout=function(t){e._lpRequest.setNetworkTimeout(t)},e.setVariantDebugInfoEnabled=function(t){e._internalState.variantDebugInfoEnabled=t},e.getVariantDebugInfo=function(){return e._varCache.getVariantDebugInfo()},e.setAppIdForDevelopmentMode=function(t,n){e._lpRequest.appId=t,e._lpRequest.clientKey=n,e._internalState.devMode=!0},e.setAppIdForProductionMode=function(t,n){e._lpRequest.appId=t,e._lpRequest.clientKey=n,e._internalState.devMode=!1},e.setSocketHost=function(t){e._lpSocket.setSocketHost(t)},e.setDeviceId=function(t){e._lpRequest.deviceId=t},e.setAppVersion=function(t){e._lpRequest.versionName=t},e.setDeviceName=function(t){e._deviceName=t},e.setDeviceModel=function(t){e._deviceModel=t},e.setRequestBatching=function(t,n){e._lpRequest.batchEnabled=t,e._lpRequest.batchCooldown=n},e.setSystemName=function(t){e._systemName=t},e.setSystemVersion=function(t){e._systemVersion=t},e.setVariables=function(t){e._varCache.setVariables(t)},e.getVariables=function(){return e._varCache.getVariables()},e.getVariable=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var r=e.getVariables(),o=0;o<t.length;o++)r=r[t[o]];return r},e.getVariants=function(){return e._varCache.variants||[]},e.addStartResponseHandler=function(t){e._internalState.addStartResponseHandler(t)},e.removeStartResponseHandler=function(t){e._internalState.removeStartResponseHandler(t)},e.__destroy=function(){e._lpRequest=new c.default,e._internalState=new u.default,e._lpSocket=new l.default,e._pushManager=new d.default(e.createRequest),e._varCache=new p.default(e.createRequest)},e.addVariablesChangedHandler=function(t){e._varCache.addVariablesChangedHandler(t)},e.removeVariablesChangedHandler=function(t){e._varCache.removeVariablesChangedHandler(t)},e.forceContentUpdate=function(t){var n=(new a.default).add(s.default.PARAMS.INCLUDE_DEFAULTS,!1).add(s.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,e._internalState.variantDebugInfoEnabled);e.createRequest(s.default.METHODS.GET_VARS,n,{queued:!1,sendNow:!0,response:function(n){var r=e._lpRequest.getLastResponse(n),o=e._lpRequest.isResponseSuccess(r);o&&(e._varCache.applyDiffs(r[s.default.KEYS.VARS],r[s.default.KEYS.VARIANTS],r[s.default.KEYS.ACTION_METADATA]),e._varCache.setVariantDebugInfo(r[s.default.KEYS.VARIANT_DEBUG_INFO])),t&&t(o)}})},e.start=function(t,n,r){"function"==typeof t?(r=t,n={},t=null):"object"==typeof t&&null!=t?(r=n,n=t,t=null):"function"==typeof n&&(r=n,n={}),e._lpRequest.userId=t,r&&e.addStartResponseHandler(r),e._varCache.onUpdate=function(){e._varCache.triggerVariablesChangedHandlers()};var o=(new a.default).add(s.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(n)).add(s.default.PARAMS.COUNTRY,s.default.VALUES.DETECT).add(s.default.PARAMS.REGION,s.default.VALUES.DETECT).add(s.default.PARAMS.CITY,s.default.VALUES.DETECT).add(s.default.PARAMS.LOCATION,s.default.VALUES.DETECT).add(s.default.PARAMS.SYSTEM_NAME,e._systemName||v.OS).add(s.default.PARAMS.SYSTEM_VERSION,(e._systemVersion||"").toString()).add(s.default.PARAMS.BROWSER_NAME,v.browser).add(s.default.PARAMS.BROWSER_VERSION,v.version.toString()).add(s.default.PARAMS.LOCALE,s.default.VALUES.DETECT).add(s.default.PARAMS.DEVICE_NAME,e._deviceName||v.browser+" "+v.version).add(s.default.PARAMS.DEVICE_MODEL,e._deviceModel||"Web Browser").add(s.default.PARAMS.INCLUDE_DEFAULTS,!1).add(s.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,e._internalState.variantDebugInfoEnabled);e.createRequest(s.default.METHODS.START,o,{queued:!0,sendNow:!0,response:function(t){e._internalState.hasStarted=!0;var n=e._lpRequest.getLastResponse(t);if(e._lpRequest.isResponseSuccess(n)){if(e._internalState.startSuccessful=!0,e._internalState.devMode){var r=n[s.default.KEYS.LATEST_VERSION];r&&console.log("A newer version of Leanplum, "+r+', is available.\nUse "npm update leanplum-sdk" or go to https://docs.leanplum.com/reference#javascript-setup to download it.'),e.connectSocket()}e._varCache.applyDiffs(n[s.default.KEYS.VARS],n[s.default.KEYS.VARIANTS],n[s.default.KEYS.ACTION_METADATA]),e._varCache.setVariantDebugInfo(n[s.default.KEYS.VARIANT_DEBUG_INFO]),e._varCache.token=n[s.default.KEYS.TOKEN]}else e._internalState.startSuccessful=!1,e._varCache.loadDiffs();e._internalState.triggerStartHandlers()}})},e.startFromCache=function(t,n,r){"function"==typeof t?(r=t,n={},t=null):"object"==typeof t&&null!=t?(r=n,n=t,t=null):"function"==typeof n&&(r=n,n={}),e._lpRequest.userId=t,r&&e.addStartResponseHandler(r),e._internalState.hasStarted=!0,e._internalState.startSuccessful=!0,e._internalState.devMode&&e.connectSocket(),e._varCache.loadDiffs(),e._internalState.triggerStartHandlers()},e.stop=function(){e.createRequest(s.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0})},e.pauseSession=function(){e.createRequest(s.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},e.resumeSession=function(){e.createRequest(s.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},e.pauseState=function(){e.createRequest(s.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},e.resumeState=function(){e.createRequest(s.default.METHODS.RESUME_STATE,void 0,{queued:!0})},e.setUserId=function(t){e.setUserAttributes(t)},e.setUserAttributes=function(t,n){if(void 0===n)if("object"==typeof t)n=t,t=void 0;else if("string"!=typeof t)return void console.log("Leanplum: setUserAttributes expects a string or an object");var r=(new a.default).add(s.default.PARAMS.USER_ATTRIBUTES,n?JSON.stringify(n):void 0).add(s.default.PARAMS.NEW_USER_ID,t);e.createRequest(s.default.METHODS.SET_USER_ATTRIBUTES,r,{queued:!0}),t&&(e._lpRequest.userId=t,f.default.saveToLocalStorage(s.default.DEFAULT_KEYS.USER_ID,e._lpRequest.userId))},e.track=function(t,n,r,o){"object"==typeof n&&null!=n?(o=n,r=void 0,n=void 0):"string"==typeof n?(o=r,r=n,n=void 0):"object"==typeof r&&null!=r&&(o=r,r=void 0);var i=(new a.default).add(s.default.PARAMS.EVENT,t).add(s.default.PARAMS.VALUE,n||0).add(s.default.PARAMS.INFO,r).add(s.default.PARAMS.PARAMS,JSON.stringify(o));e.createRequest(s.default.METHODS.TRACK,i,{queued:!0})},e.advanceTo=function(t,n,r){"object"==typeof n&&null!=n&&(r=n,n=void 0);var o=(new a.default).add(s.default.PARAMS.STATE,t).add(s.default.PARAMS.INFO,n).add(s.default.PARAMS.PARAMS,JSON.stringify(r));e.createRequest(s.default.METHODS.ADVANCE,o,{queued:!0})},e.isWebPushSupported=function(){return e._pushManager.isWebPushSupported()},e.isWebPushSubscribed=function(){return e._pushManager.isWebPushSubscribed()},e.registerForWebPush=function(t){return new Promise((function(n,r){return e._pushManager.isWebPushSupported()?e._pushManager.register(t,(function(t){return t?n(!0):e._pushManager.subscribeUser()})):r("Leanplum: WebPush is not supported.")}))},e.unregisterFromWebPush=function(){return e._pushManager.unsubscribeUser()},e.clearUserContent=function(){e._varCache.clearUserContent()},e.createRequest=function(t,n,o){void 0===o&&(o={}),e._lpRequest.request(t,n,r({devMode:e._internalState.devMode},o))},e.connectSocket=function(){e._lpSocket.connect(e._varCache,{appId:e._lpRequest.appId,deviceId:e._lpRequest.deviceId},e.createRequest,e._lpRequest.getLastResponse)},e._internalState=new u.default,e._lpRequest=new c.default,e._lpSocket=new l.default,e._pushManager=new d.default(e.createRequest),e._varCache=new p.default(e.createRequest),e}();t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.browser=this.searchString(this.getBrowserData(e))||"Unknown Browser",this.version=this.searchVersion(e.navigator.userAgent)||this.searchVersion(e.navigator.appVersion)||"Unknown Version",this.OS=this.searchString(this.getOSData(e))||"Unknown OS"}return e.prototype.searchString=function(e){for(var t=0;t<e.length;t++){var n=e[t].string,r=e[t].prop;if(this.versionSearchString=e[t].versionSearch||e[t].identity,n){if(-1!==n.indexOf(e[t].subString))return e[t].identity}else if(r)return e[t].identity}},e.prototype.searchVersion=function(e){if(e){var t=e.indexOf(this.versionSearchString);if(-1!==t)return parseFloat(e.substring(t+this.versionSearchString.length+1))}},e.prototype.getBrowserData=function(e){return[{string:e.navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:e.navigator.userAgent,subString:"OmniWeb",identity:"OmniWeb",versionSearch:"OmniWeb/"},{string:e.navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:e.opera,identity:"Opera",versionSearch:"Version"},{string:e.navigator.vendor,subString:"iCab",identity:"iCab"},{string:e.navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:e.navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:e.navigator.vendor,subString:"Camino",identity:"Camino"},{string:e.navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:e.navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:e.navigator.userAgent,subString:"Android",identity:"Android Browser",versionSearch:"Version"},{string:e.navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:e.navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}]},e.prototype.getOSData=function(e){return[{string:e.navigator.platform,subString:"Win",identity:"Windows"},{string:e.navigator.platform,subString:"Mac",identity:"Mac OS"},{string:e.navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:e.navigator.userAgent,subString:"Android",identity:"Android"},{string:e.navigator.platform,subString:"Linux",identity:"Linux"}]},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.startHandlers=[],this.devMode=!1,this.hasStarted=!1,this.startSuccessful=!1,this.variantDebugInfoEnabled=!1}return e.prototype.addStartResponseHandler=function(e){this.startHandlers.push(e),this.hasStarted&&e(this.startSuccessful)},e.prototype.removeStartResponseHandler=function(e){var t=this.startHandlers.indexOf(e);t>=0&&this.startHandlers.splice(t,1)},e.prototype.triggerStartHandlers=function(){for(var e=0;e<this.startHandlers.length;e++)this.startHandlers[e](this.startSuccessful)},e}();t.default=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(3)),a=r(n(1)),i=r(n(4)),s=r(n(14)),u=function(){function e(){this.lastRequestTime=void 0,this.cooldownTimeout=null,this.apiPath="https://www.leanplum.com/api",this.batchCooldown=5,this.batchEnabled=!0}return e.prototype.request=function(e,t,n){var r=this;if(void 0===n&&(n={}),n=n||{},t=t||new o.default,this.deviceId||(this.deviceId=this.loadLocal(a.default.DEFAULT_KEYS.DEVICE_ID)),!this.deviceId){for(var i="",u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",c=0;c<16;c++)i+=u.charAt(Math.floor(Math.random()*u.length));this.deviceId=i,this.saveLocal(a.default.DEFAULT_KEYS.DEVICE_ID,i)}this.userId||(this.userId=this.loadLocal(a.default.DEFAULT_KEYS.USER_ID),this.userId||(this.userId=this.deviceId)),this.saveLocal(a.default.DEFAULT_KEYS.USER_ID,this.userId);var l=t.attachApiKeys(this.appId,this.clientKey).add(a.default.PARAMS.SDK_VERSION,a.default.SDK_VERSION).add(a.default.PARAMS.DEVICE_ID,this.deviceId).add(a.default.PARAMS.USER_ID,this.userId).add(a.default.PARAMS.ACTION,e).add(a.default.PARAMS.VERSION_NAME,this.versionName).add(a.default.PARAMS.DEV_MODE,n.devMode).add(a.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),f=n.success||n.response,d=n.error||n.response;if(!this.appId||!this.clientKey){var p="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(p),void(d&&d(p))}if(t.body())s.default.ajax("POST",this.apiPath+"?"+l.build(),t.body(),f,d,n.queued);else{var v=n.devMode||n.sendNow||!this.batchEnabled,h=function(){var e=r.popUnsentRequests();if(e.length>0){var t=JSON.stringify({data:e}),i=(new o.default).attachApiKeys(r.appId,r.clientKey).add(a.default.PARAMS.SDK_VERSION,a.default.SDK_VERSION).add(a.default.PARAMS.ACTION,a.default.METHODS.MULTI).add(a.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();s.default.ajax("POST",r.apiPath+"?"+i,t,f,d,n.queued)}};if(!v&&this.batchCooldown){var S=(new Date).getTime()/1e3;!this.lastRequestTime||S-this.lastRequestTime>=this.batchCooldown?(v=!0,this.lastRequestTime=S):this.cooldownTimeout||(this.cooldownTimeout=setTimeout((function(){r.cooldownTimeout=null,r.lastRequestTime=(new Date).getTime()/1e3,h()}),1e3*(this.batchCooldown-(S-this.lastRequestTime))))}this.saveRequestForLater(l.buildDict()),v&&h()}},e.prototype.setNetworkTimeout=function(e){s.default.setNetworkTimeout(e)},e.prototype.getLastResponse=function(e){var t,n,r,o,a,i=null!=(r=null===(n=null===(t=e)||void 0===t?void 0:t.response)||void 0===n?void 0:n.length)?r:0;return i>0?null===(a=null===(o=e)||void 0===o?void 0:o.response)||void 0===a?void 0:a[i-1]:null},e.prototype.isResponseSuccess=function(e){var t;return Boolean(null===(t=e)||void 0===t?void 0:t.success)},e.prototype.saveRequestForLater=function(e){var t=this.loadLocal(a.default.DEFAULT_KEYS.COUNT)||0,n=a.default.DEFAULT_KEYS.ITEM+t;this.saveLocal(n,JSON.stringify(e)),t++,this.saveLocal(a.default.DEFAULT_KEYS.COUNT,t)},e.prototype.popUnsentRequests=function(){var e=[],t=this.loadLocal(a.default.DEFAULT_KEYS.COUNT)||0;this.removeLocal(a.default.DEFAULT_KEYS.COUNT);for(var n=0;n<t;n++){var r=a.default.DEFAULT_KEYS.ITEM+n;try{e.push(JSON.parse(this.loadLocal(r)))}catch(e){}this.removeLocal(r)}return e},e.prototype.loadLocal=function(e){return i.default.getFromLocalStorage(e)},e.prototype.saveLocal=function(e,t){i.default.saveToLocalStorage(e,t)},e.prototype.removeLocal=function(e){i.default.removeFromLocalStorage(e)},e}();t.default=u},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(15)),a=r(n(3)),i=r(n(1)),s=r(n(101)),u=function(){function e(){this.socketHost="dev.leanplum.com"}return e.prototype.connect=function(e,t,n,r){var u=this;if(WebSocket){var c=new s.default,l=!1;c.onopen=function(){var e;l||(console.log("Leanplum: Connected to development server."),c.send("auth",((e={})[i.default.PARAMS.APP_ID]=t.appId,e[i.default.PARAMS.DEVICE_ID]=t.deviceId,e)),l=!0)},c.onerror=function(e){console.log("Leanplum: Socket error",e)},c.onmessage=function(t,s){if("updateVars"===t){var u=(new a.default).add(i.default.PARAMS.INCLUDE_DEFAULTS,!1);n(i.default.METHODS.GET_VARS,u,{queued:!1,sendNow:!0,response:function(t){var n=r(t),a=n[i.default.KEYS.VARS],s=n[i.default.KEYS.VARIANTS],u=n[i.default.KEYS.ACTION_METADATA];o.default(a,e.diffs)||e.applyDiffs(a,s,u)}})}else"getVariables"===t?(e.sendVariables(),c.send("getContentResponse",{updated:!0})):"getActions"===t?c.send("getContentResponse",{updated:!1}):"registerDevice"===t&&alert("Your device has been registered to "+s[0].email+".")},c.onclose=function(){console.log("Leanplum: Disconnected to development server."),l=!1},c.connect(this.socketHost),setInterval((function(){c.connected||c.connecting||c.connect(u.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},e.prototype.setSocketHost=function(e){this.socketHost=e},e}();t.default=u},function(e,t,n){var r=n(34),o=n(10);e.exports=function e(t,n,a,i,s){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,a,i,e,s))}},function(e,t,n){var r=n(35),o=n(22),a=n(70),i=n(74),s=n(96),u=n(13),c=n(23),l=n(25),f="[object Object]",d=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,p,v,h){var S=u(e),_=u(t),g=S?"[object Array]":s(e),b=_?"[object Array]":s(t),A=(g="[object Arguments]"==g?f:g)==f,y=(b="[object Arguments]"==b?f:b)==f,E=g==b;if(E&&c(e)){if(!c(t))return!1;S=!0,A=!1}if(E&&!A)return h||(h=new r),S||l(e)?o(e,t,n,p,v,h):a(e,t,g,n,p,v,h);if(!(1&n)){var T=A&&d.call(e,"__wrapped__"),R=y&&d.call(t,"__wrapped__");if(T||R){var I=T?e.value():e,O=R?t.value():t;return h||(h=new r),v(I,O,n,p,h)}}return!!E&&(h||(h=new r),i(e,t,n,p,v,h))}},function(e,t,n){var r=n(5),o=n(41),a=n(42),i=n(43),s=n(44),u=n(45);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=o,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=s,c.prototype.set=u,e.exports=c},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(6),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(6);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(6);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(6);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(5);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(5),o=n(11),a=n(21);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var i=n.__data__;if(!o||i.length<199)return i.push([e,t]),this.size=++n.size,this;n=this.__data__=new a(i)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(17),o=n(50),a=n(19),i=n(20),s=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,l=u.toString,f=c.hasOwnProperty,d=RegExp("^"+l.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||o(e))&&(r(e)?d:s).test(i(e))}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(12),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var t=a.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var o=i.call(e);return r&&(t?e[s]=n:delete e[s]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r,o=n(51),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!a&&a in e}},function(e,t,n){var r=n(0)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(54),o=n(5),a=n(11);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(e,t,n){var r=n(55),o=n(56),a=n(57),i=n(58),s=n(59);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=s,e.exports=u},function(e,t,n){var r=n(8);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(8),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(8),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(8);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t,n){var r=n(9);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(9);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(9);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(9);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(21),o=n(66),a=n(67);function i(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}i.prototype.add=i.prototype.push=o,i.prototype.has=a,e.exports=i},function(e,t){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t,n){var r=n(12),o=n(71),a=n(16),i=n(22),s=n(72),u=n(73),c=r?r.prototype:void 0,l=c?c.valueOf:void 0;e.exports=function(e,t,n,r,c,f,d){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!f(new o(e),new o(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=s;case"[object Set]":var v=1&r;if(p||(p=u),e.size!=t.size&&!v)return!1;var h=d.get(e);if(h)return h==t;r|=2,d.set(e,t);var S=i(p(e),p(t),r,c,f,d);return d.delete(e),S;case"[object Symbol]":if(l)return l.call(e)==l.call(t)}return!1}},function(e,t,n){var r=n(0).Uint8Array;e.exports=r},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t,n){var r=n(75),o=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,a,i,s){var u=1&n,c=r(e),l=c.length;if(l!=r(t).length&&!u)return!1;for(var f=l;f--;){var d=c[f];if(!(u?d in t:o.call(t,d)))return!1}var p=s.get(e);if(p&&s.get(t))return p==t;var v=!0;s.set(e,t),s.set(t,e);for(var h=u;++f<l;){var S=e[d=c[f]],_=t[d];if(a)var g=u?a(_,S,d,t,e,s):a(S,_,d,e,t,s);if(!(void 0===g?S===_||i(S,_,n,a,s):g)){v=!1;break}h||(h="constructor"==d)}if(v&&!h){var b=e.constructor,A=t.constructor;b!=A&&"constructor"in e&&"constructor"in t&&!("function"==typeof b&&b instanceof b&&"function"==typeof A&&A instanceof A)&&(v=!1)}return s.delete(e),s.delete(t),v}},function(e,t,n){var r=n(76),o=n(78),a=n(81);e.exports=function(e){return r(e,a,o)}},function(e,t,n){var r=n(77),o=n(13);e.exports=function(e,t,n){var a=t(e);return o(e)?a:r(a,n(e))}},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t,n){var r=n(79),o=n(80),a=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(e){return null==e?[]:(e=Object(e),r(i(e),(function(t){return a.call(e,t)})))}:o;e.exports=s},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,a=[];++n<r;){var i=e[n];t(i,n,e)&&(a[o++]=i)}return a}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(82),o=n(91),a=n(95);e.exports=function(e){return a(e)?r(e):o(e)}},function(e,t,n){var r=n(83),o=n(84),a=n(13),i=n(23),s=n(87),u=n(25),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=a(e),l=!n&&o(e),f=!n&&!l&&i(e),d=!n&&!l&&!f&&u(e),p=n||l||f||d,v=p?r(e.length,String):[],h=v.length;for(var S in e)!t&&!c.call(e,S)||p&&("length"==S||f&&("offset"==S||"parent"==S)||d&&("buffer"==S||"byteLength"==S||"byteOffset"==S)||s(S,h))||v.push(S);return v}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(85),o=n(10),a=Object.prototype,i=a.hasOwnProperty,s=a.propertyIsEnumerable,u=r(function(){return arguments}())?r:function(e){return o(e)&&i.call(e,"callee")&&!s.call(e,"callee")};e.exports=u},function(e,t,n){var r=n(7),o=n(10);e.exports=function(e){return o(e)&&"[object Arguments]"==r(e)}},function(e,t){e.exports=function(){return!1}},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(7),o=n(26),a=n(10),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&o(e.length)&&!!i[r(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(18),o=t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=a&&a.exports===o&&r.process,s=function(){try{var e=a&&a.require&&a.require("util").types;return e||i&&i.binding&&i.binding("util")}catch(e){}}();e.exports=s}).call(this,n(24)(e))},function(e,t,n){var r=n(92),o=n(93),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))a.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(94)(Object.keys,Object);e.exports=r},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(17),o=n(26);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(97),o=n(11),a=n(98),i=n(99),s=n(100),u=n(7),c=n(20),l=c(r),f=c(o),d=c(a),p=c(i),v=c(s),h=u;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=h(new o)||a&&"[object Promise]"!=h(a.resolve())||i&&"[object Set]"!=h(new i)||s&&"[object WeakMap]"!=h(new s))&&(h=function(e){var t=u(e),n="[object Object]"==t?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case l:return"[object DataView]";case f:return"[object Map]";case d:return"[object Promise]";case p:return"[object Set]";case v:return"[object WeakMap]"}return t}),e.exports=h},function(e,t,n){var r=n(2)(n(0),"DataView");e.exports=r},function(e,t,n){var r=n(2)(n(0),"Promise");e.exports=r},function(e,t,n){var r=n(2)(n(0),"Set");e.exports=r},function(e,t,n){var r=n(2)(n(0),"WeakMap");e.exports=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(14)),a=function(){function e(){this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return e.prototype.connect=function(e){var t=this;t.connecting=!0,o.default.ajax("POST","https://"+e+"/socket.io/1","",(function(n){var r=n.split(":"),o=r[0],a=parseInt(r[1])/2*1e3;t.socket=new WebSocket("wss://"+e+"/socket.io/1/websocket/"+o);var i=null;t.socket.onopen=function(){t.connected=!0,t.connecting=!1,t.onopen&&t.onopen(),i=setInterval((function(){t.socket.send("2:::")}),a)},t.socket.onclose=function(){t.connected=!1,clearInterval(i),t.onclose&&t.onclose()},t.socket.onmessage=function(e){var n=e.data.split(":"),r=parseInt(n[0]);if(2===r)t.socket.send("2::");else if(5===r){var o=n[1],a=JSON.parse(n.slice(3).join(":")),i=a.name,s=a.args;o&&t.socket.send("6:::"+o),t.onmessage&&t.onmessage(i,s)}else 7===r&&console.log("Socket error: "+e.data)},t.socket.onerror=function(e){t.socket.close(),t.onerror&&t.onerror(e)}}),null,!1,!0)},e.prototype.send=function(e,t){if(this.connected){var n=JSON.stringify({name:e,args:t});this.socket.send("5:::"+n)}else console.log("Leanplum: Socket is not connected.")},e}();t.default=a},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(15)),a=r(n(3)),i=r(n(1)),s=r(n(4)),u=!1,c=null,l=function(){function e(e){this.createRequest=e}return e.prototype.isWebPushSupported=function(){return navigator&&navigator.serviceWorker&&"serviceWorker"in navigator&&"PushManager"in window},e.prototype.isWebPushSubscribed=function(){var e=this;return this.isWebPushSupported()?this.getServiceWorkerRegistration().then((function(t){return new Promise((function(n){t?t.pushManager.getSubscription().then((function(t){(u=null!==t)&&e.updateNewSubscriptionOnServer(t),n(u)})):n(!1)}))})):new Promise((function(e){e(!1)}))},e.prototype.register=function(e,t){var n=this;if(!this.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),t(!1);navigator.serviceWorker.register(e||"/sw.min.js",null).then((function(e){(c=e).pushManager.getSubscription().then((function(e){if((u=!(null===e))&&n.updateNewSubscriptionOnServer(e),t)return t(u)}))})).catch((function(e){console.log("Leanplum: Service Worker Error: ",e)}))},e.prototype.subscribeUser=function(){var e=this,t=this.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68");return new Promise((function(n,r){return c.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:t}).then((function(t){return t?(e.updateNewSubscriptionOnServer(t),n(u=!0)):(u=!1,r())})).catch((function(e){return r("Leanplum: Failed to subscribe the user: "+e)}))}))},e.prototype.unsubscribeUser=function(){var e=this;return new Promise((function(t,n){e.isWebPushSubscribed().then((function(e){if(!e)return t();c.pushManager.getSubscription().then((function(e){return e?e.unsubscribe():n()})).catch((function(e){n("Leanplum: Error unsubscribing: "+e)})).then((function(e){return e?(u=!1,t()):n()}))}),(function(){return n()}))}))},e.prototype.getServiceWorkerRegistration=function(){return new Promise((function(e){c?e(c):navigator.serviceWorker.getRegistration().then((function(t){c=t,e(t)}))}))},e.prototype.urlB64ToUint8Array=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),n=window.atob(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r[o]=n.charCodeAt(o);return r},e.prototype.prepareSubscription=function(e){var t=Function.prototype.apply,n=e.getKey?e.getKey("p256dh"):"",r=e.getKey?e.getKey("auth"):"",o=btoa(t.call(String.fromCharCode,null,new Uint8Array(n))),a=btoa(t.call(String.fromCharCode,null,new Uint8Array(r)));return{endpoint:e.endpoint,key:o,auth:a}},e.prototype.updateNewSubscriptionOnServer=function(e){if(e){var t=this.prepareSubscription(e),n=JSON.stringify(t),r=s.default.getFromLocalStorage(i.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION);o.default(r,n)||(s.default.saveToLocalStorage(i.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,n),this.setSubscription(n))}},e.prototype.setSubscription=function(e){if(e){var t=(new a.default).add(i.default.PARAMS.WEB_PUSH_SUBSCRIPTION,e);this.createRequest(i.default.METHODS.SET_DEVICE_ATTRIBUTES,t,{queued:!1,sendNow:!0})}},e}();t.default=l},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(3)),a=r(n(1)),i=r(n(4)),s=function(){function e(e){this.createRequest=e,this.actionMetadata={},this.hasReceivedDiffs=!1,this.merged=void 0,this.variables=null,this.variablesChangedHandlers=[],this.variantDebugInfo={},this.diffs=void 0,this.token="",this.variants=[]}return e.prototype.applyDiffs=function(e,t,n){this.diffs=e,this.variants=t,this.actionMetadata=n,this.hasReceivedDiffs=!0,this.merged=function e(t,n){if("number"==typeof n||"boolean"==typeof n||"string"==typeof n)return n;if(null==n)return t;var r=function(e){return function(t){if(e instanceof Array)for(var n=0;n<e.length;n++)t(e[n]);else for(var r in e)({}).hasOwnProperty.call(e,r)&&t(r)}},o=r(t),a=r(n),i=!1;if(null===t&&!(n instanceof Array))for(var s in i=null,n)if(n.hasOwnProperty(s)){if(null===i&&(i=!0),"string"!=typeof s){i=!1;break}if(s.length<3||"["!==s.charAt(0)||"]"!==s.charAt(s.length-1)){i=!1;break}}if(t instanceof Array||i){var u=[];return o((function(e){u.push(e)})),a((function(t){for(var r=parseInt(t.substring(1,t.length-1)),o=n[t];r>=u.length;)u.push(null);u[r]=e(u[r],o)})),u}var c={};return o((function(e){null!==n[e]&&void 0!==n[e]||(c[e]=t[e])})),a((function(r){c[r]=e(null===t?null:t[r]||{},n[r])})),c}(this.variables,e),this.saveDiffs(),this.onUpdate&&this.onUpdate()},e.prototype.loadDiffs=function(){try{this.applyDiffs(JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.ACTION_METADATA)||null)),this.token=this.loadLocal(a.default.DEFAULT_KEYS.TOKEN),this.variantDebugInfo=this.loadLocal(a.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(e){console.log("Leanplum: Invalid diffs: "+e)}},e.prototype.saveDiffs=function(){this.saveLocal(a.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(this.diffs||{})),this.saveLocal(a.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(this.variants||[])),this.saveLocal(a.default.DEFAULT_KEYS.ACTION_METADATA,JSON.stringify(this.actionMetadata||{})),this.saveLocal(a.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(this.variantDebugInfo||{})),this.saveLocal(a.default.DEFAULT_KEYS.TOKEN,this.token)},e.prototype.getVariables=function(){return void 0!==this.merged?this.merged:this.variables},e.prototype.setVariables=function(e){this.variables=e},e.prototype.addVariablesChangedHandler=function(e){this.variablesChangedHandlers.push(e),this.hasReceivedDiffs&&e()},e.prototype.removeVariablesChangedHandler=function(e){var t=this.variablesChangedHandlers.indexOf(e);t>=0&&this.variablesChangedHandlers.splice(t,1)},e.prototype.triggerVariablesChangedHandlers=function(){for(var e=0;e<this.variablesChangedHandlers.length;e++)this.variablesChangedHandlers[e]()},e.prototype.getVariantDebugInfo=function(){return this.variantDebugInfo},e.prototype.setVariantDebugInfo=function(e){this.variantDebugInfo=e},e.prototype.sendVariables=function(){var e,t=((e={})[a.default.PARAMS.VARIABLES]=this.variables,e),n=(new o.default).body(JSON.stringify(t));this.createRequest(a.default.METHODS.SET_VARS,n,{sendNow:!0})},e.prototype.clearUserContent=function(){this.diffs=void 0,this.variables=null,this.variants=[],this.variantDebugInfo={},this.merged=void 0},e.prototype.loadLocal=function(e){return i.default.getFromLocalStorage(e)},e.prototype.saveLocal=function(e,t){i.default.saveToLocalStorage(e,t)},e}();t.default=s}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9MZWFucGx1bS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9BcmdzQnVpbGRlci50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9Mb2NhbFN0b3JhZ2VNYW5hZ2VyLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTGlzdENhY2hlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzb2NJbmRleE9mLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9OZXR3b3JrLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0VxdWFsLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXBDYWNoZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQXJyYXlzLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvYnVuZGxlcy9sZWFucGx1bS5mdWxsLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0xlYW5wbHVtLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0Jyb3dzZXJEZXRlY3Rvci50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9JbnRlcm5hbFN0YXRlLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0xlYW5wbHVtUmVxdWVzdC50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9MZWFucGx1bVNvY2tldC50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWxEZWVwLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0RlbGV0ZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja1NldC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29yZUpzRGF0YS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0hhc2guanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXRDYWNoZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlQWRkLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVNvbWUuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQnlUYWcuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbE9iamVjdHMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJBcnJheS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyQXJnLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0RhdGFWaWV3LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvU29ja2V0SW9DbGllbnQudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvUHVzaE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvVmFyQ2FjaGUudHMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJGdW5jdGlvbiIsImRlZmF1bHQiLCJNRVRIT0RTIiwiU1RBUlQiLCJTVE9QIiwiQURWQU5DRSIsIlRSQUNLIiwiUEFVU0VfU0VTU0lPTiIsIlJFU1VNRV9TRVNTSU9OIiwiUEFVU0VfU1RBVEUiLCJSRVNVTUVfU1RBVEUiLCJET1dOTE9BRF9GSUxFIiwiTVVMVEkiLCJTRVRfVkFSUyIsIkdFVF9WQVJTIiwiU0VUX1VTRVJfQVRUUklCVVRFUyIsIlNFVF9ERVZJQ0VfQVRUUklCVVRFUyIsIlVQTE9BRF9GSUxFIiwiUkVHSVNURVJfREVWSUNFIiwiU0RLX1ZFUlNJT04iLCJDTElFTlQiLCJQQVJBTVMiLCJBQ1RJT04iLCJBUFBfSUQiLCJDTElFTlRfS0VZIiwiREVWSUNFX0lEIiwiVVNFUl9JRCIsIk5FV19VU0VSX0lEIiwiREVWX01PREUiLCJWRVJTSU9OX05BTUUiLCJTWVNURU1fTkFNRSIsIlNZU1RFTV9WRVJTSU9OIiwiQlJPV1NFUl9OQU1FIiwiQlJPV1NFUl9WRVJTSU9OIiwiREVWSUNFX05BTUUiLCJERVZJQ0VfTU9ERUwiLCJVU0VSX0FUVFJJQlVURVMiLCJMT0NBTEUiLCJDT1VOVFJZIiwiUkVHSU9OIiwiQ0lUWSIsIkxPQ0FUSU9OIiwiU1RBVEUiLCJJTkZPIiwiRVZFTlQiLCJWQUxVRSIsIkZJTEVOQU1FIiwiVElNRSIsIkRBVEEiLCJWQVJTIiwiRklMRSIsIlNJWkUiLCJWQVJJQVRJT04iLCJIQVNIIiwiRU1BSUwiLCJWQVJJQUJMRVMiLCJJTkNMVURFX0RFRkFVTFRTIiwiSU5DTFVERV9WQVJJQU5UX0RFQlVHX0lORk8iLCJXRUJfUFVTSF9TVUJTQ1JJUFRJT04iLCJLRVlTIiwiSVNfUkVHSVNURVJFRCIsIkxBVEVTVF9WRVJTSU9OIiwiVkFSSUFOVFMiLCJWQVJJQU5UX0RFQlVHX0lORk8iLCJBQ1RJT05fTUVUQURBVEEiLCJUT0tFTiIsIkRFRkFVTFRfS0VZUyIsIkNPVU5UIiwiSVRFTSIsIlBVU0hfU1VCU0NSSVBUSU9OIiwiVkFMVUVTIiwiREVURUNUIiwiYmFzZUlzTmF0aXZlIiwiZ2V0VmFsdWUiLCJ1bmRlZmluZWQiLCJfX2ltcG9ydERlZmF1bHQiLCJ0aGlzIiwibW9kIiwiQ29uc3RhbnRzXzEiLCJBcmdzQnVpbGRlciIsImFyZ1N0cmluZyIsImFyZ1ZhbHVlcyIsImFkZCIsImVuY29kZVVSSUNvbXBvbmVudCIsImJvZHkiLCJfYm9keSIsImF0dGFjaEFwaUtleXMiLCJhcHBJZCIsImNsaWVudEtleSIsImJ1aWxkIiwiYnVpbGREaWN0IiwibG9jYWxTdG9yYWdlRW5hYmxlZCIsImFsdGVybmF0ZUxvY2FsU3RvcmFnZSIsIkxvY2FsU3RvcmFnZU1hbmFnZXIiLCJnZXRGcm9tTG9jYWxTdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwic2F2ZVRvTG9jYWxTdG9yYWdlIiwiZSIsInJlbW92ZUZyb21Mb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJlbnRyaWVzIiwiaW5kZXgiLCJsZW5ndGgiLCJjbGVhciIsImVudHJ5Iiwic2V0IiwiaGFzIiwiZXEiLCJhcnJheSIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwic3ltVG9TdHJpbmdUYWciLCJuYXRpdmVDcmVhdGUiLCJnZXROYXRpdmUiLCJpc0tleWFibGUiLCJtYXAiLCJkYXRhIiwiX19kYXRhX18iLCJNYXAiLCJpc0FycmF5IiwiQXJyYXkiLCJhcHBseSIsInJlcXVlc3RRdWV1ZSIsIm5ldHdvcmtUaW1lb3V0U2Vjb25kcyIsIk5ldHdvcmsiLCJzZXROZXR3b3JrVGltZW91dCIsInNlY29uZHMiLCJhamF4IiwibWV0aG9kIiwidXJsIiwic3VjY2VzcyIsImVycm9yIiwicXVldWVkIiwicGxhaW5UZXh0IiwicnVubmluZ1JlcXVlc3QiLCJlbnF1ZXVlUmVxdWVzdCIsImFyZ3VtZW50cyIsIlhEb21haW5SZXF1ZXN0IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJhamF4SUU4IiwiaGFuZGxlZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlXzEiLCJyYW5DYWxsYmFjayIsInJlc3BvbnNlVGV4dCIsIkpTT04iLCJwYXJzZSIsInNldFRpbWVvdXQiLCJzdGF0dXMiLCJkZXF1ZXVlUmVxdWVzdCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsImFib3J0IiwieGRyIiwib25sb2FkIiwicmVzcG9uc2UiLCJvbmVycm9yIiwib250aW1lb3V0Iiwib25wcm9ncmVzcyIsInRpbWVvdXQiLCJyZXF1ZXN0QXJndW1lbnRzIiwicHVzaCIsImFyZ3MiLCJzaGlmdCIsImJhc2VJc0VxdWFsIiwib3RoZXIiLCJiYXNlR2V0VGFnIiwiaXNPYmplY3QiLCJ0YWciLCJnbG9iYWwiLCJ0eXBlIiwiZnVuY1RvU3RyaW5nIiwidG9TdHJpbmciLCJmdW5jIiwibWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiTWFwQ2FjaGUiLCJTZXRDYWNoZSIsImFycmF5U29tZSIsImNhY2hlSGFzIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJlcXVhbEZ1bmMiLCJzdGFjayIsImlzUGFydGlhbCIsImFyckxlbmd0aCIsIm90aExlbmd0aCIsInN0YWNrZWQiLCJyZXN1bHQiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJzdHViRmFsc2UiLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIkJ1ZmZlciIsImlzQnVmZmVyIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsImJhc2VJc1R5cGVkQXJyYXkiLCJiYXNlVW5hcnkiLCJub2RlVXRpbCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJMZWFucGx1bSIsIl9fYXNzaWduIiwiYXNzaWduIiwiQXJnc0J1aWxkZXJfMSIsIkJyb3dzZXJEZXRlY3Rvcl8xIiwiSW50ZXJuYWxTdGF0ZV8xIiwiTGVhbnBsdW1SZXF1ZXN0XzEiLCJMZWFucGx1bVNvY2tldF8xIiwiTG9jYWxTdG9yYWdlTWFuYWdlcl8xIiwiUHVzaE1hbmFnZXJfMSIsIlZhckNhY2hlXzEiLCJfYnJvd3NlckRldGVjdG9yIiwic2V0QXBpUGF0aCIsImFwaVBhdGgiLCJfbHBSZXF1ZXN0Iiwic2V0RW1haWwiLCJlbWFpbCIsIl9lbWFpbCIsInNldFZhcmlhbnREZWJ1Z0luZm9FbmFibGVkIiwidmFyaWFudERlYnVnSW5mb0VuYWJsZWQiLCJfaW50ZXJuYWxTdGF0ZSIsImdldFZhcmlhbnREZWJ1Z0luZm8iLCJfdmFyQ2FjaGUiLCJzZXRBcHBJZEZvckRldmVsb3BtZW50TW9kZSIsImFjY2Vzc0tleSIsImRldk1vZGUiLCJzZXRBcHBJZEZvclByb2R1Y3Rpb25Nb2RlIiwic2V0U29ja2V0SG9zdCIsImhvc3QiLCJfbHBTb2NrZXQiLCJzZXREZXZpY2VJZCIsImRldmljZUlkIiwic2V0QXBwVmVyc2lvbiIsInZlcnNpb25OYW1lIiwic2V0RGV2aWNlTmFtZSIsImRldmljZU5hbWUiLCJfZGV2aWNlTmFtZSIsInNldERldmljZU1vZGVsIiwiZGV2aWNlTW9kZWwiLCJfZGV2aWNlTW9kZWwiLCJzZXRSZXF1ZXN0QmF0Y2hpbmciLCJiYXRjaEVuYWJsZWQiLCJjb29sZG93blNlY29uZHMiLCJiYXRjaENvb2xkb3duIiwic2V0U3lzdGVtTmFtZSIsInN5c3RlbU5hbWUiLCJfc3lzdGVtTmFtZSIsInNldFN5c3RlbVZlcnNpb24iLCJzeXN0ZW1WZXJzaW9uIiwiX3N5c3RlbVZlcnNpb24iLCJzZXRWYXJpYWJsZXMiLCJ2YXJpYWJsZXMiLCJnZXRWYXJpYWJsZXMiLCJnZXRWYXJpYWJsZSIsIl9pIiwiY3VycmVudCIsImdldFZhcmlhbnRzIiwidmFyaWFudHMiLCJhZGRTdGFydFJlc3BvbnNlSGFuZGxlciIsImhhbmRsZXIiLCJyZW1vdmVTdGFydFJlc3BvbnNlSGFuZGxlciIsIl9fZGVzdHJveSIsIl9wdXNoTWFuYWdlciIsImNyZWF0ZVJlcXVlc3QiLCJhZGRWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlciIsInJlbW92ZVZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyIiwiZm9yY2VDb250ZW50VXBkYXRlIiwiY2FsbGJhY2siLCJzZW5kTm93IiwiZ2V0VmFyc1Jlc3BvbnNlIiwiZ2V0TGFzdFJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiaXNSZXNwb25zZVN1Y2Nlc3MiLCJhcHBseURpZmZzIiwic2V0VmFyaWFudERlYnVnSW5mbyIsInN0YXJ0IiwidXNlcklkIiwidXNlckF0dHJpYnV0ZXMiLCJvblVwZGF0ZSIsInRyaWdnZXJWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMiLCJzdHJpbmdpZnkiLCJPUyIsImJyb3dzZXIiLCJ2ZXJzaW9uIiwiaGFzU3RhcnRlZCIsInN0YXJ0UmVzcG9uc2UiLCJzdGFydFN1Y2Nlc3NmdWwiLCJsYXRlc3RWZXJzaW9uIiwiY29uc29sZSIsImxvZyIsImNvbm5lY3RTb2NrZXQiLCJ0b2tlbiIsImxvYWREaWZmcyIsInRyaWdnZXJTdGFydEhhbmRsZXJzIiwic3RhcnRGcm9tQ2FjaGUiLCJzdG9wIiwicGF1c2VTZXNzaW9uIiwicmVzdW1lU2Vzc2lvbiIsInBhdXNlU3RhdGUiLCJyZXN1bWVTdGF0ZSIsInNldFVzZXJJZCIsInNldFVzZXJBdHRyaWJ1dGVzIiwidHJhY2siLCJldmVudCIsImluZm8iLCJwYXJhbXMiLCJhZHZhbmNlVG8iLCJzdGF0ZSIsImlzV2ViUHVzaFN1cHBvcnRlZCIsImlzV2ViUHVzaFN1YnNjcmliZWQiLCJyZWdpc3RlckZvcldlYlB1c2giLCJzZXJ2aWNlV29ya2VyVXJsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWdpc3RlciIsImlzU3Vic2NyaWJlZCIsInN1YnNjcmliZVVzZXIiLCJ1bnJlZ2lzdGVyRnJvbVdlYlB1c2giLCJ1bnN1YnNjcmliZVVzZXIiLCJjbGVhclVzZXJDb250ZW50IiwiYWN0aW9uIiwib3B0aW9ucyIsInJlcXVlc3QiLCJjb25uZWN0IiwiQnJvd3NlckRldGVjdG9yIiwid25kIiwic2VhcmNoU3RyaW5nIiwiZ2V0QnJvd3NlckRhdGEiLCJzZWFyY2hWZXJzaW9uIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiYXBwVmVyc2lvbiIsImdldE9TRGF0YSIsImRhdGFTdHJpbmciLCJzdHJpbmciLCJkYXRhUHJvcCIsInByb3AiLCJ2ZXJzaW9uU2VhcmNoU3RyaW5nIiwidmVyc2lvblNlYXJjaCIsImlkZW50aXR5Iiwic3ViU3RyaW5nIiwicGFyc2VGbG9hdCIsInZlbmRvciIsIm9wZXJhIiwicGxhdGZvcm0iLCJJbnRlcm5hbFN0YXRlIiwic3RhcnRIYW5kbGVycyIsImlkeCIsInNwbGljZSIsIk5ldHdvcmtfMSIsIkxlYW5wbHVtUmVxdWVzdCIsImxhc3RSZXF1ZXN0VGltZSIsImNvb2xkb3duVGltZW91dCIsIl90aGlzIiwibG9hZExvY2FsIiwiaWQiLCJwb3NzaWJsZSIsImNoYXJBdCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInNhdmVMb2NhbCIsImFyZ3NCdWlsZGVyIiwiRGF0ZSIsImdldFRpbWUiLCJlcnIiLCJzZW5kVW5zZW50UmVxdWVzdHMiLCJyZXF1ZXN0c1RvU2VuZCIsInBvcFVuc2VudFJlcXVlc3RzIiwicmVxdWVzdERhdGEiLCJtdWx0aVJlcXVlc3RBcmdzIiwibm93Iiwic2F2ZVJlcXVlc3RGb3JMYXRlciIsIl9hIiwiX2IiLCJfYyIsIl9kIiwiX2UiLCJjb3VudCIsIkJvb2xlYW4iLCJpdGVtS2V5IiwicmVtb3ZlTG9jYWwiLCJpZ25vcmVkIiwiaXNFcXVhbF8xIiwiU29ja2V0SW9DbGllbnRfMSIsIkxlYW5wbHVtU29ja2V0Iiwic29ja2V0SG9zdCIsImNhY2hlIiwiYXV0aCIsIldlYlNvY2tldCIsImNsaWVudCIsImF1dGhTZW50Iiwib25vcGVuIiwib25tZXNzYWdlIiwiYXJnc18xIiwidmFsdWVzIiwiYWN0aW9uTWV0YWRhdGEiLCJkaWZmcyIsInNlbmRWYXJpYWJsZXMiLCJhbGVydCIsIm9uY2xvc2UiLCJzZXRJbnRlcnZhbCIsImNvbm5lY3RlZCIsImNvbm5lY3RpbmciLCJiYXNlSXNFcXVhbERlZXAiLCJpc09iamVjdExpa2UiLCJTdGFjayIsImVxdWFsQXJyYXlzIiwiZXF1YWxCeVRhZyIsImVxdWFsT2JqZWN0cyIsImdldFRhZyIsIm9iamVjdFRhZyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwic3RhY2tDbGVhciIsInN0YWNrRGVsZXRlIiwic3RhY2tHZXQiLCJzdGFja0hhcyIsInN0YWNrU2V0Iiwic2l6ZSIsImFzc29jSW5kZXhPZiIsInBvcCIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsImlzRnVuY3Rpb24iLCJpc01hc2tlZCIsInRvU291cmNlIiwicmVJc0hvc3RDdG9yIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJyZUlzTmF0aXZlIiwiUmVnRXhwIiwicmVwbGFjZSIsInRlc3QiLCJnIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwidWlkIiwiY29yZUpzRGF0YSIsIm1hc2tTcmNLZXkiLCJleGVjIiwia2V5cyIsIklFX1BST1RPIiwiSGFzaCIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJnZXRNYXBEYXRhIiwic2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUhhcyIsInByZWRpY2F0ZSIsIlVpbnQ4QXJyYXkiLCJtYXBUb0FycmF5Iiwic2V0VG9BcnJheSIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJieXRlTGVuZ3RoIiwiYnl0ZU9mZnNldCIsImJ1ZmZlciIsIm1lc3NhZ2UiLCJjb252ZXJ0IiwiZm9yRWFjaCIsImdldEFsbEtleXMiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsInNraXBDdG9yIiwib2JqVmFsdWUiLCJvYmpDdG9yIiwiY29uc3RydWN0b3IiLCJvdGhDdG9yIiwiYmFzZUdldEFsbEtleXMiLCJnZXRTeW1ib2xzIiwiYXJyYXlQdXNoIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsIm9mZnNldCIsImFycmF5RmlsdGVyIiwic3R1YkFycmF5IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9sIiwicmVzSW5kZXgiLCJhcnJheUxpa2VLZXlzIiwiYmFzZUtleXMiLCJpc0FycmF5TGlrZSIsImJhc2VUaW1lcyIsImlzQXJndW1lbnRzIiwiaXNJbmRleCIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsIlN0cmluZyIsIml0ZXJhdGVlIiwiYmFzZUlzQXJndW1lbnRzIiwicmVJc1VpbnQiLCJpc0xlbmd0aCIsInR5cGVkQXJyYXlUYWdzIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwidHlwZXMiLCJyZXF1aXJlIiwiYmluZGluZyIsImlzUHJvdG90eXBlIiwibmF0aXZlS2V5cyIsIkN0b3IiLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwiYXJnIiwiRGF0YVZpZXciLCJTZXQiLCJXZWFrTWFwIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiQXJyYXlCdWZmZXIiLCJjdG9yU3RyaW5nIiwiU29ja2V0SW9DbGllbnQiLCJsaW5lIiwicGFydHMiLCJzcGxpdCIsInNlc3Npb24iLCJoZWFydGJlYXQiLCJwYXJzZUludCIsInNvY2tldCIsImhlYXJ0YmVhdEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIm1lc3NhZ2VQYXJ0cyIsImNvZGUiLCJtZXNzYWdlSWQiLCJzbGljZSIsImpvaW4iLCJtZXNzYWdlRXZlbnQiLCJjbG9zZSIsImFyZ3NKc29uIiwic2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiIsIlB1c2hNYW5hZ2VyIiwic2VydmljZVdvcmtlciIsImdldFNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24iLCJ0aGVuIiwicmVnaXN0cmF0aW9uIiwicHVzaE1hbmFnZXIiLCJnZXRTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb24iLCJ1cGRhdGVOZXdTdWJzY3JpcHRpb25PblNlcnZlciIsImNhdGNoIiwiYXBwbGljYXRpb25TZXJ2ZXJLZXkiLCJ1cmxCNjRUb1VpbnQ4QXJyYXkiLCJzdWJzY3JpYmUiLCJ1c2VyVmlzaWJsZU9ubHkiLCJzdWJzY3JpYmVkIiwidW5zdWJzY3JpYmUiLCJnZXRSZWdpc3RyYXRpb24iLCJiYXNlNjRTdHJpbmciLCJiYXNlNjQiLCJyZXBlYXQiLCJyYXdEYXRhIiwiYXRvYiIsIm91dHB1dEFycmF5IiwiY2hhckNvZGVBdCIsInByZXBhcmVTdWJzY3JpcHRpb24iLCJnZXRLZXkiLCJrZXlBc2NpaSIsImJ0b2EiLCJmcm9tQ2hhckNvZGUiLCJhdXRoQXNjaWkiLCJlbmRwb2ludCIsInByZXBhcmVkU3Vic2NyaXB0aW9uIiwicHJlcGFyZWRTdWJzY3JpcHRpb25TdHJpbmciLCJleGlzdGluZ1N1YnNjcmlwdGlvblN0cmluZyIsInNldFN1YnNjcmlwdGlvbiIsIlZhckNhY2hlIiwiaGFzUmVjZWl2ZWREaWZmcyIsIm1lcmdlZCIsInZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycyIsInZhcmlhbnREZWJ1Z0luZm8iLCJtZXJnZUhlbHBlciIsInZhcnMiLCJkaWZmIiwib2JqSXRlcmF0b3IiLCJvYmoiLCJmIiwiYXR0ciIsInZhcnNJdGVyYXRvciIsImRpZmZJdGVyYXRvciIsImF0dHJpYnV0ZSIsIm1lcmdlZF8xIiwidmFyU3Vic2NyaXB0Iiwic3Vic2NyaXB0IiwiZGlm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ckMsT0FBTzFLLEtBQUsraEIsa0JBRWhCSixFQUFTOW1CLFVBQVVrVCxvQkFBc0IsU0FBVTdULEdBQy9DOEYsS0FBSytoQixpQkFBbUI3bkIsR0FFNUJ5bkIsRUFBUzltQixVQUFVK2EsY0FBZ0IsV0FDL0IsSUFBSXpCLEVBQ0EzVCxJQUFRMlQsRUFBSyxJQUFPalUsRUFBWTdFLFFBQVFvQixPQUFPa0MsV0FBYXFCLEtBQUt3TSxVQUFXMkgsR0FDNUVoTyxHQUFPLElBQUlxRCxFQUFjbk8sU0FBVW1GLEtBQUt5RSxLQUFLb0osVUFBVTdOLElBQzNEUixLQUFLb04sY0FBY2xOLEVBQVk3RSxRQUFRQyxRQUFRVyxTQUFVa0ssRUFBTSxDQUMzRHNILFNBQVMsS0FHakJrVSxFQUFTOW1CLFVBQVVnVyxpQkFBbUIsV0FDbEM3USxLQUFLMlYsV0FBUTdWLEVBQ2JFLEtBQUt3TSxVQUFZLEtBQ2pCeE0sS0FBSzhNLFNBQVcsR0FDaEI5TSxLQUFLK2hCLGlCQUFtQixHQUN4Qi9oQixLQUFLNmhCLFlBQVMvaEIsR0FFbEI2aEIsRUFBUzltQixVQUFVbVksVUFBWSxTQUFVeFksR0FDckMsT0FBT3FQLEVBQXNCeE8sUUFBUTZGLG9CQUFvQjFHLElBRTdEbW5CLEVBQVM5bUIsVUFBVTBZLFVBQVksU0FBVS9ZLEVBQUtOLEdBQzFDMlAsRUFBc0J4TyxRQUFRK0YsbUJBQW1CNUcsRUFBS04sSUFFbkR5bkIsRUEzRmtCLEdBNkY3QmxwQixFQUFRNEMsUUFBVXNtQiIsImZpbGUiOiJsZWFucGx1bS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkxlYW5wbHVtXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkxlYW5wbHVtXCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjcpO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKlxuICpcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZVxuICpcbiAqL1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIE1FVEhPRFM6IHtcbiAgICAgICAgU1RBUlQ6ICdzdGFydCcsXG4gICAgICAgIFNUT1A6ICdzdG9wJyxcbiAgICAgICAgQURWQU5DRTogJ2FkdmFuY2UnLFxuICAgICAgICBUUkFDSzogJ3RyYWNrJyxcbiAgICAgICAgUEFVU0VfU0VTU0lPTjogJ3BhdXNlU2Vzc2lvbicsXG4gICAgICAgIFJFU1VNRV9TRVNTSU9OOiAncmVzdW1lU2Vzc2lvbicsXG4gICAgICAgIFBBVVNFX1NUQVRFOiAncGF1c2VTdGF0ZScsXG4gICAgICAgIFJFU1VNRV9TVEFURTogJ3Jlc3VtZVN0YXRlJyxcbiAgICAgICAgRE9XTkxPQURfRklMRTogJ2Rvd25sb2FkRmlsZScsXG4gICAgICAgIE1VTFRJOiAnbXVsdGknLFxuICAgICAgICBTRVRfVkFSUzogJ3NldFZhcnMnLFxuICAgICAgICBHRVRfVkFSUzogJ2dldFZhcnMnLFxuICAgICAgICBTRVRfVVNFUl9BVFRSSUJVVEVTOiAnc2V0VXNlckF0dHJpYnV0ZXMnLFxuICAgICAgICBTRVRfREVWSUNFX0FUVFJJQlVURVM6ICdzZXREZXZpY2VBdHRyaWJ1dGVzJyxcbiAgICAgICAgVVBMT0FEX0ZJTEU6ICd1cGxvYWRGaWxlJyxcbiAgICAgICAgUkVHSVNURVJfREVWSUNFOiAncmVnaXN0ZXJEZXZpY2UnXG4gICAgfSxcbiAgICBTREtfVkVSU0lPTjogJzEuNC4wJyxcbiAgICBDTElFTlQ6ICdqcycsXG4gICAgUEFSQU1TOiB7XG4gICAgICAgIEFDVElPTjogJ2FjdGlvbicsXG4gICAgICAgIEFQUF9JRDogJ2FwcElkJyxcbiAgICAgICAgQ0xJRU5UOiAnY2xpZW50JyxcbiAgICAgICAgQ0xJRU5UX0tFWTogJ2NsaWVudEtleScsXG4gICAgICAgIERFVklDRV9JRDogJ2RldmljZUlkJyxcbiAgICAgICAgU0RLX1ZFUlNJT046ICdzZGtWZXJzaW9uJyxcbiAgICAgICAgVVNFUl9JRDogJ3VzZXJJZCcsXG4gICAgICAgIE5FV19VU0VSX0lEOiAnbmV3VXNlcklkJyxcbiAgICAgICAgREVWX01PREU6ICdkZXZNb2RlJyxcbiAgICAgICAgVkVSU0lPTl9OQU1FOiAndmVyc2lvbk5hbWUnLFxuICAgICAgICBTWVNURU1fTkFNRTogJ3N5c3RlbU5hbWUnLFxuICAgICAgICBTWVNURU1fVkVSU0lPTjogJ3N5c3RlbVZlcnNpb24nLFxuICAgICAgICBCUk9XU0VSX05BTUU6ICdicm93c2VyTmFtZScsXG4gICAgICAgIEJST1dTRVJfVkVSU0lPTjogJ2Jyb3dzZXJWZXJzaW9uJyxcbiAgICAgICAgREVWSUNFX05BTUU6ICdkZXZpY2VOYW1lJyxcbiAgICAgICAgREVWSUNFX01PREVMOiAnZGV2aWNlTW9kZWwnLFxuICAgICAgICBVU0VSX0FUVFJJQlVURVM6ICd1c2VyQXR0cmlidXRlcycsXG4gICAgICAgIExPQ0FMRTogJ2xvY2FsZScsXG4gICAgICAgIENPVU5UUlk6ICdjb3VudHJ5JyxcbiAgICAgICAgUkVHSU9OOiAncmVnaW9uJyxcbiAgICAgICAgQ0lUWTogJ2NpdHknLFxuICAgICAgICBMT0NBVElPTjogJ2xvY2F0aW9uJyxcbiAgICAgICAgU1RBVEU6ICdzdGF0ZScsXG4gICAgICAgIElORk86ICdpbmZvJyxcbiAgICAgICAgRVZFTlQ6ICdldmVudCcsXG4gICAgICAgIFZBTFVFOiAndmFsdWUnLFxuICAgICAgICBGSUxFTkFNRTogJ2ZpbGVuYW1lJyxcbiAgICAgICAgVElNRTogJ3RpbWUnLFxuICAgICAgICBEQVRBOiAnZGF0YScsXG4gICAgICAgIFZBUlM6ICd2YXJzJyxcbiAgICAgICAgRklMRTogJ2ZpbGUnLFxuICAgICAgICBTSVpFOiAnc2l6ZScsXG4gICAgICAgIFZBUklBVElPTjogJ3ZhcmlhdGlvbicsXG4gICAgICAgIEhBU0g6ICdoYXNoJyxcbiAgICAgICAgRU1BSUw6ICdlbWFpbCcsXG4gICAgICAgIFZBUklBQkxFUzogJ3ZhcnMnLFxuICAgICAgICBQQVJBTVM6ICdwYXJhbXMnLFxuICAgICAgICBJTkNMVURFX0RFRkFVTFRTOiAnaW5jbHVkZURlZmF1bHRzJyxcbiAgICAgICAgSU5DTFVERV9WQVJJQU5UX0RFQlVHX0lORk86ICdpbmNsdWRlVmFyaWFudERlYnVnSW5mbycsXG4gICAgICAgIFdFQl9QVVNIX1NVQlNDUklQVElPTjogJ3dlYlB1c2hTdWJzY3JpcHRpb24nXG4gICAgfSxcbiAgICBLRVlTOiB7XG4gICAgICAgIElTX1JFR0lTVEVSRUQ6ICdpc1JlZ2lzdGVyZWQnLFxuICAgICAgICBMQVRFU1RfVkVSU0lPTjogJ2xhdGVzdFZlcnNpb24nLFxuICAgICAgICBWQVJTOiAndmFycycsXG4gICAgICAgIFZBUklBTlRTOiAndmFyaWFudHMnLFxuICAgICAgICBWQVJJQU5UX0RFQlVHX0lORk86ICd2YXJpYW50RGVidWdJbmZvJyxcbiAgICAgICAgQUNUSU9OX01FVEFEQVRBOiAnYWN0aW9uTWV0YWRhdGEnLFxuICAgICAgICBUT0tFTjogJ3Rva2VuJ1xuICAgIH0sXG4gICAgREVGQVVMVF9LRVlTOiB7XG4gICAgICAgIENPVU5UOiAnX19sZWFucGx1bV91bnN5bmNlZCcsXG4gICAgICAgIElURU06ICdfX2xlYW5wbHVtX3Vuc3luY2VkXycsXG4gICAgICAgIFZBUklBQkxFUzogJ19fbGVhbnBsdW1fdmFyaWFibGVzJyxcbiAgICAgICAgVkFSSUFOVFM6ICdfX2xlYW5wbHVtX3ZhcmlhbnRzJyxcbiAgICAgICAgVkFSSUFOVF9ERUJVR19JTkZPOiAnX19sZWFucGx1bV92YXJpYW50X2RlYnVnX2luZm8nLFxuICAgICAgICBBQ1RJT05fTUVUQURBVEE6ICdfX2xlYW5wbHVtX2FjdGlvbl9tZXRhZGF0YScsXG4gICAgICAgIFRPS0VOOiAnX19sZWFucGx1bV90b2tlbicsXG4gICAgICAgIERFVklDRV9JRDogJ19fbGVhbnBsdW1fZGV2aWNlX2lkJyxcbiAgICAgICAgVVNFUl9JRDogJ19fbGVhbnBsdW1fdXNlcl9pZCcsXG4gICAgICAgIFBVU0hfU1VCU0NSSVBUSU9OOiAnX19sZWFucGx1bV9wdXNoX3N1YnNjcmlwdGlvbidcbiAgICB9LFxuICAgIFZBTFVFUzoge1xuICAgICAgICBERVRFQ1Q6ICcoZGV0ZWN0KSdcbiAgICB9XG59O1xuIiwidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDIwIExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlXG4gKlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbi8qKlxuICogTGVhbnBsdW0gQXJnc0J1aWxkZXIsIHVzZSB0byBjb25zdHJ1Y3QgcmVxdWVzdCBwYXlsb2FkLlxuICovXG52YXIgQXJnc0J1aWxkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGVtcHR5IHJlcXVlc3QgYXJndW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gQXJnc0J1aWxkZXIoKSB7XG4gICAgICAgIHRoaXMuYXJnU3RyaW5nID0gJyc7XG4gICAgICAgIHRoaXMuYXJnVmFsdWVzID0ge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBnaXZlbiBrZXksIHZhbHVlIHRvIHRoZSBwYXlsb2FkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBmb3IgdGhlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW59IHZhbHVlIFRoZSB2YWx1ZSBmb3IgZ2l2ZW4ga2V5LlxuICAgICAqIEByZXR1cm4ge0FyZ3NCdWlsZGVyfSBSZXR1cm5zIGFuIG9iamVjdCBvZiBBcmdzQnVpbGRlci5cbiAgICAgKi9cbiAgICBBcmdzQnVpbGRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFyZ1N0cmluZykge1xuICAgICAgICAgICAgdGhpcy5hcmdTdHJpbmcgKz0gJyYnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXJnU3RyaW5nICs9IGtleSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgICAgdGhpcy5hcmdWYWx1ZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENhY2hlIHRoZSBnaXZlbiBib2R5LlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gW2JvZHldIEEgZ2l2ZW4gYm9keS5cbiAgICAgKiBAcmV0dXJuIHtBcmdzQnVpbGRlcnxTdHJpbmd9IFJldHVybnMgQXJnc0J1aWxkZXIgaWYgYm9keSBnaXZlbiwgZWxzZSB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuXG4gICAgICovXG4gICAgQXJnc0J1aWxkZXIucHJvdG90eXBlLmJvZHkgPSBmdW5jdGlvbiAoYm9keSkge1xuICAgICAgICBpZiAoYm9keSkge1xuICAgICAgICAgICAgdGhpcy5fYm9keSA9IGJvZHk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYm9keTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byBhdHRhY2ggZ2l2ZW4gYXBwSWQgYW5kIGFwcEtleSB0byByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gYXBwSWQgVGhlIGFwcElkIHRvIGF0dGFjaC5cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGNsaWVudEtleSBUaGUgYXBwS2V5IHRvIGF0dGFjaC5cbiAgICAgKiBAcmV0dXJuIHtBcmdzQnVpbGRlcn0gUmV0dXJucyBhbiBvYmplY3Qgb2YgQXJnc0J1aWxkZXIuXG4gICAgICovXG4gICAgQXJnc0J1aWxkZXIucHJvdG90eXBlLmF0dGFjaEFwaUtleXMgPSBmdW5jdGlvbiAoYXBwSWQsIGNsaWVudEtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQVBQX0lELCBhcHBJZClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQ0xJRU5ULCBDb25zdGFudHNfMS5kZWZhdWx0LkNMSUVOVClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQ0xJRU5UX0tFWSwgY2xpZW50S2V5KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gQXJndW1lbnRzIHN0cmluZy5cbiAgICAgKi9cbiAgICBBcmdzQnVpbGRlci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFyZ1N0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgYXJndW1lbnQgdmFsdWVzLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGFyZ3VtZW50IHZhbHVlcy5cbiAgICAgKi9cbiAgICBBcmdzQnVpbGRlci5wcm90b3R5cGUuYnVpbGREaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcmdWYWx1ZXM7XG4gICAgfTtcbiAgICByZXR1cm4gQXJnc0J1aWxkZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQXJnc0J1aWxkZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDIwIExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbG9jYWxTdG9yYWdlRW5hYmxlZDtcbnZhciBhbHRlcm5hdGVMb2NhbFN0b3JhZ2UgPSB7fTtcbnZhciBMb2NhbFN0b3JhZ2VNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExvY2FsU3RvcmFnZU1hbmFnZXIoKSB7XG4gICAgfVxuICAgIExvY2FsU3RvcmFnZU1hbmFnZXIuZ2V0RnJvbUxvY2FsU3RvcmFnZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZUVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gYWx0ZXJuYXRlTG9jYWxTdG9yYWdlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZVtrZXldO1xuICAgIH07XG4gICAgTG9jYWxTdG9yYWdlTWFuYWdlci5zYXZlVG9Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAobG9jYWxTdG9yYWdlRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGFsdGVybmF0ZUxvY2FsU3RvcmFnZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGFsdGVybmF0ZUxvY2FsU3RvcmFnZVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExvY2FsU3RvcmFnZU1hbmFnZXIucmVtb3ZlRnJvbUxvY2FsU3RvcmFnZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZUVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgYWx0ZXJuYXRlTG9jYWxTdG9yYWdlW2tleV07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGRlbGV0ZSBhbHRlcm5hdGVMb2NhbFN0b3JhZ2Vba2V5XTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIExvY2FsU3RvcmFnZU1hbmFnZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTG9jYWxTdG9yYWdlTWFuYWdlcjtcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEFqYXggZnVuY3Rpb25zIGZyb206XG4gKlxuICogUGFyc2UgSmF2YVNjcmlwdCBTREtcbiAqIFZlcnNpb246IDEuMS41XG4gKiBCdWlsdDogTW9uIE9jdCAwMSAyMDEyIDE3OjU3OjEzXG4gKiBodHRwOi8vcGFyc2UuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMTIgUGFyc2UsIEluYy5cbiAqIFRoZSBQYXJzZSBKYXZhU2NyaXB0IFNESyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HXG4gKiBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSXG4gKiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcbnZhciByZXF1ZXN0UXVldWUgPSBbXTtcbnZhciBuZXR3b3JrVGltZW91dFNlY29uZHMgPSAxMDtcbnZhciBOZXR3b3JrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5ldHdvcmsoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG5ldHdvcmsgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyBUaGUgdGltZW91dCBpbiBzZWNvbmRzLlxuICAgICAqL1xuICAgIE5ldHdvcmsuc2V0TmV0d29ya1RpbWVvdXQgPSBmdW5jdGlvbiAoc2Vjb25kcykge1xuICAgICAgICBuZXR3b3JrVGltZW91dFNlY29uZHMgPSBzZWNvbmRzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWFrZSBhbiBhamF4IHJlcXVlc3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBUaGUgaHR0cCBtZXRob2QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgdXJsIHRvIG9wZW4uXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ8QmxvYnxEb2N1bWVudHxGb3JtRGF0YX0gZGF0YSBUaGUgZGF0YSB0byBiZSBzZW50IGluIGJvZHkuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gc3VjY2VzcyBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBzdWNjZXNzLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGVycm9yIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGVycm9yLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcXVldWVkIFdoZXRoZXIgdGhlIHJlcXVlc3Qgc2hvdWxkIGJlIHF1ZXVlZCBvciBpbW1lZGlhdGVseSBzZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BsYWluVGV4dF0gV2hldGhlciB0aGUgcmVzcG9uc2Ugc2hvdWxkIGJlIHJldHVybmVkIGFzIHBsYWluIHRleHQgb3IganNvbi5cbiAgICAgKiBAcmV0dXJuIHsqfVxuICAgICAqL1xuICAgIE5ldHdvcmsuYWpheCA9IGZ1bmN0aW9uIChtZXRob2QsIHVybCwgZGF0YSwgc3VjY2VzcywgZXJyb3IsIHF1ZXVlZCwgcGxhaW5UZXh0KSB7XG4gICAgICAgIGlmIChxdWV1ZWQpIHtcbiAgICAgICAgICAgIGlmIChOZXR3b3JrLnJ1bm5pbmdSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICAgICAgICAgIHJldHVybiBOZXR3b3JrLmVucXVldWVSZXF1ZXN0KGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBOZXR3b3JrLnJ1bm5pbmdSZXF1ZXN0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvKiogQG5hbWVzcGFjZSBYRG9tYWluUmVxdWVzdCAqKi9cbiAgICAgICAgLyoqIEBuYW1lc3BhY2UgbG9jYXRpb24gKiovXG4gICAgICAgIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAobG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwOicgJiYgdXJsLmluZGV4T2YoJ2h0dHBzOicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gXCJodHRwOlwiICsgdXJsLnN1YnN0cmluZyg2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgICAgIHJldHVybiBhcHBseS5jYWxsKE5ldHdvcmsuYWpheElFOCwgbnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciByZXNwb25zZV8xO1xuICAgICAgICAgICAgICAgIHZhciByYW5DYWxsYmFjayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChwbGFpblRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VfMSA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VfMSA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcihudWxsLCB4aHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFuQ2FsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmFuQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MocmVzcG9uc2VfMSwgeGhyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcihyZXNwb25zZV8xLCB4aHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChxdWV1ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgTmV0d29yay5ydW5uaW5nUmVxdWVzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBOZXR3b3JrLmRlcXVldWVSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9wbGFpbicpOyAvLyBBdm9pZCBwcmUtZmxpZ2h0LlxuICAgICAgICB4aHIuc2VuZChkYXRhKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWhhbmRsZWQpIHtcbiAgICAgICAgICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgbmV0d29ya1RpbWVvdXRTZWNvbmRzICogMTAwMCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNYWtlIGFuIGFqYXggcmVxdWVzdCBmb3IgSUU4LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgVGhlIGh0dHAgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHVybCB0byBvcGVuLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5QnVmZmVyfEJsb2J8RG9jdW1lbnR8Rm9ybURhdGF9IGRhdGEgVGhlIGRhdGEgdG8gYmUgc2VudCBpbiBib2R5LlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1Y2Nlc3MgQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gc3VjY2Vzcy5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBlcnJvciBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBlcnJvci5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHF1ZXVlZCBXaGV0aGVyIHRoZSByZXF1ZXN0IHNob3VsZCBiZSBxdWV1ZWQgb3IgaW1tZWRpYXRlbHkgc2VudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHBsYWluVGV4dCBXaGV0aGVyIHRoZSByZXNwb25zZSBzaG91bGQgYmUgcmV0dXJuZWQgYXMgcGxhaW4gdGV4dCBvciBqc29uLlxuICAgICAqL1xuICAgIE5ldHdvcmsuYWpheElFOCA9IGZ1bmN0aW9uIChtZXRob2QsIHVybCwgZGF0YSwgc3VjY2VzcywgZXJyb3IsIHF1ZXVlZCwgcGxhaW5UZXh0KSB7XG4gICAgICAgIHZhciB4ZHIgPSBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICAgICAgeGRyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHZhciByYW5DYWxsYmFjayA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHBsYWluVGV4dCkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0geGRyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4ZHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcihudWxsLCB4ZHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgcmFuQ2FsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcmFuQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MocmVzcG9uc2UsIHhkcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChxdWV1ZWQpIHtcbiAgICAgICAgICAgICAgICBOZXR3b3JrLnJ1bm5pbmdSZXF1ZXN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgTmV0d29yay5kZXF1ZXVlUmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4ZHIub25lcnJvciA9IHhkci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IobnVsbCwgeGRyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIGlmIChxdWV1ZWQpIHtcbiAgICAgICAgICAgICAgICBOZXR3b3JrLnJ1bm5pbmdSZXF1ZXN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgTmV0d29yay5kZXF1ZXVlUmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4ZHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgfTtcbiAgICAgICAgeGRyLm9wZW4obWV0aG9kLCB1cmwpO1xuICAgICAgICB4ZHIudGltZW91dCA9IG5ldHdvcmtUaW1lb3V0U2Vjb25kcyAqIDEwMDA7XG4gICAgICAgIHhkci5zZW5kKGRhdGEpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgcmVxdWVzdCB0byB0aGUgcmVxdWVzdCBxdWV1ZS5cbiAgICAgKiBAcGFyYW0ge0FyZ3VtZW50c30gcmVxdWVzdEFyZ3VtZW50cyBUaGUgcmVxdWVzdCBhcmd1bWVudHMgZnJvbSB0aGUgaW5pdGlhbCBtZXRob2QgY2FsbC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIE5ldHdvcmsuZW5xdWV1ZVJlcXVlc3QgPSBmdW5jdGlvbiAocmVxdWVzdEFyZ3VtZW50cykge1xuICAgICAgICByZXF1ZXN0UXVldWUucHVzaChyZXF1ZXN0QXJndW1lbnRzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHJlcXVlc3QgZnJvbSB0aGUgcmVxdWVzdCBxdWV1ZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIE5ldHdvcmsuZGVxdWV1ZVJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gcmVxdWVzdFF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGlmIChhcmdzKSB7XG4gICAgICAgICAgICBhcHBseS5jYWxsKE5ldHdvcmsuYWpheCwgbnVsbCwgYXJncyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE5ldHdvcmsucnVubmluZ1JlcXVlc3QgPSBmYWxzZTtcbiAgICByZXR1cm4gTmV0d29yaztcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBOZXR3b3JrO1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gKiBlcXVpdmFsZW50LlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBvYmplY3QgPT09IG90aGVyO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFcXVhbDtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQXJyYXlzO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCJ2YXIgTGVhbnBsdW0gPSByZXF1aXJlKCcuLi9MZWFucGx1bS50cycpO1xubW9kdWxlLmV4cG9ydHMgPSBMZWFucGx1bS5kZWZhdWx0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICpcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZVxuICpcbiAqL1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBBcmdzQnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0FyZ3NCdWlsZGVyXCIpKTtcbnZhciBCcm93c2VyRGV0ZWN0b3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Ccm93c2VyRGV0ZWN0b3JcIikpO1xudmFyIENvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnN0YW50c1wiKSk7XG52YXIgSW50ZXJuYWxTdGF0ZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0ludGVybmFsU3RhdGVcIikpO1xudmFyIExlYW5wbHVtUmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0xlYW5wbHVtUmVxdWVzdFwiKSk7XG52YXIgTGVhbnBsdW1Tb2NrZXRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9MZWFucGx1bVNvY2tldFwiKSk7XG52YXIgTG9jYWxTdG9yYWdlTWFuYWdlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0xvY2FsU3RvcmFnZU1hbmFnZXJcIikpO1xudmFyIFB1c2hNYW5hZ2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUHVzaE1hbmFnZXJcIikpO1xudmFyIFZhckNhY2hlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVmFyQ2FjaGVcIikpO1xudmFyIF9icm93c2VyRGV0ZWN0b3IgPSBuZXcgQnJvd3NlckRldGVjdG9yXzEuZGVmYXVsdCh3aW5kb3cpO1xudmFyIExlYW5wbHVtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExlYW5wbHVtKCkge1xuICAgIH1cbiAgICBMZWFucGx1bS5zZXRBcGlQYXRoID0gZnVuY3Rpb24gKGFwaVBhdGgpIHtcbiAgICAgICAgaWYgKCFMZWFucGx1bS5fbHBSZXF1ZXN0LmFwaVBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBMZWFucGx1bS5fbHBSZXF1ZXN0LmFwaVBhdGggPSBhcGlQYXRoO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0RW1haWwgPSBmdW5jdGlvbiAoZW1haWwpIHtcbiAgICAgICAgTGVhbnBsdW0uX2VtYWlsID0gZW1haWw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBuZXR3b3JrIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHMgVGhlIHRpbWVvdXQgaW4gc2Vjb25kcy5cbiAgICAgKi9cbiAgICBMZWFucGx1bS5zZXROZXR3b3JrVGltZW91dCA9IGZ1bmN0aW9uIChzZWNvbmRzKSB7XG4gICAgICAgIExlYW5wbHVtLl9scFJlcXVlc3Quc2V0TmV0d29ya1RpbWVvdXQoc2Vjb25kcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRWYXJpYW50RGVidWdJbmZvRW5hYmxlZCA9IGZ1bmN0aW9uICh2YXJpYW50RGVidWdJbmZvRW5hYmxlZCkge1xuICAgICAgICBMZWFucGx1bS5faW50ZXJuYWxTdGF0ZS52YXJpYW50RGVidWdJbmZvRW5hYmxlZCA9IHZhcmlhbnREZWJ1Z0luZm9FbmFibGVkO1xuICAgIH07XG4gICAgTGVhbnBsdW0uZ2V0VmFyaWFudERlYnVnSW5mbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIExlYW5wbHVtLl92YXJDYWNoZS5nZXRWYXJpYW50RGVidWdJbmZvKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRBcHBJZEZvckRldmVsb3BtZW50TW9kZSA9IGZ1bmN0aW9uIChhcHBJZCwgYWNjZXNzS2V5KSB7XG4gICAgICAgIExlYW5wbHVtLl9scFJlcXVlc3QuYXBwSWQgPSBhcHBJZDtcbiAgICAgICAgTGVhbnBsdW0uX2xwUmVxdWVzdC5jbGllbnRLZXkgPSBhY2Nlc3NLZXk7XG4gICAgICAgIExlYW5wbHVtLl9pbnRlcm5hbFN0YXRlLmRldk1vZGUgPSB0cnVlO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0QXBwSWRGb3JQcm9kdWN0aW9uTW9kZSA9IGZ1bmN0aW9uIChhcHBJZCwgYWNjZXNzS2V5KSB7XG4gICAgICAgIExlYW5wbHVtLl9scFJlcXVlc3QuYXBwSWQgPSBhcHBJZDtcbiAgICAgICAgTGVhbnBsdW0uX2xwUmVxdWVzdC5jbGllbnRLZXkgPSBhY2Nlc3NLZXk7XG4gICAgICAgIExlYW5wbHVtLl9pbnRlcm5hbFN0YXRlLmRldk1vZGUgPSBmYWxzZTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldFNvY2tldEhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICAgICAgICBMZWFucGx1bS5fbHBTb2NrZXQuc2V0U29ja2V0SG9zdChob3N0KTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldERldmljZUlkID0gZnVuY3Rpb24gKGRldmljZUlkKSB7XG4gICAgICAgIExlYW5wbHVtLl9scFJlcXVlc3QuZGV2aWNlSWQgPSBkZXZpY2VJZDtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldEFwcFZlcnNpb24gPSBmdW5jdGlvbiAodmVyc2lvbk5hbWUpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwUmVxdWVzdC52ZXJzaW9uTmFtZSA9IHZlcnNpb25OYW1lO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0RGV2aWNlTmFtZSA9IGZ1bmN0aW9uIChkZXZpY2VOYW1lKSB7XG4gICAgICAgIExlYW5wbHVtLl9kZXZpY2VOYW1lID0gZGV2aWNlTmFtZTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldERldmljZU1vZGVsID0gZnVuY3Rpb24gKGRldmljZU1vZGVsKSB7XG4gICAgICAgIExlYW5wbHVtLl9kZXZpY2VNb2RlbCA9IGRldmljZU1vZGVsO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0UmVxdWVzdEJhdGNoaW5nID0gZnVuY3Rpb24gKGJhdGNoRW5hYmxlZCwgY29vbGRvd25TZWNvbmRzKSB7XG4gICAgICAgIExlYW5wbHVtLl9scFJlcXVlc3QuYmF0Y2hFbmFibGVkID0gYmF0Y2hFbmFibGVkO1xuICAgICAgICBMZWFucGx1bS5fbHBSZXF1ZXN0LmJhdGNoQ29vbGRvd24gPSBjb29sZG93blNlY29uZHM7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRTeXN0ZW1OYW1lID0gZnVuY3Rpb24gKHN5c3RlbU5hbWUpIHtcbiAgICAgICAgTGVhbnBsdW0uX3N5c3RlbU5hbWUgPSBzeXN0ZW1OYW1lO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0U3lzdGVtVmVyc2lvbiA9IGZ1bmN0aW9uIChzeXN0ZW1WZXJzaW9uKSB7XG4gICAgICAgIExlYW5wbHVtLl9zeXN0ZW1WZXJzaW9uID0gc3lzdGVtVmVyc2lvbjtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldFZhcmlhYmxlcyA9IGZ1bmN0aW9uICh2YXJpYWJsZXMpIHtcbiAgICAgICAgTGVhbnBsdW0uX3ZhckNhY2hlLnNldFZhcmlhYmxlcyh2YXJpYWJsZXMpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uZ2V0VmFyaWFibGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTGVhbnBsdW0uX3ZhckNhY2hlLmdldFZhcmlhYmxlcygpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uZ2V0VmFyaWFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN1cnJlbnQgPSBMZWFucGx1bS5nZXRWYXJpYWJsZXMoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudFthcmdzW2ldXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICB9O1xuICAgIExlYW5wbHVtLmdldFZhcmlhbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTGVhbnBsdW0uX3ZhckNhY2hlLnZhcmlhbnRzIHx8IFtdO1xuICAgIH07XG4gICAgTGVhbnBsdW0uYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICBMZWFucGx1bS5faW50ZXJuYWxTdGF0ZS5hZGRTdGFydFJlc3BvbnNlSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnJlbW92ZVN0YXJ0UmVzcG9uc2VIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgTGVhbnBsdW0uX2ludGVybmFsU3RhdGUucmVtb3ZlU3RhcnRSZXNwb25zZUhhbmRsZXIoaGFuZGxlcik7XG4gICAgfTtcbiAgICBMZWFucGx1bS5fX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIExlYW5wbHVtLl9scFJlcXVlc3QgPSBuZXcgTGVhbnBsdW1SZXF1ZXN0XzEuZGVmYXVsdCgpO1xuICAgICAgICBMZWFucGx1bS5faW50ZXJuYWxTdGF0ZSA9IG5ldyBJbnRlcm5hbFN0YXRlXzEuZGVmYXVsdCgpO1xuICAgICAgICBMZWFucGx1bS5fbHBTb2NrZXQgPSBuZXcgTGVhbnBsdW1Tb2NrZXRfMS5kZWZhdWx0KCk7XG4gICAgICAgIExlYW5wbHVtLl9wdXNoTWFuYWdlciA9IG5ldyBQdXNoTWFuYWdlcl8xLmRlZmF1bHQoTGVhbnBsdW0uY3JlYXRlUmVxdWVzdCk7XG4gICAgICAgIExlYW5wbHVtLl92YXJDYWNoZSA9IG5ldyBWYXJDYWNoZV8xLmRlZmF1bHQoTGVhbnBsdW0uY3JlYXRlUmVxdWVzdCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5hZGRWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIExlYW5wbHVtLl92YXJDYWNoZS5hZGRWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnJlbW92ZVZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgTGVhbnBsdW0uX3ZhckNhY2hlLnJlbW92ZVZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyKGhhbmRsZXIpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uZm9yY2VDb250ZW50VXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklOQ0xVREVfREVGQVVMVFMsIGZhbHNlKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5JTkNMVURFX1ZBUklBTlRfREVCVUdfSU5GTywgTGVhbnBsdW0uX2ludGVybmFsU3RhdGUudmFyaWFudERlYnVnSW5mb0VuYWJsZWQpO1xuICAgICAgICBMZWFucGx1bS5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5HRVRfVkFSUywgYXJncywge1xuICAgICAgICAgICAgcXVldWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICByZXNwb25zZTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdldFZhcnNSZXNwb25zZSA9IExlYW5wbHVtLl9scFJlcXVlc3QuZ2V0TGFzdFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNTdWNjZXNzID0gTGVhbnBsdW0uX2xwUmVxdWVzdC5pc1Jlc3BvbnNlU3VjY2VzcyhnZXRWYXJzUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGlmIChpc1N1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgTGVhbnBsdW0uX3ZhckNhY2hlLmFwcGx5RGlmZnMoZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJTXSwgZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJJQU5UU10sIGdldFZhcnNSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuQUNUSU9OX01FVEFEQVRBXSk7XG4gICAgICAgICAgICAgICAgICAgIExlYW5wbHVtLl92YXJDYWNoZS5zZXRWYXJpYW50RGVidWdJbmZvKGdldFZhcnNSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuVkFSSUFOVF9ERUJVR19JTkZPXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhpc1N1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc3RhcnQgPSBmdW5jdGlvbiAodXNlcklkLCB1c2VyQXR0cmlidXRlcywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1c2VySWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdXNlcklkO1xuICAgICAgICAgICAgdXNlckF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgICAgIHVzZXJJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHVzZXJJZCA9PT0gJ29iamVjdCcgJiYgdXNlcklkICE9PSBudWxsICYmIHVzZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHVzZXJBdHRyaWJ1dGVzO1xuICAgICAgICAgICAgdXNlckF0dHJpYnV0ZXMgPSB1c2VySWQ7XG4gICAgICAgICAgICB1c2VySWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB1c2VyQXR0cmlidXRlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1c2VyQXR0cmlidXRlcztcbiAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgTGVhbnBsdW0uX2xwUmVxdWVzdC51c2VySWQgPSB1c2VySWQ7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgTGVhbnBsdW0uYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIExlYW5wbHVtLl92YXJDYWNoZS5vblVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIExlYW5wbHVtLl92YXJDYWNoZS50cmlnZ2VyVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXJzKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlVTRVJfQVRUUklCVVRFUywgSlNPTi5zdHJpbmdpZnkodXNlckF0dHJpYnV0ZXMpKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5DT1VOVFJZLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlJFR0lPTiwgQ29uc3RhbnRzXzEuZGVmYXVsdC5WQUxVRVMuREVURUNUKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5DSVRZLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkxPQ0FUSU9OLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlNZU1RFTV9OQU1FLCBMZWFucGx1bS5fc3lzdGVtTmFtZSB8fCBfYnJvd3NlckRldGVjdG9yLk9TKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5TWVNURU1fVkVSU0lPTiwgKExlYW5wbHVtLl9zeXN0ZW1WZXJzaW9uIHx8ICcnKS50b1N0cmluZygpKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5CUk9XU0VSX05BTUUsIF9icm93c2VyRGV0ZWN0b3IuYnJvd3NlcilcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQlJPV1NFUl9WRVJTSU9OLCBfYnJvd3NlckRldGVjdG9yLnZlcnNpb24udG9TdHJpbmcoKSlcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuTE9DQUxFLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkRFVklDRV9OQU1FLCBMZWFucGx1bS5fZGV2aWNlTmFtZSB8fFxuICAgICAgICAgICAgX2Jyb3dzZXJEZXRlY3Rvci5icm93c2VyICsgXCIgXCIgKyBfYnJvd3NlckRldGVjdG9yLnZlcnNpb24pXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkRFVklDRV9NT0RFTCwgTGVhbnBsdW0uX2RldmljZU1vZGVsIHx8ICdXZWIgQnJvd3NlcicpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklOQ0xVREVfREVGQVVMVFMsIGZhbHNlKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5JTkNMVURFX1ZBUklBTlRfREVCVUdfSU5GTywgTGVhbnBsdW0uX2ludGVybmFsU3RhdGUudmFyaWFudERlYnVnSW5mb0VuYWJsZWQpO1xuICAgICAgICAvLyBJc3N1ZSByZXF1ZXN0LlxuICAgICAgICAvLyBub2luc3BlY3Rpb24gQW5ub3RhdG9yXG4gICAgICAgIExlYW5wbHVtLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlNUQVJULCBhcmdzLCB7XG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWUsXG4gICAgICAgICAgICBzZW5kTm93OiB0cnVlLFxuICAgICAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIExlYW5wbHVtLl9pbnRlcm5hbFN0YXRlLmhhc1N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydFJlc3BvbnNlID0gTGVhbnBsdW0uX2xwUmVxdWVzdC5nZXRMYXN0UmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGlmIChMZWFucGx1bS5fbHBSZXF1ZXN0LmlzUmVzcG9uc2VTdWNjZXNzKHN0YXJ0UmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIExlYW5wbHVtLl9pbnRlcm5hbFN0YXRlLnN0YXJ0U3VjY2Vzc2Z1bCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChMZWFucGx1bS5faW50ZXJuYWxTdGF0ZS5kZXZNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0ZXN0VmVyc2lvbiA9IHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLkxBVEVTVF9WRVJTSU9OXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXRlc3RWZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBIG5ld2VyIHZlcnNpb24gb2YgTGVhbnBsdW0sIFwiICsgbGF0ZXN0VmVyc2lvbiArIFwiLCBpcyBhdmFpbGFibGUuXFxuVXNlIFxcXCJucG0gdXBkYXRlIGxlYW5wbHVtLXNka1xcXCIgb3IgZ28gdG8gaHR0cHM6Ly9kb2NzLmxlYW5wbHVtLmNvbS9yZWZlcmVuY2UjamF2YXNjcmlwdC1zZXR1cCB0byBkb3dubG9hZCBpdC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBMZWFucGx1bS5jb25uZWN0U29ja2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgTGVhbnBsdW0uX3ZhckNhY2hlLmFwcGx5RGlmZnMoc3RhcnRSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuVkFSU10sIHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlZBUklBTlRTXSwgc3RhcnRSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuQUNUSU9OX01FVEFEQVRBXSk7XG4gICAgICAgICAgICAgICAgICAgIExlYW5wbHVtLl92YXJDYWNoZS5zZXRWYXJpYW50RGVidWdJbmZvKHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlZBUklBTlRfREVCVUdfSU5GT10pO1xuICAgICAgICAgICAgICAgICAgICBMZWFucGx1bS5fdmFyQ2FjaGUudG9rZW4gPSBzdGFydFJlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5UT0tFTl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBMZWFucGx1bS5faW50ZXJuYWxTdGF0ZS5zdGFydFN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgTGVhbnBsdW0uX3ZhckNhY2hlLmxvYWREaWZmcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBMZWFucGx1bS5faW50ZXJuYWxTdGF0ZS50cmlnZ2VyU3RhcnRIYW5kbGVycygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnN0YXJ0RnJvbUNhY2hlID0gZnVuY3Rpb24gKHVzZXJJZCwgdXNlckF0dHJpYnV0ZXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXNlcklkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHVzZXJJZDtcbiAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgICB1c2VySWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB1c2VySWQgPT09ICdvYmplY3QnICYmIHVzZXJJZCAhPT0gbnVsbCAmJiB1c2VySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1c2VyQXR0cmlidXRlcztcbiAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0gdXNlcklkO1xuICAgICAgICAgICAgdXNlcklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdXNlckF0dHJpYnV0ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdXNlckF0dHJpYnV0ZXM7XG4gICAgICAgICAgICB1c2VyQXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIExlYW5wbHVtLl9scFJlcXVlc3QudXNlcklkID0gdXNlcklkO1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIExlYW5wbHVtLmFkZFN0YXJ0UmVzcG9uc2VIYW5kbGVyKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBMZWFucGx1bS5faW50ZXJuYWxTdGF0ZS5oYXNTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgTGVhbnBsdW0uX2ludGVybmFsU3RhdGUuc3RhcnRTdWNjZXNzZnVsID0gdHJ1ZTtcbiAgICAgICAgaWYgKExlYW5wbHVtLl9pbnRlcm5hbFN0YXRlLmRldk1vZGUpIHtcbiAgICAgICAgICAgIExlYW5wbHVtLmNvbm5lY3RTb2NrZXQoKTtcbiAgICAgICAgfVxuICAgICAgICBMZWFucGx1bS5fdmFyQ2FjaGUubG9hZERpZmZzKCk7XG4gICAgICAgIExlYW5wbHVtLl9pbnRlcm5hbFN0YXRlLnRyaWdnZXJTdGFydEhhbmRsZXJzKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gQW5ub3RhdG9yXG4gICAgICAgIExlYW5wbHVtLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlNUT1AsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZSxcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnBhdXNlU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEFubm90YXRvclxuICAgICAgICBMZWFucGx1bS5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5QQVVTRV9TRVNTSU9OLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5yZXN1bWVTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gQW5ub3RhdG9yXG4gICAgICAgIExlYW5wbHVtLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlJFU1VNRV9TRVNTSU9OLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5wYXVzZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gQW5ub3RhdG9yXG4gICAgICAgIExlYW5wbHVtLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlBBVVNFX1NUQVRFLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnJlc3VtZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gQW5ub3RhdG9yXG4gICAgICAgIExlYW5wbHVtLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlJFU1VNRV9TVEFURSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRVc2VySWQgPSBmdW5jdGlvbiAodXNlcklkKSB7XG4gICAgICAgIExlYW5wbHVtLnNldFVzZXJBdHRyaWJ1dGVzKHVzZXJJZCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRVc2VyQXR0cmlidXRlcyA9IGZ1bmN0aW9uICh1c2VySWQsIHVzZXJBdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmICh1c2VyQXR0cmlidXRlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHVzZXJJZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB1c2VyQXR0cmlidXRlcyA9IHVzZXJJZDtcbiAgICAgICAgICAgICAgICB1c2VySWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdXNlcklkICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMZWFucGx1bTogc2V0VXNlckF0dHJpYnV0ZXMgZXhwZWN0cyBhIHN0cmluZyBvciBhbiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ29iamVjdCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5VU0VSX0FUVFJJQlVURVMsIHVzZXJBdHRyaWJ1dGVzID8gSlNPTi5zdHJpbmdpZnkodXNlckF0dHJpYnV0ZXMpIDogdW5kZWZpbmVkKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5ORVdfVVNFUl9JRCwgdXNlcklkKTtcbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEFubm90YXRvclxuICAgICAgICBMZWFucGx1bS5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5TRVRfVVNFUl9BVFRSSUJVVEVTLCBhcmdzLCB7XG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh1c2VySWQpIHtcbiAgICAgICAgICAgIExlYW5wbHVtLl9scFJlcXVlc3QudXNlcklkID0gdXNlcklkO1xuICAgICAgICAgICAgTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuc2F2ZVRvTG9jYWxTdG9yYWdlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlVTRVJfSUQsIExlYW5wbHVtLl9scFJlcXVlc3QudXNlcklkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGVhbnBsdW0udHJhY2sgPSBmdW5jdGlvbiAoZXZlbnQsIHZhbHVlLCBpbmZvLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyYW1zID0gdmFsdWU7XG4gICAgICAgICAgICBpbmZvID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcGFyYW1zID0gaW5mbztcbiAgICAgICAgICAgIGluZm8gPSB2YWx1ZTtcbiAgICAgICAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbmZvID09PSAnb2JqZWN0JyAmJiBpbmZvICE9PSBudWxsICYmIGluZm8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyYW1zID0gaW5mbztcbiAgICAgICAgICAgIGluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuRVZFTlQsIGV2ZW50KVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5WQUxVRSwgdmFsdWUgfHwgMC4wKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5JTkZPLCBpbmZvKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5QQVJBTVMsIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gQW5ub3RhdG9yXG4gICAgICAgIExlYW5wbHVtLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlRSQUNLLCBhcmdzLCB7XG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5hZHZhbmNlVG8gPSBmdW5jdGlvbiAoc3RhdGUsIGluZm8sIHBhcmFtcykge1xuICAgICAgICBpZiAodHlwZW9mIGluZm8gPT09ICdvYmplY3QnICYmIGluZm8gIT09IG51bGwgJiYgaW5mbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXJhbXMgPSBpbmZvO1xuICAgICAgICAgICAgaW5mbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5TVEFURSwgc3RhdGUpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklORk8sIGluZm8pXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlBBUkFNUywgSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG4gICAgICAgIExlYW5wbHVtLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLkFEVkFOQ0UsIGFyZ3MsIHtcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgd2ViIHB1c2ggaXMgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgc3VwcG9ydGVkLCBlbHNlIGZhbHNlLlxuICAgICAqL1xuICAgIExlYW5wbHVtLmlzV2ViUHVzaFN1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIExlYW5wbHVtLl9wdXNoTWFuYWdlci5pc1dlYlB1c2hTdXBwb3J0ZWQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgd2ViIHB1c2ggaXMgc3Vic2NyaWJlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlcyBpZiB0cnVlLCByZWplY3RzIGlmIGZhbHNlLlxuICAgICAqL1xuICAgIExlYW5wbHVtLmlzV2ViUHVzaFN1YnNjcmliZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBMZWFucGx1bS5fcHVzaE1hbmFnZXIuaXNXZWJQdXNoU3Vic2NyaWJlZCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIGJyb3dzZXIgZm9yIHdlYiBwdXNoLlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gICBzZXJ2aWNlV29ya2VyVXJsIFRoZSB1cmwgb24geW91ciBzZXJ2ZXIgdGhhdCBob3N0cyB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvc3cubWluLmpzIHNlcnZpY2Ugd29ya2VyIGpzIGZpbGUuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICAgICAgICAgICAgUmVzb2x2ZXMgaWYgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIGZhaWxzLlxuICAgICAqL1xuICAgIExlYW5wbHVtLnJlZ2lzdGVyRm9yV2ViUHVzaCA9IGZ1bmN0aW9uIChzZXJ2aWNlV29ya2VyVXJsKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBpZiAoTGVhbnBsdW0uX3B1c2hNYW5hZ2VyLmlzV2ViUHVzaFN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIExlYW5wbHVtLl9wdXNoTWFuYWdlci5yZWdpc3RlcihzZXJ2aWNlV29ya2VyVXJsLCBmdW5jdGlvbiAoaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBMZWFucGx1bS5fcHVzaE1hbmFnZXIuc3Vic2NyaWJlVXNlcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnTGVhbnBsdW06IFdlYlB1c2ggaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVycyB0aGUgYnJvd3NlciBmb3JtIHdlYiBwdXNoLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgICAgUmVzb2x2ZXMgb24gc3VjY2Vzcywgb3RoZXJ3aXNlIHJlamVjdHMuXG4gICAgICovXG4gICAgTGVhbnBsdW0udW5yZWdpc3RlckZyb21XZWJQdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTGVhbnBsdW0uX3B1c2hNYW5hZ2VyLnVuc3Vic2NyaWJlVXNlcigpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGNhY2hlZCB2YWx1ZXMgZm9yIG1lc3NhZ2VzLCB2YXJpYWJsZXMgYW5kIHRlc3QgYXNzaWdubWVudHMuXG4gICAgICogVXNlIHNwYXJpbmdseSBhcyBpZiB0aGUgYXBwIGlzIHVwZGF0ZWQsIHlvdSdsbCBoYXZlIHRvIGRlYWwgd2l0aCBwb3RlbnRpYWxseVxuICAgICAqIGluY29uc2lzdGVudCBzdGF0ZSBvciB1c2VyIGV4cGVyaWVuY2UuXG4gICAgICovXG4gICAgTGVhbnBsdW0uY2xlYXJVc2VyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTGVhbnBsdW0uX3ZhckNhY2hlLmNsZWFyVXNlckNvbnRlbnQoKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLmNyZWF0ZVJlcXVlc3QgPSBmdW5jdGlvbiAoYWN0aW9uLCBhcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIExlYW5wbHVtLl9scFJlcXVlc3QucmVxdWVzdChhY3Rpb24sIGFyZ3MsIF9fYXNzaWduKHsgZGV2TW9kZTogTGVhbnBsdW0uX2ludGVybmFsU3RhdGUuZGV2TW9kZSB9LCBvcHRpb25zKSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5jb25uZWN0U29ja2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBMZWFucGx1bS5fbHBTb2NrZXQuY29ubmVjdChMZWFucGx1bS5fdmFyQ2FjaGUsIHtcbiAgICAgICAgICAgIGFwcElkOiBMZWFucGx1bS5fbHBSZXF1ZXN0LmFwcElkLFxuICAgICAgICAgICAgZGV2aWNlSWQ6IExlYW5wbHVtLl9scFJlcXVlc3QuZGV2aWNlSWRcbiAgICAgICAgfSwgTGVhbnBsdW0uY3JlYXRlUmVxdWVzdCwgTGVhbnBsdW0uX2xwUmVxdWVzdC5nZXRMYXN0UmVzcG9uc2UpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uX2ludGVybmFsU3RhdGUgPSBuZXcgSW50ZXJuYWxTdGF0ZV8xLmRlZmF1bHQoKTtcbiAgICBMZWFucGx1bS5fbHBSZXF1ZXN0ID0gbmV3IExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQoKTtcbiAgICBMZWFucGx1bS5fbHBTb2NrZXQgPSBuZXcgTGVhbnBsdW1Tb2NrZXRfMS5kZWZhdWx0KCk7XG4gICAgTGVhbnBsdW0uX3B1c2hNYW5hZ2VyID0gbmV3IFB1c2hNYW5hZ2VyXzEuZGVmYXVsdChMZWFucGx1bS5jcmVhdGVSZXF1ZXN0KTtcbiAgICBMZWFucGx1bS5fdmFyQ2FjaGUgPSBuZXcgVmFyQ2FjaGVfMS5kZWZhdWx0KExlYW5wbHVtLmNyZWF0ZVJlcXVlc3QpO1xuICAgIHJldHVybiBMZWFucGx1bTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBMZWFucGx1bTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIEJyb3dzZXIgZGV0ZWN0aW9uLiBTb3VyY2U6IGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZGV0ZWN0Lmh0bWxcbi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGRldGVjdCB3aGljaCBicm93c2VyIGNsaWVudCBpcyB1c2luZy5cbiAqL1xudmFyIEJyb3dzZXJEZXRlY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgb2JqZWN0IHdpdGggY3VycmVudCBicm93c2VyIHNldHRpbmdzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJyb3dzZXJEZXRlY3Rvcih3bmQpIHtcbiAgICAgICAgdGhpcy5icm93c2VyID0gdGhpcy5zZWFyY2hTdHJpbmcodGhpcy5nZXRCcm93c2VyRGF0YSh3bmQpKSB8fCAnVW5rbm93biBCcm93c2VyJztcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gKHRoaXMuc2VhcmNoVmVyc2lvbih3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCkgfHxcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoVmVyc2lvbih3bmQubmF2aWdhdG9yLmFwcFZlcnNpb24pIHx8XG4gICAgICAgICAgICAnVW5rbm93biBWZXJzaW9uJyk7XG4gICAgICAgIHRoaXMuT1MgPSB0aGlzLnNlYXJjaFN0cmluZyh0aGlzLmdldE9TRGF0YSh3bmQpKSB8fCAnVW5rbm93biBPUyc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoZXMgdGhlIGNsaWVudCdzIHN5c3RlbSB0byB0aGUgcHJlZGVmaW5lZCBzeXN0ZW0gbGlzdC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBUaGUgZGF0YSBvYmplY3QgdG8gc2Nhbi5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBmb3VuZCBpZGVudGl0eSBzdHJpbmcuXG4gICAgICovXG4gICAgQnJvd3NlckRldGVjdG9yLnByb3RvdHlwZS5zZWFyY2hTdHJpbmcgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBkYXRhU3RyaW5nID0gZGF0YVtpXS5zdHJpbmc7XG4gICAgICAgICAgICB2YXIgZGF0YVByb3AgPSBkYXRhW2ldLnByb3A7XG4gICAgICAgICAgICB0aGlzLnZlcnNpb25TZWFyY2hTdHJpbmcgPSBkYXRhW2ldLnZlcnNpb25TZWFyY2ggfHwgZGF0YVtpXS5pZGVudGl0eTtcbiAgICAgICAgICAgIGlmIChkYXRhU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFTdHJpbmcuaW5kZXhPZihkYXRhW2ldLnN1YlN0cmluZykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2ldLmlkZW50aXR5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGFQcm9wKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFbaV0uaWRlbnRpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIGdpdmVuIHN5c3RlbS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YVN0cmluZyBUaGUgZGF0YSBvYmplY3QgdG8gc2Nhbi5cbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBmb3VuZCBudW1iZXIuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBCcm93c2VyRGV0ZWN0b3IucHJvdG90eXBlLnNlYXJjaFZlcnNpb24gPSBmdW5jdGlvbiAoZGF0YVN0cmluZykge1xuICAgICAgICBpZiAoIWRhdGFTdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBkYXRhU3RyaW5nLmluZGV4T2YodGhpcy52ZXJzaW9uU2VhcmNoU3RyaW5nKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGRhdGFTdHJpbmcuc3Vic3RyaW5nKGluZGV4ICsgdGhpcy52ZXJzaW9uU2VhcmNoU3RyaW5nLmxlbmd0aCArIDEpKTtcbiAgICB9O1xuICAgIEJyb3dzZXJEZXRlY3Rvci5wcm90b3R5cGUuZ2V0QnJvd3NlckRhdGEgPSBmdW5jdGlvbiAod25kKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdDaHJvbWUnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnQ2hyb21lJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ09tbmlXZWInLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnT21uaVdlYicsXG4gICAgICAgICAgICAgICAgdmVyc2lvblNlYXJjaDogJ09tbmlXZWIvJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudmVuZG9yLFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ0FwcGxlJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ1NhZmFyaScsXG4gICAgICAgICAgICAgICAgdmVyc2lvblNlYXJjaDogJ1ZlcnNpb24nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHByb3A6IHduZC5vcGVyYSxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ09wZXJhJyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU2VhcmNoOiAnVmVyc2lvbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnZlbmRvcixcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdpQ2FiJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ2lDYWInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci52ZW5kb3IsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnS0RFJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0tvbnF1ZXJvcidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdGaXJlZm94JyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0ZpcmVmb3gnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci52ZW5kb3IsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnQ2FtaW5vJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0NhbWlubydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdOZXRzY2FwZScsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdOZXRzY2FwZSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdNU0lFJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0V4cGxvcmVyJyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU2VhcmNoOiAnTVNJRSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdBbmRyb2lkJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0FuZHJvaWQgQnJvd3NlcicsXG4gICAgICAgICAgICAgICAgdmVyc2lvblNlYXJjaDogJ1ZlcnNpb24nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnR2Vja28nLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnTW96aWxsYScsXG4gICAgICAgICAgICAgICAgdmVyc2lvblNlYXJjaDogJ3J2J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ01vemlsbGEnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnTmV0c2NhcGUnLFxuICAgICAgICAgICAgICAgIHZlcnNpb25TZWFyY2g6ICdNb3ppbGxhJ1xuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH07XG4gICAgQnJvd3NlckRldGVjdG9yLnByb3RvdHlwZS5nZXRPU0RhdGEgPSBmdW5jdGlvbiAod25kKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnBsYXRmb3JtLFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ1dpbicsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdXaW5kb3dzJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IucGxhdGZvcm0sXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnTWFjJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ01hYyBPUydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdpUGhvbmUnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnaU9TJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ0FuZHJvaWQnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnQW5kcm9pZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnBsYXRmb3JtLFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ0xpbnV4JyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0xpbnV4J1xuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH07XG4gICAgcmV0dXJuIEJyb3dzZXJEZXRlY3Rvcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBCcm93c2VyRGV0ZWN0b3I7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDIwIExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgSW50ZXJuYWxTdGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbnRlcm5hbFN0YXRlKCkge1xuICAgICAgICB0aGlzLnN0YXJ0SGFuZGxlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5kZXZNb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXJ0U3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZhcmlhbnREZWJ1Z0luZm9FbmFibGVkID0gZmFsc2U7XG4gICAgfVxuICAgIEludGVybmFsU3RhdGUucHJvdG90eXBlLmFkZFN0YXJ0UmVzcG9uc2VIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5zdGFydEhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICAgIGlmICh0aGlzLmhhc1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZXIodGhpcy5zdGFydFN1Y2Nlc3NmdWwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnRlcm5hbFN0YXRlLnByb3RvdHlwZS5yZW1vdmVTdGFydFJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHZhciBpZHggPSB0aGlzLnN0YXJ0SGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0SGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEludGVybmFsU3RhdGUucHJvdG90eXBlLnRyaWdnZXJTdGFydEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3RhcnRIYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5zdGFydEhhbmRsZXJzW2ldKHRoaXMuc3RhcnRTdWNjZXNzZnVsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEludGVybmFsU3RhdGU7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gSW50ZXJuYWxTdGF0ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQXJnc0J1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9BcmdzQnVpbGRlclwiKSk7XG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbnZhciBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTG9jYWxTdG9yYWdlTWFuYWdlclwiKSk7XG52YXIgTmV0d29ya18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL05ldHdvcmtcIikpO1xudmFyIExlYW5wbHVtUmVxdWVzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMZWFucGx1bVJlcXVlc3QoKSB7XG4gICAgICAgIHRoaXMubGFzdFJlcXVlc3RUaW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNvb2xkb3duVGltZW91dCA9IG51bGw7XG4gICAgICAgIHRoaXMuYXBpUGF0aCA9ICdodHRwczovL3d3dy5sZWFucGx1bS5jb20vYXBpJztcbiAgICAgICAgdGhpcy5iYXRjaENvb2xkb3duID0gNTtcbiAgICAgICAgdGhpcy5iYXRjaEVuYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3Rpb25cbiAgICAgKiBAcGFyYW0gcGFyYW1zXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5zdWNjZXNzXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZXJyb3JcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZXNwb25zZVxuICAgICAqIEBwYXJhbSBvcHRpb25zLnF1ZXVlZFxuICAgICAqIEBwYXJhbSBvcHRpb25zLnNlbmROb3dcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kZXZNb2RlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAoYWN0aW9uLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KCk7XG4gICAgICAgIC8vIEdldCBvciBjcmVhdGUgZGV2aWNlIElEIGFuZCB1c2VyIElELlxuICAgICAgICBpZiAoIXRoaXMuZGV2aWNlSWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGV2aWNlSWQgPSB0aGlzLmxvYWRMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5ERVZJQ0VfSUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5kZXZpY2VJZCkge1xuICAgICAgICAgICAgdmFyIGlkID0gJyc7XG4gICAgICAgICAgICB2YXIgcG9zc2libGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWQgKz0gcG9zc2libGUuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlLmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZXZpY2VJZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy5zYXZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuREVWSUNFX0lELCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgICAgICAgdGhpcy51c2VySWQgPSB0aGlzLmxvYWRMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5VU0VSX0lEKTtcbiAgICAgICAgICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJJZCA9IHRoaXMuZGV2aWNlSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zYXZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVVNFUl9JRCwgdGhpcy51c2VySWQpO1xuICAgICAgICB2YXIgYXJnc0J1aWxkZXIgPSBwYXJhbXNcbiAgICAgICAgICAgIC5hdHRhY2hBcGlLZXlzKHRoaXMuYXBwSWQsIHRoaXMuY2xpZW50S2V5KVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5TREtfVkVSU0lPTiwgQ29uc3RhbnRzXzEuZGVmYXVsdC5TREtfVkVSU0lPTilcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuREVWSUNFX0lELCB0aGlzLmRldmljZUlkKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5VU0VSX0lELCB0aGlzLnVzZXJJZClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQUNUSU9OLCBhY3Rpb24pXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlZFUlNJT05fTkFNRSwgdGhpcy52ZXJzaW9uTmFtZSlcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuREVWX01PREUsIG9wdGlvbnMuZGV2TW9kZSlcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVElNRSwgKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCkudG9TdHJpbmcoKSk7XG4gICAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzIHx8IG9wdGlvbnMucmVzcG9uc2U7XG4gICAgICAgIHZhciBlcnJvciA9IG9wdGlvbnMuZXJyb3IgfHwgb3B0aW9ucy5yZXNwb25zZTtcbiAgICAgICAgaWYgKCF0aGlzLmFwcElkIHx8ICF0aGlzLmNsaWVudEtleSkge1xuICAgICAgICAgICAgdmFyIGVyciA9ICdMZWFucGx1bSBBcHAgSUQgYW5kIGNsaWVudCBrZXkgYXJlIG5vdCBzZXQuIE1ha2Ugc3VyZSB5b3UgJyArXG4gICAgICAgICAgICAgICAgJ2FyZSBjYWxsaW5nIHNldEFwcElkRm9yRGV2ZWxvcG1lbnRNb2RlIG9yIHNldEFwcElkRm9yUHJvZHVjdGlvbk1vZGUgJyArXG4gICAgICAgICAgICAgICAgJ2JlZm9yZSBpc3N1aW5nIEFQSSBjYWxscy4nO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIGVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5ib2R5KCkpIHtcbiAgICAgICAgICAgIE5ldHdvcmtfMS5kZWZhdWx0LmFqYXgoJ1BPU1QnLCB0aGlzLmFwaVBhdGggKyBcIj9cIiArIGFyZ3NCdWlsZGVyLmJ1aWxkKCksIHBhcmFtcy5ib2R5KCksIHN1Y2Nlc3MsIGVycm9yLCBvcHRpb25zLnF1ZXVlZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlbmROb3cgPSBvcHRpb25zLmRldk1vZGUgfHwgb3B0aW9ucy5zZW5kTm93IHx8ICF0aGlzLmJhdGNoRW5hYmxlZDtcbiAgICAgICAgdmFyIHNlbmRVbnNlbnRSZXF1ZXN0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXF1ZXN0c1RvU2VuZCA9IF90aGlzLnBvcFVuc2VudFJlcXVlc3RzKCk7XG4gICAgICAgICAgICBpZiAocmVxdWVzdHNUb1NlbmQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0RGF0YSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEnOiByZXF1ZXN0c1RvU2VuZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBtdWx0aVJlcXVlc3RBcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRhY2hBcGlLZXlzKF90aGlzLmFwcElkLCBfdGhpcy5jbGllbnRLZXkpXG4gICAgICAgICAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuU0RLX1ZFUlNJT04sIENvbnN0YW50c18xLmRlZmF1bHQuU0RLX1ZFUlNJT04pXG4gICAgICAgICAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQUNUSU9OLCBDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuTVVMVEkpXG4gICAgICAgICAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVElNRSwgKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCkudG9TdHJpbmcoKS50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgICAgICAuYnVpbGQoKTtcbiAgICAgICAgICAgICAgICBOZXR3b3JrXzEuZGVmYXVsdC5hamF4KCdQT1NUJywgX3RoaXMuYXBpUGF0aCArIFwiP1wiICsgbXVsdGlSZXF1ZXN0QXJncywgcmVxdWVzdERhdGEsIHN1Y2Nlc3MsIGVycm9yLCBvcHRpb25zLnF1ZXVlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIERlYWwgd2l0aCBjb29sZG93bi5cbiAgICAgICAgaWYgKCFzZW5kTm93ICYmIHRoaXMuYmF0Y2hDb29sZG93bikge1xuICAgICAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgICAgICAgIGlmICghdGhpcy5sYXN0UmVxdWVzdFRpbWUgfHwgbm93IC0gdGhpcy5sYXN0UmVxdWVzdFRpbWUgPj0gdGhpcy5iYXRjaENvb2xkb3duKSB7XG4gICAgICAgICAgICAgICAgc2VuZE5vdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0UmVxdWVzdFRpbWUgPSBub3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghdGhpcy5jb29sZG93blRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvb2xkb3duVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb29sZG93blRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5sYXN0UmVxdWVzdFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDA7XG4gICAgICAgICAgICAgICAgICAgIHNlbmRVbnNlbnRSZXF1ZXN0cygpO1xuICAgICAgICAgICAgICAgIH0sICh0aGlzLmJhdGNoQ29vbGRvd24gLSAobm93IC0gdGhpcy5sYXN0UmVxdWVzdFRpbWUpKSAqIDEwMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2F2ZVJlcXVlc3RGb3JMYXRlcihhcmdzQnVpbGRlci5idWlsZERpY3QoKSk7XG4gICAgICAgIGlmIChzZW5kTm93KSB7XG4gICAgICAgICAgICBzZW5kVW5zZW50UmVxdWVzdHMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbmV0d29yayB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzIFRoZSB0aW1lb3V0IGluIHNlY29uZHMuXG4gICAgICovXG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5zZXROZXR3b3JrVGltZW91dCA9IGZ1bmN0aW9uIChzZWNvbmRzKSB7XG4gICAgICAgIE5ldHdvcmtfMS5kZWZhdWx0LnNldE5ldHdvcmtUaW1lb3V0KHNlY29uZHMpO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5nZXRMYXN0UmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgdmFyIGNvdW50ID0gKF9jID0gKF9iID0gKF9hID0gcmVzcG9uc2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXNwb25zZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmxlbmd0aCwgKF9jICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDApKTtcbiAgICAgICAgcmV0dXJuIChjb3VudCA+IDApID8gKF9lID0gKF9kID0gcmVzcG9uc2UpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5yZXNwb25zZSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lW2NvdW50IC0gMV0gOiBudWxsO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5pc1Jlc3BvbnNlU3VjY2VzcyA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBCb29sZWFuKChfYSA9IHJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3VjY2Vzcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLnNhdmVSZXF1ZXN0Rm9yTGF0ZXIgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgY291bnQgPSB0aGlzLmxvYWRMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5DT1VOVCkgfHwgMDtcbiAgICAgICAgdmFyIGl0ZW1LZXkgPSBDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5JVEVNICsgY291bnQ7XG4gICAgICAgIHRoaXMuc2F2ZUxvY2FsKGl0ZW1LZXksIEpTT04uc3RyaW5naWZ5KGFyZ3MpKTtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgdGhpcy5zYXZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuQ09VTlQsIGNvdW50KTtcbiAgICB9O1xuICAgIExlYW5wbHVtUmVxdWVzdC5wcm90b3R5cGUucG9wVW5zZW50UmVxdWVzdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXF1ZXN0RGF0YSA9IFtdO1xuICAgICAgICB2YXIgY291bnQgPSB0aGlzLmxvYWRMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5DT1VOVCkgfHwgMDtcbiAgICAgICAgdGhpcy5yZW1vdmVMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5DT1VOVCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW1LZXkgPSBDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5JVEVNICsgaTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdERhdGEucHVzaChKU09OLnBhcnNlKHRoaXMubG9hZExvY2FsKGl0ZW1LZXkpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoaWdub3JlZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlTG9jYWwoaXRlbUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcXVlc3REYXRhO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5sb2FkTG9jYWwgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5nZXRGcm9tTG9jYWxTdG9yYWdlKGtleSk7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLnNhdmVMb2NhbCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIExvY2FsU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnNhdmVUb0xvY2FsU3RvcmFnZShrZXksIHZhbHVlKTtcbiAgICB9O1xuICAgIExlYW5wbHVtUmVxdWVzdC5wcm90b3R5cGUucmVtb3ZlTG9jYWwgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIExvY2FsU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnJlbW92ZUZyb21Mb2NhbFN0b3JhZ2Uoa2V5KTtcbiAgICB9O1xuICAgIHJldHVybiBMZWFucGx1bVJlcXVlc3Q7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTGVhbnBsdW1SZXF1ZXN0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICpcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpc0VxdWFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvZGFzaC9pc0VxdWFsXCIpKTtcbnZhciBBcmdzQnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0FyZ3NCdWlsZGVyXCIpKTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xudmFyIFNvY2tldElvQ2xpZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vU29ja2V0SW9DbGllbnRcIikpO1xudmFyIExlYW5wbHVtU29ja2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExlYW5wbHVtU29ja2V0KCkge1xuICAgICAgICB0aGlzLnNvY2tldEhvc3QgPSAnZGV2LmxlYW5wbHVtLmNvbSc7XG4gICAgfVxuICAgIExlYW5wbHVtU29ja2V0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKGNhY2hlLCBhdXRoLCBjcmVhdGVSZXF1ZXN0LCBnZXRMYXN0UmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCFXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdZb3VyIGJyb3dzZXIgZG9lc25cXCd0IHN1cHBvcnQgV2ViU29ja2V0cy4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xpZW50ID0gbmV3IFNvY2tldElvQ2xpZW50XzEuZGVmYXVsdCgpO1xuICAgICAgICB2YXIgYXV0aFNlbnQgPSBmYWxzZTtcbiAgICAgICAgY2xpZW50Lm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICghYXV0aFNlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTGVhbnBsdW06IENvbm5lY3RlZCB0byBkZXZlbG9wbWVudCBzZXJ2ZXIuJyk7XG4gICAgICAgICAgICAgICAgY2xpZW50LnNlbmQoJ2F1dGgnLCAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgX2FbQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQVBQX0lEXSA9IGF1dGguYXBwSWQsXG4gICAgICAgICAgICAgICAgICAgIF9hW0NvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkRFVklDRV9JRF0gPSBhdXRoLmRldmljZUlkLFxuICAgICAgICAgICAgICAgICAgICBfYSkpO1xuICAgICAgICAgICAgICAgIGF1dGhTZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY2xpZW50Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMZWFucGx1bTogU29ja2V0IGVycm9yJywgZXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgICBjbGllbnQub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50LCBhcmdzKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQgPT09ICd1cGRhdGVWYXJzJykge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzXzEgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KCkuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklOQ0xVREVfREVGQVVMVFMsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5HRVRfVkFSUywgYXJnc18xLCB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZXRWYXJzUmVzcG9uc2UgPSBnZXRMYXN0UmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGdldFZhcnNSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuVkFSU107XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFyaWFudHMgPSBnZXRWYXJzUmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlZBUklBTlRTXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb25NZXRhZGF0YSA9IGdldFZhcnNSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuQUNUSU9OX01FVEFEQVRBXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNFcXVhbF8xLmRlZmF1bHQodmFsdWVzLCBjYWNoZS5kaWZmcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5hcHBseURpZmZzKHZhbHVlcywgdmFyaWFudHMsIGFjdGlvbk1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQgPT09ICdnZXRWYXJpYWJsZXMnKSB7XG4gICAgICAgICAgICAgICAgY2FjaGUuc2VuZFZhcmlhYmxlcygpO1xuICAgICAgICAgICAgICAgIGNsaWVudC5zZW5kKCdnZXRDb250ZW50UmVzcG9uc2UnLCB7XG4gICAgICAgICAgICAgICAgICAgICd1cGRhdGVkJzogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQgPT09ICdnZXRBY3Rpb25zJykge1xuICAgICAgICAgICAgICAgIC8vIFVuc3VwcG9ydGVkIGluIEphdmFTY3JpcHQgU0RLLlxuICAgICAgICAgICAgICAgIGNsaWVudC5zZW5kKCdnZXRDb250ZW50UmVzcG9uc2UnLCB7XG4gICAgICAgICAgICAgICAgICAgICd1cGRhdGVkJzogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50ID09PSAncmVnaXN0ZXJEZXZpY2UnKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWFsZXJ0XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJZb3VyIGRldmljZSBoYXMgYmVlbiByZWdpc3RlcmVkIHRvIFwiICsgYXJnc1swXS5lbWFpbCArIFwiLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY2xpZW50Lm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTGVhbnBsdW06IERpc2Nvbm5lY3RlZCB0byBkZXZlbG9wbWVudCBzZXJ2ZXIuJyk7XG4gICAgICAgICAgICBhdXRoU2VudCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBjbGllbnQuY29ubmVjdCh0aGlzLnNvY2tldEhvc3QpO1xuICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWNsaWVudC5jb25uZWN0ZWQgJiYgIWNsaWVudC5jb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgY2xpZW50LmNvbm5lY3QoX3RoaXMuc29ja2V0SG9zdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDUwMDApO1xuICAgIH07XG4gICAgTGVhbnBsdW1Tb2NrZXQucHJvdG90eXBlLnNldFNvY2tldEhvc3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zb2NrZXRIb3N0ID0gdmFsdWU7XG4gICAgfTtcbiAgICByZXR1cm4gTGVhbnBsdW1Tb2NrZXQ7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTGVhbnBsdW1Tb2NrZXQ7XG4iLCJ2YXIgYmFzZUlzRXF1YWxEZWVwID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWxEZWVwJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWw7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBlcXVhbEJ5VGFnID0gcmVxdWlyZSgnLi9fZXF1YWxCeVRhZycpLFxuICAgIGVxdWFsT2JqZWN0cyA9IHJlcXVpcmUoJy4vX2VxdWFsT2JqZWN0cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgc3RhY2tDbGVhciA9IHJlcXVpcmUoJy4vX3N0YWNrQ2xlYXInKSxcbiAgICBzdGFja0RlbGV0ZSA9IHJlcXVpcmUoJy4vX3N0YWNrRGVsZXRlJyksXG4gICAgc3RhY2tHZXQgPSByZXF1aXJlKCcuL19zdGFja0dldCcpLFxuICAgIHN0YWNrSGFzID0gcmVxdWlyZSgnLi9fc3RhY2tIYXMnKSxcbiAgICBzdGFja1NldCA9IHJlcXVpcmUoJy4vX3N0YWNrU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFjaztcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZURlbGV0ZTtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVHZXQ7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZVNldDtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0hhcztcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrU2V0O1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwidmFyIGNvcmVKc0RhdGEgPSByZXF1aXJlKCcuL19jb3JlSnNEYXRhJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXNrZWQ7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG4iLCJ2YXIgSGFzaCA9IHJlcXVpcmUoJy4vX0hhc2gnKSxcbiAgICBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlQ2xlYXI7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaENsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoRGVsZXRlO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEdldDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hIYXM7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hTZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUdldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZVNldDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyksXG4gICAgc2V0Q2FjaGVBZGQgPSByZXF1aXJlKCcuL19zZXRDYWNoZUFkZCcpLFxuICAgIHNldENhY2hlSGFzID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVIYXMnKTtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldENhY2hlO1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5U29tZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEJ5VGFnO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheTtcbiIsIi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwVG9BcnJheTtcbiIsIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9BcnJheTtcbiIsInZhciBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbE9iamVjdHM7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXM7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldEFsbEtleXM7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9scztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzO1xuIiwidmFyIGJhc2VUaW1lcyA9IHJlcXVpcmUoJy4vX2Jhc2VUaW1lcycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUxpa2VLZXlzO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0FyZ3VtZW50cztcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwidmFyIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQcm90b3R5cGU7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgRGF0YVZpZXcgPSByZXF1aXJlKCcuL19EYXRhVmlldycpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuL19Qcm9taXNlJyksXG4gICAgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgV2Vha01hcCA9IHJlcXVpcmUoJy4vX1dlYWtNYXAnKSxcbiAgICBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUYWc7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFWaWV3O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXQ7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWFrTWFwO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICpcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZVxuICpcbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE5ldHdvcmtfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9OZXR3b3JrXCIpKTtcbi8qKlxuICogU29ja2V0LmlvIDEuMCBjbGllbnQgY2xhc3MuXG4gKi9cbnZhciBTb2NrZXRJb0NsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhIG5ldyBTb2NrZXRJb0NsaWVudCwgbm90IGNvbm5lY3RlZCBieSBkZWZhdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNvY2tldElvQ2xpZW50KCkge1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW5nID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbm5lY3RzIHRvIHRoZSBnaXZlbiBzb2NrZXRIb3N0LlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gc29ja2V0SG9zdCBUaGUgaG9zdCB0byBjb25uZWN0IHRvLlxuICAgICAqL1xuICAgIFNvY2tldElvQ2xpZW50LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKHNvY2tldEhvc3QpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtdGhpc1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHNlbGYuY29ubmVjdGluZyA9IHRydWU7XG4gICAgICAgIE5ldHdvcmtfMS5kZWZhdWx0LmFqYXgoJ1BPU1QnLCBcImh0dHBzOi8vXCIgKyBzb2NrZXRIb3N0ICsgXCIvc29ja2V0LmlvLzFcIiwgJycsIGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICB2YXIgc2Vzc2lvbiA9IHBhcnRzWzBdO1xuICAgICAgICAgICAgdmFyIGhlYXJ0YmVhdCA9IHBhcnNlSW50KHBhcnRzWzFdKSAvIDIgKiAxMDAwO1xuICAgICAgICAgICAgc2VsZi5zb2NrZXQgPSBuZXcgV2ViU29ja2V0KFwid3NzOi8vXCIgKyBzb2NrZXRIb3N0ICsgXCIvc29ja2V0LmlvLzEvd2Vic29ja2V0L1wiICsgc2Vzc2lvbik7XG4gICAgICAgICAgICB2YXIgaGVhcnRiZWF0SW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICAgICAgc2VsZi5zb2NrZXQub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzZWxmLmNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5vbm9wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vbm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGVhcnRiZWF0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc29ja2V0LnNlbmQoJzI6OjonKTtcbiAgICAgICAgICAgICAgICB9LCBoZWFydGJlYXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNlbGYuc29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGhlYXJ0YmVhdEludGVydmFsKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5vbmNsb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYub25jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzZWxmLnNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVBhcnRzID0gZXZlbnQuZGF0YS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gcGFyc2VJbnQobWVzc2FnZVBhcnRzWzBdKTtcbiAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNvY2tldC5zZW5kKCcyOjonKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29kZSA9PT0gNSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZUlkID0gbWVzc2FnZVBhcnRzWzFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UobWVzc2FnZVBhcnRzLnNsaWNlKDMpLmpvaW4oJzonKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlRXZlbnQgPSBkYXRhLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gZGF0YS5hcmdzO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNvY2tldC5zZW5kKFwiNjo6OlwiICsgbWVzc2FnZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5vbm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub25tZXNzYWdlKG1lc3NhZ2VFdmVudCwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29kZSA9PT0gNykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNvY2tldCBlcnJvcjogXCIgKyBldmVudC5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2VsZi5zb2NrZXQub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIHNlbGYuc29ja2V0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYub25lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm9uZXJyb3IoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sIG51bGwsIGZhbHNlLCB0cnVlIC8vIG51bGwsIHF1ZXVlZCwgcGxhaW5UZXh0XG4gICAgICAgICk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZW5kcyBnaXZlbiBldmVudCB3aXRoIGFyZ3VtZW50cyB0byB0aGUgc2VydmVyLlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBldmVudC5cbiAgICAgKiBAcGFyYW0gIHsqfSBhcmdzIEFyZ3VtZW50cyB0byBzZW5kLlxuICAgICAqL1xuICAgIFNvY2tldElvQ2xpZW50LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBTb2NrZXQgaXMgbm90IGNvbm5lY3RlZC4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJnc0pzb24gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgYXJnczogYXJnc1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChcIjU6OjpcIiArIGFyZ3NKc29uKTtcbiAgICB9O1xuICAgIHJldHVybiBTb2NrZXRJb0NsaWVudDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTb2NrZXRJb0NsaWVudDtcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbiAqXG4gKiAgQ29weXJpZ2h0IDIwMjAgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2VcbiAqXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBpc0VxdWFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvZGFzaC9pc0VxdWFsXCIpKTtcbnZhciBBcmdzQnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0FyZ3NCdWlsZGVyXCIpKTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xudmFyIExvY2FsU3RvcmFnZU1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Mb2NhbFN0b3JhZ2VNYW5hZ2VyXCIpKTtcbnZhciBBUFBMSUNBVElPTl9TRVJWRVJfUFVCTElDX0tFWSA9ICdCSW5XUHBXbnRmUjM5cmdYU1AwNHBxZG1FZERHYTUwejZ6cWJNdnh5eEpDd3pYSXVTcFNoOEM4ODgtQ2ZKODJXRUxsN1hlOGNqQScgK1xuICAgICduZkN0LTN2SzBDaTY4JztcbnZhciBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbnZhciBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uID0gbnVsbDtcbi8qKlxuICogUHVzaCBNYW5hZ2VyIGhhbmRsZXMgdGhlIHJlZ2lzdHJhdGlvbiBhbmQgc3Vic2NyaXB0aW9uIGZvciB3ZWIgcHVzaC5cbiAqL1xudmFyIFB1c2hNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFB1c2hNYW5hZ2VyKGNyZWF0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3Qgd2ViIHB1c2ggaXMgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgc3VwcG9ydGVkLCBlbHNlIGZhbHNlLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS5pc1dlYlB1c2hTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIgJiYgJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvciAmJlxuICAgICAgICAgICAgJ1B1c2hNYW5hZ2VyJyBpbiB3aW5kb3c7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgYnJvd3NlciBpcyBzdWJzY3JpYmVkIHRvIHdlYiBwdXNoIG5vdGlmaWNhdGlvbnMuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gVHJ1ZSBpZiBzdWJzY3JpYmVkLCBlbHNlIGZhbHNlLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS5pc1dlYlB1c2hTdWJzY3JpYmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuaXNXZWJQdXNoU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbigpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZ2lzdHJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKiBAbmFtZXNwYWNlIHJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlciBUaGUgcHVzaCBtYW5hZ2VyIG9iamVjdCBvZiB0aGUgYnJvd3Nlci4gKiovXG4gICAgICAgICAgICAgICAgICAgIC8qKiBAbmFtZXNwYWNlIHJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5nZXRTdWJzY3JpcHRpb24gKiovXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5nZXRTdWJzY3JpcHRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNTdWJzY3JpYmVkID0gc3Vic2NyaXB0aW9uICE9PSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZU5ld1N1YnNjcmlwdGlvbk9uU2VydmVyKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGlzU3Vic2NyaWJlZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGZvciBXZWJQdXNoLlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gICBzZXJ2aWNlV29ya2VyVXJsIFRoZSB1cmwgdGhhdCBzZXJ2ZXMgdGhlIHNlcnZpY2Ugd29ya2VyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24geW91ciBkb21haW4uXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrICAgICAgICAgVGhlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aXRoIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IG5vdGhpbmdcbiAgICAgKi9cbiAgICBQdXNoTWFuYWdlci5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoc2VydmljZVdvcmtlclVybCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmlzV2ViUHVzaFN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTGVhbnBsdW06IFB1c2ggbWVzc2FnaW5nIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHNlcnZpY2VXb3JrZXJVcmwgPyBzZXJ2aWNlV29ya2VyVXJsIDogJy9zdy5taW4uanMnLCBudWxsKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlZ2lzdHJhdGlvbikge1xuICAgICAgICAgICAgc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiA9IHJlZ2lzdHJhdGlvbjtcbiAgICAgICAgICAgIC8vIFNldCB0aGUgaW5pdGlhbCBzdWJzY3JpcHRpb24gdmFsdWVcbiAgICAgICAgICAgIHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uKClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgaXNTdWJzY3JpYmVkID0gIShzdWJzY3JpcHRpb24gPT09IG51bGwpO1xuICAgICAgICAgICAgICAgIGlmIChpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlTmV3U3Vic2NyaXB0aW9uT25TZXJ2ZXIoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhpc1N1YnNjcmliZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBTZXJ2aWNlIFdvcmtlciBFcnJvcjogJywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0aGUgdXNlcihicm93c2VyKSB0byBwdXNoLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVzIGlmIHN1YnNjcmlwdGlvbiBzdWNjZXNzZnVsLCBvdGhlcndpc2UgcmVqZWN0cy5cbiAgICAgKi9cbiAgICBQdXNoTWFuYWdlci5wcm90b3R5cGUuc3Vic2NyaWJlVXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGFwcGxpY2F0aW9uU2VydmVyS2V5ID0gdGhpcy51cmxCNjRUb1VpbnQ4QXJyYXkoQVBQTElDQVRJT05fU0VSVkVSX1BVQkxJQ19LRVkpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgLyoqIEBuYW1lc3BhY2Ugc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5zdWJzY3JpYmUgU3Vic2NyaWJlIHRvIHB1c2guICoqL1xuICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICB1c2VyVmlzaWJsZU9ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgYXBwbGljYXRpb25TZXJ2ZXJLZXk6IGFwcGxpY2F0aW9uU2VydmVyS2V5XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZU5ld1N1YnNjcmlwdGlvbk9uU2VydmVyKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGlzU3Vic2NyaWJlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KFwiTGVhbnBsdW06IEZhaWxlZCB0byBzdWJzY3JpYmUgdGhlIHVzZXI6IFwiICsgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlIHRoZSB1c2VyKGJyb3dzZXIpIGZyb20gcHVzaC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlcyBpZiB1bnN1YnNjcmliZWQsIG90aGVyd2lzZSByZWplY3RzLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS51bnN1YnNjcmliZVVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBfdGhpcy5pc1dlYlB1c2hTdWJzY3JpYmVkKCkudGhlbihmdW5jdGlvbiAoc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLmdldFN1YnNjcmlwdGlvbigpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyoqIEBuYW1lc3BhY2Ugc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci51bnN1YnNjcmliZSBVbnN1YnNjcmliZSB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICogIHB1c2guICoqL1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChcIkxlYW5wbHVtOiBFcnJvciB1bnN1YnNjcmliaW5nOiBcIiArIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbiBvYmplY3QgZnJvbSBicm93c2VyLlxuICAgICAqIEByZXR1cm4ge29iamVjdH0gUmV0dXJucyB0aGUgcmVnaXN0cmF0aW9uIG9yIG51bGwuXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIucHJvdG90eXBlLmdldFNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgaWYgKHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24pIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLyoqIEBuYW1lc3BhY2UgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuZ2V0UmVnaXN0cmF0aW9uIFJldHJpZXZlcyB0aGUgIHB1c2ggcmVnaXN0cmF0aW9uXG4gICAgICAgICAgICAgICAgICogZnJvbSB0aGUgYnJvd3Nlci4gKiovXG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuZ2V0UmVnaXN0cmF0aW9uKCkudGhlbihmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24gPSByZWdpc3RyYXRpb247XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVnaXN0cmF0aW9uKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIGEgYmFzZTY0IHVybCBzdHJpbmcgdG8gYW4gdWludDggYXJyYXJ5LlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gYmFzZTY0U3RyaW5nIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS51cmxCNjRUb1VpbnQ4QXJyYXkgPSBmdW5jdGlvbiAoYmFzZTY0U3RyaW5nKSB7XG4gICAgICAgIHZhciBwYWRkaW5nID0gJz0nLnJlcGVhdCgoNCAtIGJhc2U2NFN0cmluZy5sZW5ndGggJSA0KSAlIDQpO1xuICAgICAgICB2YXIgYmFzZTY0ID0gKGJhc2U2NFN0cmluZyArIHBhZGRpbmcpXG4gICAgICAgICAgICAucmVwbGFjZSgvLS9nLCAnKycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXy9nLCAnLycpO1xuICAgICAgICB2YXIgcmF3RGF0YSA9IHdpbmRvdy5hdG9iKGJhc2U2NCk7XG4gICAgICAgIHZhciBvdXRwdXRBcnJheSA9IG5ldyBVaW50OEFycmF5KHJhd0RhdGEubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdEYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBvdXRwdXRBcnJheVtpXSA9IHJhd0RhdGEuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0QXJyYXk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBbcHJlcGFyZVN1YnNjcmlwdGlvbiBkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHN1YnNjcmlwdGlvbiBUaGUgcmF3IHN1YnNjcmlwdGlvbiBmcm9tIGJyb3dzZXIuXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IHN1YnNjcmlwdGlvbi5nZXRLZXkgVGhlIHN1YnNjcmlwdGlvbiBrZXkuXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBzdWJzY3JpcHRpb24uZW5kcG9pbnQgVGhlIHN1YnNjcmlwdGlvbiBrZXkuXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgc3Vic2NyaXB0aW9uIG9iamVjdCB0byBiZSBzZW50IHRvIHNlcnZlci5cbiAgICAgKi9cbiAgICBQdXNoTWFuYWdlci5wcm90b3R5cGUucHJlcGFyZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuICAgICAgICB2YXIga2V5ID0gc3Vic2NyaXB0aW9uLmdldEtleSA/IHN1YnNjcmlwdGlvbi5nZXRLZXkoJ3AyNTZkaCcpIDogJyc7XG4gICAgICAgIHZhciBhdXRoID0gc3Vic2NyaXB0aW9uLmdldEtleSA/IHN1YnNjcmlwdGlvbi5nZXRLZXkoJ2F1dGgnKSA6ICcnO1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gRVM2TW9kdWxlc0RlcGVuZGVuY2llc1xuICAgICAgICB2YXIga2V5QXNjaWkgPSBidG9hKGFwcGx5LmNhbGwoU3RyaW5nLmZyb21DaGFyQ29kZSwgbnVsbCwgbmV3IFVpbnQ4QXJyYXkoa2V5KSkpO1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gRVM2TW9kdWxlc0RlcGVuZGVuY2llc1xuICAgICAgICB2YXIgYXV0aEFzY2lpID0gYnRvYShhcHBseS5jYWxsKFN0cmluZy5mcm9tQ2hhckNvZGUsIG51bGwsIG5ldyBVaW50OEFycmF5KGF1dGgpKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbmRwb2ludDogc3Vic2NyaXB0aW9uLmVuZHBvaW50LFxuICAgICAgICAgICAga2V5OiBrZXlBc2NpaSxcbiAgICAgICAgICAgIGF1dGg6IGF1dGhBc2NpaVxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VuZCBhIG5ldyBzdWJzY3JpcHRpb24gb2JqZWN0IHRvIHRoZSBMZWFucGx1bSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHN1YnNjcmlwdGlvbiBUaGUgc3Vic2NyaXB0aW9uLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVOZXdTdWJzY3JpcHRpb25PblNlcnZlciA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdmFyIHByZXBhcmVkU3Vic2NyaXB0aW9uID0gdGhpcy5wcmVwYXJlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB2YXIgcHJlcGFyZWRTdWJzY3JpcHRpb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShwcmVwYXJlZFN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdTdWJzY3JpcHRpb25TdHJpbmcgPSBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5nZXRGcm9tTG9jYWxTdG9yYWdlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlBVU0hfU1VCU0NSSVBUSU9OKTtcbiAgICAgICAgICAgIGlmICghaXNFcXVhbF8xLmRlZmF1bHQoZXhpc3RpbmdTdWJzY3JpcHRpb25TdHJpbmcsIHByZXBhcmVkU3Vic2NyaXB0aW9uU3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIExvY2FsU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnNhdmVUb0xvY2FsU3RvcmFnZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5QVVNIX1NVQlNDUklQVElPTiwgcHJlcGFyZWRTdWJzY3JpcHRpb25TdHJpbmcpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3Vic2NyaXB0aW9uKHByZXBhcmVkU3Vic2NyaXB0aW9uU3RyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VuZCB0aGUgc3Vic2NyaXB0aW9uIHRvIHRoZSBMZWFucGx1bSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHtTdHJpbmcvT2JqZWN0fSBzdWJzY3JpcHRpb24gVGhlIHN1YnNjcmlwdGlvbiBzdHJpbmcuXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIucHJvdG90eXBlLnNldFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKCFzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKS5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuV0VCX1BVU0hfU1VCU0NSSVBUSU9OLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlNFVF9ERVZJQ0VfQVRUUklCVVRFUywgYXJncywge1xuICAgICAgICAgICAgcXVldWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gUHVzaE1hbmFnZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gUHVzaE1hbmFnZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAgQ29weXJpZ2h0IDIwMjAgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFyZ3NCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXJnc0J1aWxkZXJcIikpO1xudmFyIENvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnN0YW50c1wiKSk7XG52YXIgTG9jYWxTdG9yYWdlTWFuYWdlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0xvY2FsU3RvcmFnZU1hbmFnZXJcIikpO1xudmFyIFZhckNhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZhckNhY2hlKGNyZWF0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdDtcbiAgICAgICAgdGhpcy5hY3Rpb25NZXRhZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLmhhc1JlY2VpdmVkRGlmZnMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5tZXJnZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudmFyaWFibGVzID0gbnVsbDtcbiAgICAgICAgdGhpcy52YXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMgPSBbXTtcbiAgICAgICAgdGhpcy52YXJpYW50RGVidWdJbmZvID0ge307XG4gICAgICAgIHRoaXMuZGlmZnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9rZW4gPSAnJztcbiAgICAgICAgdGhpcy52YXJpYW50cyA9IFtdO1xuICAgIH1cbiAgICBWYXJDYWNoZS5wcm90b3R5cGUuYXBwbHlEaWZmcyA9IGZ1bmN0aW9uIChkaWZmcywgdmFyaWFudHMsIGFjdGlvbk1ldGFkYXRhKSB7XG4gICAgICAgIHRoaXMuZGlmZnMgPSBkaWZmcztcbiAgICAgICAgdGhpcy52YXJpYW50cyA9IHZhcmlhbnRzO1xuICAgICAgICB0aGlzLmFjdGlvbk1ldGFkYXRhID0gYWN0aW9uTWV0YWRhdGE7XG4gICAgICAgIHRoaXMuaGFzUmVjZWl2ZWREaWZmcyA9IHRydWU7XG4gICAgICAgIHRoaXMubWVyZ2VkID0gbWVyZ2VIZWxwZXIodGhpcy52YXJpYWJsZXMsIGRpZmZzKTtcbiAgICAgICAgdGhpcy5zYXZlRGlmZnMoKTtcbiAgICAgICAgaWYgKHRoaXMub25VcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMub25VcGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLmxvYWREaWZmcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlEaWZmcyhKU09OLnBhcnNlKHRoaXMubG9hZExvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlZBUklBQkxFUykgfHwgbnVsbCksIEpTT04ucGFyc2UodGhpcy5sb2FkTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVkFSSUFOVFMpIHx8IG51bGwpLCBKU09OLnBhcnNlKHRoaXMubG9hZExvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkFDVElPTl9NRVRBREFUQSkgfHwgbnVsbCkpO1xuICAgICAgICAgICAgdGhpcy50b2tlbiA9IHRoaXMubG9hZExvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlRPS0VOKTtcbiAgICAgICAgICAgIHRoaXMudmFyaWFudERlYnVnSW5mbyA9IHRoaXMubG9hZExvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlZBUklBTlRfREVCVUdfSU5GTyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTGVhbnBsdW06IEludmFsaWQgZGlmZnM6IFwiICsgZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5zYXZlRGlmZnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2F2ZUxvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlZBUklBQkxFUywgSlNPTi5zdHJpbmdpZnkodGhpcy5kaWZmcyB8fCB7fSkpO1xuICAgICAgICB0aGlzLnNhdmVMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5WQVJJQU5UUywgSlNPTi5zdHJpbmdpZnkodGhpcy52YXJpYW50cyB8fCBbXSkpO1xuICAgICAgICB0aGlzLnNhdmVMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5BQ1RJT05fTUVUQURBVEEsIEpTT04uc3RyaW5naWZ5KHRoaXMuYWN0aW9uTWV0YWRhdGEgfHwge30pKTtcbiAgICAgICAgdGhpcy5zYXZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVkFSSUFOVF9ERUJVR19JTkZPLCBKU09OLnN0cmluZ2lmeSh0aGlzLnZhcmlhbnREZWJ1Z0luZm8gfHwge30pKTtcbiAgICAgICAgdGhpcy5zYXZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVE9LRU4sIHRoaXMudG9rZW4pO1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLmdldFZhcmlhYmxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVyZ2VkICE9PSB1bmRlZmluZWQgPyB0aGlzLm1lcmdlZCA6IHRoaXMudmFyaWFibGVzO1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLnNldFZhcmlhYmxlcyA9IGZ1bmN0aW9uICh2YXJpYWJsZXMpIHtcbiAgICAgICAgdGhpcy52YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUuYWRkVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLnZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgICAgICBpZiAodGhpcy5oYXNSZWNlaXZlZERpZmZzKSB7XG4gICAgICAgICAgICBoYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5yZW1vdmVWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHZhciBpZHggPSB0aGlzLnZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMudmFyaWFibGVzQ2hhbmdlZEhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUudHJpZ2dlclZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy52YXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnNbaV0oKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLmdldFZhcmlhbnREZWJ1Z0luZm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhcmlhbnREZWJ1Z0luZm87XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUuc2V0VmFyaWFudERlYnVnSW5mbyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhcmlhbnREZWJ1Z0luZm8gPSB2YWx1ZTtcbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5zZW5kVmFyaWFibGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBib2R5ID0gKF9hID0ge30sIF9hW0NvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlZBUklBQkxFU10gPSB0aGlzLnZhcmlhYmxlcywgX2EpO1xuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKS5ib2R5KEpTT04uc3RyaW5naWZ5KGJvZHkpKTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5TRVRfVkFSUywgYXJncywge1xuICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5jbGVhclVzZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRpZmZzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnZhcmlhYmxlcyA9IG51bGw7XG4gICAgICAgIHRoaXMudmFyaWFudHMgPSBbXTtcbiAgICAgICAgdGhpcy52YXJpYW50RGVidWdJbmZvID0ge307XG4gICAgICAgIHRoaXMubWVyZ2VkID0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLmxvYWRMb2NhbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIExvY2FsU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LmdldEZyb21Mb2NhbFN0b3JhZ2Uoa2V5KTtcbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5zYXZlTG9jYWwgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5zYXZlVG9Mb2NhbFN0b3JhZ2Uoa2V5LCB2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gVmFyQ2FjaGU7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVmFyQ2FjaGU7XG5mdW5jdGlvbiBtZXJnZUhlbHBlcih2YXJzLCBkaWZmKSB7XG4gICAgaWYgKHR5cGVvZiBkaWZmID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgZGlmZiA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiBkaWZmID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZGlmZjtcbiAgICB9XG4gICAgaWYgKGRpZmYgPT09IG51bGwgfHwgZGlmZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB2YXJzO1xuICAgIH1cbiAgICB2YXIgb2JqSXRlcmF0b3IgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBpdGVyYXRlKGYpIHtcbiAgICAgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGYob2JqW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBhdHRyIGluIG9iaikge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHNlZW1zIHRvIGJlIGJlc3QgcHJhY3RpY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy83MDcxXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVmbGVjdFxuICAgICAgICAgICAgICAgICAgICBpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGF0dHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmKGF0dHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIHZhcnNJdGVyYXRvciA9IG9iakl0ZXJhdG9yKHZhcnMpO1xuICAgIHZhciBkaWZmSXRlcmF0b3IgPSBvYmpJdGVyYXRvcihkaWZmKTtcbiAgICAvLyBJbmZlciB0aGF0IHRoZSBkaWZmcyBpcyBhbiBhcnJheSBpZiB0aGUgdmFycyB2YWx1ZSBkb2Vzbid0IGV4aXN0IHRvIHRlbGwgdXMgdGhlIHR5cGUuXG4gICAgdmFyIGlzQXJyYXkgPSBmYWxzZTtcbiAgICBpZiAodmFycyA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoIShkaWZmIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICBpc0FycmF5ID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAodmFyIGF0dHJpYnV0ZSBpbiBkaWZmKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkaWZmLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0FycmF5ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQXJyYXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgYXR0cmlidXRlID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNBcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5sZW5ndGggPCAzIHx8IGF0dHJpYnV0ZS5jaGFyQXQoMCkgIT09ICdbJyB8fFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUuY2hhckF0KGF0dHJpYnV0ZS5sZW5ndGggLSAxKSAhPT0gJ10nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQXJyYXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIE1lcmdlIGFycmF5cy5cbiAgICBpZiAodmFycyBpbnN0YW5jZW9mIEFycmF5IHx8IGlzQXJyYXkpIHtcbiAgICAgICAgdmFyIG1lcmdlZF8xID0gW107XG4gICAgICAgIHZhcnNJdGVyYXRvcihmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgICAgbWVyZ2VkXzEucHVzaChhdHRyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRpZmZJdGVyYXRvcihmdW5jdGlvbiAodmFyU3Vic2NyaXB0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0ID0gcGFyc2VJbnQodmFyU3Vic2NyaXB0LnN1YnN0cmluZygxLCB2YXJTdWJzY3JpcHQubGVuZ3RoIC0gMSkpO1xuICAgICAgICAgICAgdmFyIGRpZmZWYWx1ZSA9IGRpZmZbdmFyU3Vic2NyaXB0XTtcbiAgICAgICAgICAgIHdoaWxlIChzdWJzY3JpcHQgPj0gbWVyZ2VkXzEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkXzEucHVzaChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lcmdlZF8xW3N1YnNjcmlwdF0gPSBtZXJnZUhlbHBlcihtZXJnZWRfMVtzdWJzY3JpcHRdLCBkaWZmVmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lcmdlZF8xO1xuICAgIH1cbiAgICAvLyBNZXJnZSBkaWN0aW9uYXJpZXMuXG4gICAgdmFyIG1lcmdlZCA9IHt9O1xuICAgIHZhcnNJdGVyYXRvcihmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICBpZiAoZGlmZlthdHRyXSA9PT0gbnVsbCB8fCBkaWZmW2F0dHJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lcmdlZFthdHRyXSA9IHZhcnNbYXR0cl07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBkaWZmSXRlcmF0b3IoZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgbWVyZ2VkW2F0dHJdID0gbWVyZ2VIZWxwZXIodmFycyA9PT0gbnVsbCA/IG51bGwgOiB2YXJzW2F0dHJdIHx8IHt9LCBkaWZmW2F0dHJdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWVyZ2VkO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==