!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=30)}([function(e,t,n){var r=n(19),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();e.exports=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.4.0",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_METADATA:"actionMetadata",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_METADATA:"__leanplum_action_metadata",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)"}}},function(e,t,n){var r=n(47),o=n(53);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=function(){function e(){this.argString="",this.argValues={}}return e.prototype.add=function(e,t){if(void 0===t)return this;this.argString&&(this.argString+="&");var n=encodeURIComponent(t);return this.argString+=e+"="+n,this.argValues[e]=t,this},e.prototype.body=function(e){return e?(this._body=e,this):this._body},e.prototype.attachApiKeys=function(e,t){return this.add(o.default.PARAMS.APP_ID,e).add(o.default.PARAMS.CLIENT,o.default.CLIENT).add(o.default.PARAMS.CLIENT_KEY,t)},e.prototype.build=function(){return this.argString},e.prototype.buildDict=function(){return this.argValues},e}();t.default=a},function(e,t,n){var r=n(37),o=n(38),a=n(39),u=n(40),i=n(41);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=u,s.prototype.set=i,e.exports=s},function(e,t,n){var r=n(17);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(14),o=n(49),a=n(50),u="[object Null]",i="[object Undefined]",s=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?i:u:s&&s in Object(e)?o(e):a(e)}},function(e,t,n){var r=n(2)(Object,"create");e.exports=r},function(e,t,n){var r=n(62);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0});var o={},a=function(){function e(){}return e.getFromLocalStorage=function(e){return!1===r?o[e]:localStorage[e]},e.saveToLocalStorage=function(e,t){if(!1!==r)try{localStorage[e]=t}catch(n){r=!1,o[e]=t}else o[e]=t},e.removeFromLocalStorage=function(e){if(!1!==r)try{localStorage.removeItem(e)}catch(t){r=!1,delete o[e]}else delete o[e]},e}();t.default=a},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=r(n(3)),u=r(n(12)),i=r(n(28)),s=r(n(10)),f=void 0,c=null,l=function(){function e(){}return e.request=function(t,n,r){if(r=r||{},n=n||new a.default,e.deviceId||(e.deviceId=s.default.getFromLocalStorage(o.default.DEFAULT_KEYS.DEVICE_ID)),!e.deviceId){for(var l="",d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",p=0;p<16;p++)l+=d.charAt(Math.floor(Math.random()*d.length));e.deviceId=l,s.default.saveToLocalStorage(o.default.DEFAULT_KEYS.DEVICE_ID,l)}e.userId||(e.userId=s.default.getFromLocalStorage(o.default.DEFAULT_KEYS.USER_ID),e.userId||(e.userId=e.deviceId)),s.default.saveToLocalStorage(o.default.DEFAULT_KEYS.USER_ID,e.userId);var v=n.attachApiKeys(e.appId,e.clientKey).add(o.default.PARAMS.SDK_VERSION,o.default.SDK_VERSION).add(o.default.PARAMS.DEVICE_ID,e.deviceId).add(o.default.PARAMS.USER_ID,e.userId).add(o.default.PARAMS.ACTION,t).add(o.default.PARAMS.VERSION_NAME,e.versionName).add(o.default.PARAMS.DEV_MODE,u.default.devMode).add(o.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),S=r.success||r.response,g=r.error||r.response;if(!e.appId||!e.clientKey){var _="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(_),void(g&&g(_))}if(n.body())i.default.ajax("POST",e.apiPath+"?"+v.build(),n.body(),S,g,r.queued);else{var b=u.default.devMode||r.sendNow||!e.batchEnabled,h=function(){var t=e.popUnsentRequests();if(t.length>0){var n=JSON.stringify({data:t}),u=(new a.default).attachApiKeys(e.appId,e.clientKey).add(o.default.PARAMS.SDK_VERSION,o.default.SDK_VERSION).add(o.default.PARAMS.ACTION,o.default.METHODS.MULTI).add(o.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();i.default.ajax("POST",e.apiPath+"?"+u,n,S,g,r.queued)}};if(!b&&e.batchCooldown){var A=(new Date).getTime()/1e3;!f||A-f>=e.batchCooldown?(b=!0,f=A):c||(c=setTimeout((function(){c=null,f=(new Date).getTime()/1e3,h()}),1e3*(e.batchCooldown-(A-f))))}e.saveRequestForLater(v.buildDict()),b&&h()}},e.setNetworkTimeout=function(e){i.default.setNetworkTimeout(e)},e.saveRequestForLater=function(e){var t=s.default.getFromLocalStorage(o.default.DEFAULT_KEYS.COUNT)||0,n=o.default.DEFAULT_KEYS.ITEM+t;s.default.saveToLocalStorage(n,JSON.stringify(e)),t++,s.default.saveToLocalStorage(o.default.DEFAULT_KEYS.COUNT,t)},e.popUnsentRequests=function(){var e=[],t=s.default.getFromLocalStorage(o.default.DEFAULT_KEYS.COUNT)||0;s.default.removeFromLocalStorage(o.default.DEFAULT_KEYS.COUNT);for(var n=0;n<t;n++){var r=o.default.DEFAULT_KEYS.ITEM+n;try{var a=JSON.parse(s.default.getFromLocalStorage(r));e.push(a)}catch(e){}s.default.removeFromLocalStorage(r)}return e},e.numResponses=function(e){return e&&e.response?e.response.length:0},e.getResponseAt=function(e,t){return e&&e.response?e.response[t]:null},e.getLastResponse=function(t){var n=e.numResponses(t);return n>0?e.getResponseAt(t,n-1):null},e.isResponseSuccess=function(e){return!!e&&!!e.success},e.getResponseError=function(e){if(!e)return null;var t=e.error;return t?t.message:null},e.apiPath="https://www.leanplum.com/api",e.batchEnabled=!0,e.batchCooldown=5,e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.addStartResponseHandler=function(t){e.startHandlers.push(t),e.hasStarted&&t(e.startSuccessful)},e.removeStartResponseHandler=function(t){var n=e.startHandlers.indexOf(t);n>=0&&e.startHandlers.splice(n,1)},e.triggerStartHandlers=function(){for(var t=0;t<e.startHandlers.length;t++)e.startHandlers[t](e.startSuccessful)},e.addVariablesChangedHandler=function(t){e.variablesChangedHandlers.push(t),e.hasReceivedDiffs&&t()},e.removeVariablesChangedHandler=function(t){var n=e.variablesChangedHandlers.indexOf(t);n>=0&&e.variablesChangedHandlers.splice(n,1)},e.triggerVariablesChangedHandlers=function(){for(var t=0;t<e.variablesChangedHandlers.length;t++)e.variablesChangedHandlers[t]()},e.setVariantDebugInfoEnabled=function(t){e.variantDebugInfoEnabled=t},e.devMode=!1,e.variablesChangedHandlers=[],e.hasReceivedDiffs=!1,e.startHandlers=[],e.hasStarted=!1,e.startSuccessful=!1,e.variantDebugInfoEnabled=!1,e}();t.default=r},function(e,t,n){var r=n(2)(n(0),"Map");e.exports=r},function(e,t,n){var r=n(0).Symbol;e.exports=r},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var r=n(34);e.exports=function(e,t){return r(e,t)}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(6),o=n(20),a="[object AsyncFunction]",u="[object Function]",i="[object GeneratorFunction]",s="[object Proxy]";e.exports=function(e){if(!o(e))return!1;var t=r(e);return t==u||t==i||t==a||t==s}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(48))},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(54),o=n(61),a=n(63),u=n(64),i=n(65);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=u,s.prototype.set=i,e.exports=s},function(e,t,n){var r=n(66),o=n(69),a=n(70),u=1,i=2;e.exports=function(e,t,n,s,f,c){var l=n&u,d=e.length,p=t.length;if(d!=p&&!(l&&p>d))return!1;var v=c.get(e);if(v&&c.get(t))return v==t;var S=-1,g=!0,_=n&i?new r:void 0;for(c.set(e,t),c.set(t,e);++S<d;){var b=e[S],h=t[S];if(s)var A=l?s(h,b,S,t,e,c):s(b,h,S,e,t,c);if(void 0!==A){if(A)continue;g=!1;break}if(_){if(!o(t,(function(e,t){if(!a(_,t)&&(b===e||f(b,e,n,s,c)))return _.push(t)}))){g=!1;break}}else if(b!==h&&!f(b,h,n,s,c)){g=!1;break}}return c.delete(e),c.delete(t),g}},function(e,t,n){(function(e){var r=n(0),o=n(87),a=t&&!t.nodeType&&t,u=a&&"object"==typeof e&&e&&!e.nodeType&&e,i=u&&u.exports===a?r.Buffer:void 0,s=(i?i.isBuffer:void 0)||o;e.exports=s}).call(this,n(25)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(89),o=n(90),a=n(91),u=a&&a.isTypedArray,i=u?o(u):r;e.exports=i},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Function.prototype.apply,o=[],a=10,u=function(){function e(){}return e.setNetworkTimeout=function(e){a=e},e.ajax=function(t,n,o,u,i,s,f){if(s){if(e.runningRequest)return e.enqueueRequest(arguments);e.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===n.indexOf("https:")&&(n="http:"+n.substring(6)),r.call(e.ajaxIE8,null,arguments);var c=!1,l=new XMLHttpRequest;l.onreadystatechange=function(){if(4===l.readyState){if(c)return;var t;c=!0;var n=!1;if(f)t=l.responseText;else try{t=JSON.parse(l.responseText)}catch(e){setTimeout((function(){i&&i(null,l)}),0),n=!0}n||(l.status>=200&&l.status<300?setTimeout((function(){u&&u(t,l)}),0):setTimeout((function(){i&&i(t,l)}),0)),s&&(e.runningRequest=!1,e.dequeueRequest())}},l.open(t,n,!0),l.setRequestHeader("Content-Type","text/plain"),l.send(o),setTimeout((function(){c||l.abort()}),1e3*a)},e.ajaxIE8=function(t,n,r,o,u,i,s){var f=new XDomainRequest;f.onload=function(){var t,n=!1;if(s)t=f.responseText;else try{t=JSON.parse(f.responseText)}catch(e){setTimeout((function(){u&&u(null,f)}),0),n=!0}n||setTimeout((function(){o&&o(t,f)}),0),i&&(e.runningRequest=!1,e.dequeueRequest())},f.onerror=f.ontimeout=function(){setTimeout((function(){u&&u(null,f)}),0),i&&(e.runningRequest=!1,e.dequeueRequest())},f.onprogress=function(){},f.open(t,n),f.timeout=1e3*a,f.send(r)},e.enqueueRequest=function(e){o.push(e)},e.dequeueRequest=function(){var t=o.shift();t&&r.call(e.ajax,null,t)},e.runningRequest=!1,e}();t.default=u},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=r(n(12)),u=r(n(3)),i=r(n(10)),s=r(n(11)),f=function(){function e(){}return e.applyDiffs=function(t,n,r){e.diffs=t,e.variants=n,e.actionMetadata=r,a.default.hasReceivedDiffs=!0,e.merged=e.mergeHelper(e.variables,t),e.saveDiffs(),e.onUpdate&&e.onUpdate()},e.loadDiffs=function(){try{e.applyDiffs(JSON.parse(i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.ACTION_METADATA)||null)),e.token=i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.TOKEN),e.variantDebugInfo=i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(e){console.log("Leanplum: Invalid diffs: "+e)}},e.saveDiffs=function(){i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(e.diffs||{})),i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(e.variants||[])),i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.ACTION_METADATA,JSON.stringify(e.actionMetadata||{})),i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(e.variantDebugInfo||{})),i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.TOKEN,e.token)},e.setVariables=function(t){e.variables=t},e.getVariables=function(){return void 0!==e.merged?e.merged:e.variables},e.getVariantDebugInfo=function(){return e.variantDebugInfo},e.sendVariables=function(){var t={};t[o.default.PARAMS.VARIABLES]=e.variables,s.default.request(o.default.METHODS.SET_VARS,(new u.default).body(JSON.stringify(t)),{sendNow:!0})},e.mergeHelper=function(t,n){if("number"==typeof n||"boolean"==typeof n||"string"==typeof n)return n;if(null==n)return t;var r=function(e){return function(t){if(e instanceof Array)for(var n=0;n<e.length;n++)t(e[n]);else for(var r in e)({}).hasOwnProperty.call(e,r)&&t(r)}},o=r(t),a=r(n),u=!1;if(null===t&&!(n instanceof Array))for(var i in u=null,n)if(n.hasOwnProperty(i)){if(null===u&&(u=!0),"string"!=typeof i){u=!1;break}if(i.length<3||"["!==i.charAt(0)||"]"!==i.charAt(i.length-1)){u=!1;break}}if(t instanceof Array||u){var s=[];return o((function(e){s.push(e)})),a((function(t){for(var r=parseInt(t.substring(1,t.length-1)),o=n[t];r>=s.length;)s.push(null);s[r]=e.mergeHelper(s[r],o)})),s}var f={};return o((function(e){null!==n[e]&&void 0!==n[e]||(f[e]=t[e])})),a((function(r){f[r]=e.mergeHelper(null!==t?t[r]:null,n[r])})),f},e.clearUserContent=function(){e.diffs=void 0,e.variables=null,e.variants=[],e.variantDebugInfo={},e.merged=void 0},e.diffs=void 0,e.variables=null,e.variants=[],e.variantDebugInfo={},e.merged=void 0,e.onUpdate=void 0,e.token="",e.actionMetadata={},e}();t.default=f},function(e,t,n){var r=n(31);e.exports=r.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=r(n(12)),u=r(n(3)),i=r(n(32)),s=r(n(33)),f=r(n(10)),c=r(n(29)),l=r(n(11)),d=r(n(102)),p=new i.default,v=function(){function e(){}return e.setApiPath=function(e){l.default.apiPath&&(l.default.apiPath=e)},e.setEmail=function(t){e._email=t},e.setNetworkTimeout=function(e){l.default.setNetworkTimeout(e)},e.setVariantDebugInfoEnabled=function(e){a.default.setVariantDebugInfoEnabled(e)},e.getVariantDebugInfo=function(){return c.default.getVariantDebugInfo()},e.setAppIdForDevelopmentMode=function(e,t){l.default.appId=e,l.default.clientKey=t,a.default.devMode=!0},e.setAppIdForProductionMode=function(e,t){l.default.appId=e,l.default.clientKey=t,a.default.devMode=!1},e.setSocketHost=function(e){d.default.socketHost=e},e.setDeviceId=function(e){l.default.deviceId=e},e.setAppVersion=function(e){l.default.versionName=e},e.setDeviceName=function(t){e._deviceName=t},e.setDeviceModel=function(t){e._deviceModel=t},e.setSystemName=function(t){e._systemName=t},e.setSystemVersion=function(t){e._systemVersion=t},e.setVariables=function(e){c.default.setVariables(e)},e.setRequestBatching=function(e,t){l.default.batchEnabled=e,l.default.batchCooldown=t},e.getVariables=function(){return c.default.getVariables()},e.getVariable=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var r=e.getVariables(),o=0;o<t.length;o++)r=r[t[o]];return r},e.getVariants=function(){return c.default.variants||[]},e.addStartResponseHandler=function(e){a.default.addStartResponseHandler(e)},e.destroy=function(){l.default.apiPath="https://www.leanplum.com/api",l.default.batchEnabled=!0,l.default.batchCooldown=5,l.default.deviceId=void 0,l.default.userId=void 0,l.default.appId=void 0,l.default.clientKey=void 0,l.default.versionName=void 0,a.default.devMode=!1,a.default.variablesChangedHandlers=[],a.default.hasReceivedDiffs=!1,a.default.startHandlers=[],a.default.hasStarted=!1,a.default.startSuccessful=!1,a.default.variantDebugInfoEnabled=!1,c.default.diffs=void 0,c.default.variables=null,c.default.variants=[],c.default.variantDebugInfo={},c.default.merged=void 0,c.default.onUpdate=void 0,c.default.token="",c.default.actionMetadata={}},e.addVariablesChangedHandler=function(e){a.default.addVariablesChangedHandler(e)},e.removeStartResponseHandler=function(e){a.default.removeStartResponseHandler(e)},e.removeVariablesChangedHandler=function(e){a.default.removeVariablesChangedHandler(e)},e.forceContentUpdate=function(e){l.default.request(o.default.METHODS.GET_VARS,(new u.default).add(o.default.PARAMS.INCLUDE_DEFAULTS,!1).add(o.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,a.default.variantDebugInfoEnabled),{queued:!1,sendNow:!0,response:function(t){var n=l.default.getLastResponse(t),r=l.default.isResponseSuccess(n);r&&(c.default.applyDiffs(n[o.default.KEYS.VARS],n[o.default.KEYS.VARIANTS],n[o.default.KEYS.ACTION_METADATA]),c.default.variantDebugInfo=n[o.default.KEYS.VARIANT_DEBUG_INFO]),e&&e(r)}})},e.start=function(t,n,r){"function"==typeof t?(r=t,n={},t=null):"object"==typeof t&&null!=t?(r=n,n=t,t=null):"function"==typeof n&&(r=n,n={}),l.default.userId=t,r&&e.addStartResponseHandler(r),c.default.onUpdate=function(){a.default.triggerVariablesChangedHandlers()};var i=(new u.default).add(o.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(n)).add(o.default.PARAMS.COUNTRY,o.default.VALUES.DETECT).add(o.default.PARAMS.REGION,o.default.VALUES.DETECT).add(o.default.PARAMS.CITY,o.default.VALUES.DETECT).add(o.default.PARAMS.LOCATION,o.default.VALUES.DETECT).add(o.default.PARAMS.SYSTEM_NAME,e._systemName||p.OS).add(o.default.PARAMS.SYSTEM_VERSION,(e._systemVersion||"").toString()).add(o.default.PARAMS.BROWSER_NAME,p.browser).add(o.default.PARAMS.BROWSER_VERSION,p.version.toString()).add(o.default.PARAMS.LOCALE,o.default.VALUES.DETECT).add(o.default.PARAMS.DEVICE_NAME,e._deviceName||p.browser+" "+p.version).add(o.default.PARAMS.DEVICE_MODEL,e._deviceModel||"Web Browser").add(o.default.PARAMS.INCLUDE_DEFAULTS,!1).add(o.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,a.default.variantDebugInfoEnabled);l.default.request(o.default.METHODS.START,i,{queued:!0,sendNow:!0,response:function(e){a.default.hasStarted=!0;var t=l.default.getLastResponse(e);if(l.default.isResponseSuccess(t)){if(a.default.startSuccessful=!0,a.default.devMode){var n=t[o.default.KEYS.LATEST_VERSION];n&&console.log("A newer version of Leanplum, "+n+', is available.\nUse "npm update leanplum-sdk" or go to https://docs.leanplum.com/reference#javascript-setup to download it.'),d.default.connect()}c.default.applyDiffs(t[o.default.KEYS.VARS],t[o.default.KEYS.VARIANTS],t[o.default.KEYS.ACTION_METADATA]),c.default.variantDebugInfo=t[o.default.KEYS.VARIANT_DEBUG_INFO],c.default.token=t[o.default.KEYS.TOKEN]}else a.default.startSuccessful=!1,c.default.loadDiffs();a.default.triggerStartHandlers()}})},e.startFromCache=function(t,n,r){"function"==typeof t?(r=t,n={},t=null):"object"==typeof t&&null!=t?(r=n,n=t,t=null):"function"==typeof n&&(r=n,n={}),l.default.userId=t,r&&e.addStartResponseHandler(r),a.default.hasStarted=!0,a.default.startSuccessful=!0,a.default.devMode&&d.default.connect(),c.default.loadDiffs(),a.default.triggerStartHandlers()},e.stop=function(){l.default.request(o.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0})},e.pauseSession=function(){l.default.request(o.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},e.resumeSession=function(){l.default.request(o.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},e.pauseState=function(){l.default.request(o.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},e.resumeState=function(){l.default.request(o.default.METHODS.RESUME_STATE,void 0,{queued:!0})},e.setUserId=function(t){e.setUserAttributes(t)},e.setUserAttributes=function(e,t){if(void 0===t)if("object"==typeof e)t=e,e=void 0;else if("string"!=typeof e)return void console.log("Leanplum: setUserAttributes expects a string or an object");l.default.request(o.default.METHODS.SET_USER_ATTRIBUTES,(new u.default).add(o.default.PARAMS.USER_ATTRIBUTES,t?JSON.stringify(t):void 0).add(o.default.PARAMS.NEW_USER_ID,e),{queued:!0}),e&&(l.default.userId=e,f.default.saveToLocalStorage(o.default.DEFAULT_KEYS.USER_ID,l.default.userId))},e.track=function(e,t,n,r){"object"==typeof t&&null!=t?(r=t,n=void 0,t=void 0):"string"==typeof t?(r=n,n=t,t=void 0):"object"==typeof n&&null!=n&&(r=n,n=void 0),l.default.request(o.default.METHODS.TRACK,(new u.default).add(o.default.PARAMS.EVENT,e).add(o.default.PARAMS.VALUE,t||0).add(o.default.PARAMS.INFO,n).add(o.default.PARAMS.PARAMS,JSON.stringify(r)),{queued:!0})},e.advanceTo=function(e,t,n){"object"==typeof t&&null!=t&&(n=t,t=void 0),l.default.request(o.default.METHODS.ADVANCE,(new u.default).add(o.default.PARAMS.STATE,e).add(o.default.PARAMS.INFO,t).add(o.default.PARAMS.PARAMS,JSON.stringify(n)),{queued:!0})},e.isWebPushSupported=function(){return s.default.isWebPushSupported()},e.isWebPushSubscribed=function(){return s.default.isWebPushSubscribed()},e.registerForWebPush=function(e){return new Promise((function(t,n){return s.default.isWebPushSupported()?s.default.register(e,(function(e){return e?t(!0):s.default.subscribeUser()})):n("Leanplum: WebPush is not supported.")}))},e.unregisterFromWebPush=function(){return s.default.unsubscribeUser()},e.clearUserContent=function(){c.default.clearUserContent()},e}();t.default=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=[{string:navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:navigator.userAgent,subString:"OmniWeb",versionSearch:"OmniWeb/",identity:"OmniWeb"},{string:navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:window.opera,identity:"Opera",versionSearch:"Version"},{string:navigator.vendor,subString:"iCab",identity:"iCab"},{string:navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:navigator.vendor,subString:"Camino",identity:"Camino"},{string:navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}],o=[{string:navigator.platform,subString:"Win",identity:"Windows"},{string:navigator.platform,subString:"Mac",identity:"Mac OS"},{string:navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:navigator.userAgent,subString:"Android",identity:"Android"},{string:navigator.platform,subString:"Linux",identity:"Linux"}],a=function(){function e(){this.browser=this._searchString(r)||"Unknown Browser",this.version=this._searchVersion(navigator.userAgent)||this._searchVersion(navigator.appVersion)||"Unknown Version",this.OS=this._searchString(o)||"Unknown OS"}return e.prototype._searchString=function(e){for(var t=0;t<e.length;t++){var n=e[t].string,r=e[t].prop;if(this.versionSearchString=e[t].versionSearch||e[t].identity,n){if(-1!==n.indexOf(e[t].subString))return e[t].identity}else if(r)return e[t].identity}},e.prototype._searchVersion=function(e){if(!e)return-1;var t=e.indexOf(this.versionSearchString);return-1===t?-1:parseFloat(e.substring(t+this.versionSearchString.length+1))},e}();t.default=a},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=r(n(3)),u=r(n(16)),i=r(n(10)),s=r(n(11)),f=!1,c=null,l=function(){function e(){}return e.isWebPushSupported=function(){return navigator&&navigator.serviceWorker&&"serviceWorker"in navigator&&"PushManager"in window},e.isWebPushSubscribed=function(){return e.isWebPushSupported()?e.getServiceWorkerRegistration().then((function(t){return new Promise((function(n){t?t.pushManager.getSubscription().then((function(t){(f=null!==t)&&e.updateNewSubscriptionOnServer(t),n(f)})):n(!1)}))})):new Promise((function(e){e(!1)}))},e.register=function(t,n){if(!e.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),n(!1);navigator.serviceWorker.register(t||"/sw.min.js",null).then((function(t){(c=t).pushManager.getSubscription().then((function(t){if((f=!(null===t))&&e.updateNewSubscriptionOnServer(t),n)return n(f)}))})).catch((function(e){console.log("Leanplum: Service Worker Error: ",e)}))},e.subscribeUser=function(){var t=e.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68");return new Promise((function(n,r){return c.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:t}).then((function(t){return t?(e.updateNewSubscriptionOnServer(t),n(f=!0)):(f=!1,r())})).catch((function(e){return r("Leanplum: Failed to subscribe the user: "+e)}))}))},e.unsubscribeUser=function(){return new Promise((function(t,n){e.isWebPushSubscribed().then((function(e){if(!e)return t();c.pushManager.getSubscription().then((function(e){return e?e.unsubscribe():n()})).catch((function(e){n("Leanplum: Error unsubscribing: "+e)})).then((function(e){return e?(f=!1,t()):n()}))}),(function(e){return n()}))}))},e.getServiceWorkerRegistration=function(){return new Promise((function(e){c?e(c):navigator.serviceWorker.getRegistration().then((function(t){c=t,e(t)}))}))},e.urlB64ToUint8Array=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),n=window.atob(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r[o]=n.charCodeAt(o);return r},e.prepareSubscription=function(e){var t=Function.prototype.apply,n=e.getKey?e.getKey("p256dh"):"",r=e.getKey?e.getKey("auth"):"",o=btoa(t.call(String.fromCharCode,null,new Uint8Array(n))),a=btoa(t.call(String.fromCharCode,null,new Uint8Array(r)));return{endpoint:e.endpoint,key:o,auth:a}},e.updateNewSubscriptionOnServer=function(t){if(t){var n=e.prepareSubscription(t),r=JSON.stringify(n),a=i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION);u.default(a,r)||(i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,r),e.setSubscription(r))}},e.setSubscription=function(e){e&&s.default.request(o.default.METHODS.SET_DEVICE_ATTRIBUTES,(new a.default).add(o.default.PARAMS.WEB_PUSH_SUBSCRIPTION,e),{queued:!1,sendNow:!0})},e}();t.default=l},function(e,t,n){var r=n(35),o=n(9);e.exports=function e(t,n,a,u,i){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,a,u,e,i))}},function(e,t,n){var r=n(36),o=n(23),a=n(71),u=n(75),i=n(97),s=n(15),f=n(24),c=n(26),l=1,d="[object Arguments]",p="[object Array]",v="[object Object]",S=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,g,_,b){var h=s(e),A=s(t),E=h?p:i(e),y=A?p:i(t),T=(E=E==d?v:E)==v,I=(y=y==d?v:y)==v,m=E==y;if(m&&f(e)){if(!f(t))return!1;h=!0,T=!1}if(m&&!T)return b||(b=new r),h||c(e)?o(e,t,n,g,_,b):a(e,t,E,n,g,_,b);if(!(n&l)){var O=T&&S.call(e,"__wrapped__"),R=I&&S.call(t,"__wrapped__");if(O||R){var D=O?e.value():e,M=R?t.value():t;return b||(b=new r),_(D,M,n,g,b)}}return!!m&&(b||(b=new r),u(e,t,n,g,_,b))}},function(e,t,n){var r=n(4),o=n(42),a=n(43),u=n(44),i=n(45),s=n(46);function f(e){var t=this.__data__=new r(e);this.size=t.size}f.prototype.clear=o,f.prototype.delete=a,f.prototype.get=u,f.prototype.has=i,f.prototype.set=s,e.exports=f},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(5),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(5);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(5);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(5);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(4);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(4),o=n(13),a=n(22),u=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var i=n.__data__;if(!o||i.length<u-1)return i.push([e,t]),this.size=++n.size,this;n=this.__data__=new a(i)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(18),o=n(51),a=n(20),u=n(21),i=/^\[object .+?Constructor\]$/,s=Function.prototype,f=Object.prototype,c=s.toString,l=f.hasOwnProperty,d=RegExp("^"+c.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||o(e))&&(r(e)?d:i).test(u(e))}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(14),o=Object.prototype,a=o.hasOwnProperty,u=o.toString,i=r?r.toStringTag:void 0;e.exports=function(e){var t=a.call(e,i),n=e[i];try{e[i]=void 0;var r=!0}catch(e){}var o=u.call(e);return r&&(t?e[i]=n:delete e[i]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r,o=n(52),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!a&&a in e}},function(e,t,n){var r=n(0)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(55),o=n(4),a=n(13);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(e,t,n){var r=n(56),o=n(57),a=n(58),u=n(59),i=n(60);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=u,s.prototype.set=i,e.exports=s},function(e,t,n){var r=n(7);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(7),o="__lodash_hash_undefined__",a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return n===o?void 0:n}return a.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(7),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(7),o="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?o:t,this}},function(e,t,n){var r=n(8);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(8);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(8);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(8);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(22),o=n(67),a=n(68);function u(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}u.prototype.add=u.prototype.push=o,u.prototype.has=a,e.exports=u},function(e,t){var n="__lodash_hash_undefined__";e.exports=function(e){return this.__data__.set(e,n),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t,n){var r=n(14),o=n(72),a=n(17),u=n(23),i=n(73),s=n(74),f=1,c=2,l="[object Boolean]",d="[object Date]",p="[object Error]",v="[object Map]",S="[object Number]",g="[object RegExp]",_="[object Set]",b="[object String]",h="[object Symbol]",A="[object ArrayBuffer]",E="[object DataView]",y=r?r.prototype:void 0,T=y?y.valueOf:void 0;e.exports=function(e,t,n,r,y,I,m){switch(n){case E:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case A:return!(e.byteLength!=t.byteLength||!I(new o(e),new o(t)));case l:case d:case S:return a(+e,+t);case p:return e.name==t.name&&e.message==t.message;case g:case b:return e==t+"";case v:var O=i;case _:var R=r&f;if(O||(O=s),e.size!=t.size&&!R)return!1;var D=m.get(e);if(D)return D==t;r|=c,m.set(e,t);var M=u(O(e),O(t),r,y,I,m);return m.delete(e),M;case h:if(T)return T.call(e)==T.call(t)}return!1}},function(e,t,n){var r=n(0).Uint8Array;e.exports=r},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t,n){var r=n(76),o=1,a=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,u,i,s){var f=n&o,c=r(e),l=c.length;if(l!=r(t).length&&!f)return!1;for(var d=l;d--;){var p=c[d];if(!(f?p in t:a.call(t,p)))return!1}var v=s.get(e);if(v&&s.get(t))return v==t;var S=!0;s.set(e,t),s.set(t,e);for(var g=f;++d<l;){var _=e[p=c[d]],b=t[p];if(u)var h=f?u(b,_,p,t,e,s):u(_,b,p,e,t,s);if(!(void 0===h?_===b||i(_,b,n,u,s):h)){S=!1;break}g||(g="constructor"==p)}if(S&&!g){var A=e.constructor,E=t.constructor;A!=E&&"constructor"in e&&"constructor"in t&&!("function"==typeof A&&A instanceof A&&"function"==typeof E&&E instanceof E)&&(S=!1)}return s.delete(e),s.delete(t),S}},function(e,t,n){var r=n(77),o=n(79),a=n(82);e.exports=function(e){return r(e,a,o)}},function(e,t,n){var r=n(78),o=n(15);e.exports=function(e,t,n){var a=t(e);return o(e)?a:r(a,n(e))}},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t,n){var r=n(80),o=n(81),a=Object.prototype.propertyIsEnumerable,u=Object.getOwnPropertySymbols,i=u?function(e){return null==e?[]:(e=Object(e),r(u(e),(function(t){return a.call(e,t)})))}:o;e.exports=i},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,a=[];++n<r;){var u=e[n];t(u,n,e)&&(a[o++]=u)}return a}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(83),o=n(92),a=n(96);e.exports=function(e){return a(e)?r(e):o(e)}},function(e,t,n){var r=n(84),o=n(85),a=n(15),u=n(24),i=n(88),s=n(26),f=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=a(e),c=!n&&o(e),l=!n&&!c&&u(e),d=!n&&!c&&!l&&s(e),p=n||c||l||d,v=p?r(e.length,String):[],S=v.length;for(var g in e)!t&&!f.call(e,g)||p&&("length"==g||l&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||i(g,S))||v.push(g);return v}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(86),o=n(9),a=Object.prototype,u=a.hasOwnProperty,i=a.propertyIsEnumerable,s=r(function(){return arguments}())?r:function(e){return o(e)&&u.call(e,"callee")&&!i.call(e,"callee")};e.exports=s},function(e,t,n){var r=n(6),o=n(9),a="[object Arguments]";e.exports=function(e){return o(e)&&r(e)==a}},function(e,t){e.exports=function(){return!1}},function(e,t){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var o=typeof e;return!!(t=null==t?n:t)&&("number"==o||"symbol"!=o&&r.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(6),o=n(27),a=n(9),u={};u["[object Float32Array]"]=u["[object Float64Array]"]=u["[object Int8Array]"]=u["[object Int16Array]"]=u["[object Int32Array]"]=u["[object Uint8Array]"]=u["[object Uint8ClampedArray]"]=u["[object Uint16Array]"]=u["[object Uint32Array]"]=!0,u["[object Arguments]"]=u["[object Array]"]=u["[object ArrayBuffer]"]=u["[object Boolean]"]=u["[object DataView]"]=u["[object Date]"]=u["[object Error]"]=u["[object Function]"]=u["[object Map]"]=u["[object Number]"]=u["[object Object]"]=u["[object RegExp]"]=u["[object Set]"]=u["[object String]"]=u["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&o(e.length)&&!!u[r(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(19),o=t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,u=a&&a.exports===o&&r.process,i=function(){try{var e=a&&a.require&&a.require("util").types;return e||u&&u.binding&&u.binding("util")}catch(e){}}();e.exports=i}).call(this,n(25)(e))},function(e,t,n){var r=n(93),o=n(94),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))a.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(95)(Object.keys,Object);e.exports=r},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(18),o=n(27);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(98),o=n(13),a=n(99),u=n(100),i=n(101),s=n(6),f=n(21),c=f(r),l=f(o),d=f(a),p=f(u),v=f(i),S=s;(r&&"[object DataView]"!=S(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=S(new o)||a&&"[object Promise]"!=S(a.resolve())||u&&"[object Set]"!=S(new u)||i&&"[object WeakMap]"!=S(new i))&&(S=function(e){var t=s(e),n="[object Object]"==t?e.constructor:void 0,r=n?f(n):"";if(r)switch(r){case c:return"[object DataView]";case l:return"[object Map]";case d:return"[object Promise]";case p:return"[object Set]";case v:return"[object WeakMap]"}return t}),e.exports=S},function(e,t,n){var r=n(2)(n(0),"DataView");e.exports=r},function(e,t,n){var r=n(2)(n(0),"Promise");e.exports=r},function(e,t,n){var r=n(2)(n(0),"Set");e.exports=r},function(e,t,n){var r=n(2)(n(0),"WeakMap");e.exports=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=r(n(3)),u=r(n(103)),i=r(n(29)),s=r(n(11)),f=r(n(16)),c=function(){function e(){}return e.connect=function(){if(WebSocket){var t=new u.default,n=!1;t.onopen=function(){if(!n){console.log("Leanplum: Connected to development server.");var e={};e[o.default.PARAMS.APP_ID]=s.default.appId,e[o.default.PARAMS.DEVICE_ID]=s.default.deviceId,t.send("auth",e),n=!0}},t.onerror=function(e){console.log("Leanplum: Socket error",e)},t.onmessage=function(e,n){"updateVars"===e?s.default.request(o.default.METHODS.GET_VARS,(new a.default).add(o.default.PARAMS.INCLUDE_DEFAULTS,!1),{queued:!1,sendNow:!0,response:function(e){var t=s.default.getLastResponse(e),n=t[o.default.KEYS.VARS],r=t[o.default.KEYS.VARIANTS],a=t[o.default.KEYS.ACTION_METADATA];f.default(n,i.default.diffs)||i.default.applyDiffs(n,r,a)}}):"getVariables"===e?(i.default.sendVariables(),t.send("getContentResponse",{updated:!0})):"getActions"===e?t.send("getContentResponse",{updated:!1}):"registerDevice"===e&&alert("Your device has been registered to "+n[0].email+".")},t.onclose=function(){console.log("Leanplum: Disconnected to development server."),n=!1},t.connect(e.socketHost),setInterval((function(){t.connected||t.connecting||t.connect(e.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},e.socketHost="dev.leanplum.com",e}();t.default=c},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(28)),a=function(){function e(){this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return e.prototype.connect=function(e){var t=this;t.connecting=!0,o.default.ajax("POST","https://"+e+"/socket.io/1","",(function(n){var r=n.split(":"),o=r[0],a=parseInt(r[1])/2*1e3;t.socket=new WebSocket("wss://"+e+"/socket.io/1/websocket/"+o);var u=null;t.socket.onopen=function(){t.connected=!0,t.connecting=!1,t.onopen&&t.onopen(),u=setInterval((function(){t.socket.send("2:::")}),a)},t.socket.onclose=function(){t.connected=!1,clearInterval(u),t.onclose&&t.onclose()},t.socket.onmessage=function(e){var n=e.data.split(":"),r=parseInt(n[0]);if(2===r)t.socket.send("2::");else if(5===r){var o=n[1],a=JSON.parse(n.slice(3).join(":")),u=a.name,i=a.args;o&&t.socket.send("6:::"+o),t.onmessage&&t.onmessage(u,i)}else 7===r&&console.log("Socket error: "+e.data)},t.socket.onerror=function(e){t.socket.close(),t.onerror&&t.onerror(e)}}),null,!1,!0)},e.prototype.send=function(e,t){if(this.connected){var n=JSON.stringify({name:e,args:t});this.socket.send("5:::"+n)}else console.log("Leanplum: Socket is not connected.")},e}();t.default=a}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,