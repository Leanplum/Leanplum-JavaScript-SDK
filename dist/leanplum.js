!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=30)}([function(e,t,n){var r=n(19),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();e.exports=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.3.0",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_METADATA:"actionMetadata",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_METADATA:"__leanplum_action_metadata",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)"}}},function(e,t,n){var r=n(46),o=n(52);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=function(){function e(){this.argString="",this.argValues={}}return e.prototype.add=function(e,t){if(void 0===t)return this;this.argString&&(this.argString+="&");var n=encodeURIComponent(t);return this.argString+=e+"="+n,this.argValues[e]=t,this},e.prototype.body=function(e){return e?(this._body=e,this):this._body},e.prototype.attachApiKeys=function(e,t){return this.add(o.default.PARAMS.APP_ID,e).add(o.default.PARAMS.CLIENT,o.default.CLIENT).add(o.default.PARAMS.CLIENT_KEY,t)},e.prototype.build=function(){return this.argString},e.prototype.buildDict=function(){return this.argValues},e}();t.default=a},function(e,t,n){var r=n(36),o=n(37),a=n(38),u=n(39),i=n(40);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=u,s.prototype.set=i,e.exports=s},function(e,t,n){var r=n(17);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(14),o=n(48),a=n(49),u="[object Null]",i="[object Undefined]",s=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?i:u:s&&s in Object(e)?o(e):a(e)}},function(e,t,n){var r=n(2)(Object,"create");e.exports=r},function(e,t,n){var r=n(61);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0});var o={},a=function(){function e(){}return e.getFromLocalStorage=function(e){return!1===r?o[e]:localStorage[e]},e.saveToLocalStorage=function(e,t){if(!1!==r)try{localStorage[e]=t}catch(n){r=!1,o[e]=t}else o[e]=t},e.removeFromLocalStorage=function(e){if(!1!==r)try{localStorage.removeItem(e)}catch(t){r=!1,delete o[e]}else delete o[e]},e}();t.default=a},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=r(n(3)),u=r(n(12)),i=r(n(28)),s=r(n(10)),f=void 0,c=null,l=function(){function e(){}return e.request=function(t,n,r){if(r=r||{},n=n||new a.default,e.deviceId||(e.deviceId=s.default.getFromLocalStorage(o.default.DEFAULT_KEYS.DEVICE_ID)),!e.deviceId){for(var l="",d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",p=0;p<16;p++)l+=d.charAt(Math.floor(Math.random()*d.length));e.deviceId=l,s.default.saveToLocalStorage(o.default.DEFAULT_KEYS.DEVICE_ID,l)}e.userId||(e.userId=s.default.getFromLocalStorage(o.default.DEFAULT_KEYS.USER_ID),e.userId||(e.userId=e.deviceId)),s.default.saveToLocalStorage(o.default.DEFAULT_KEYS.USER_ID,e.userId);var v=n.attachApiKeys(e.appId,e.clientKey).add(o.default.PARAMS.SDK_VERSION,o.default.SDK_VERSION).add(o.default.PARAMS.DEVICE_ID,e.deviceId).add(o.default.PARAMS.USER_ID,e.userId).add(o.default.PARAMS.ACTION,t).add(o.default.PARAMS.VERSION_NAME,e.versionName).add(o.default.PARAMS.DEV_MODE,u.default.devMode).add(o.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),S=r.success||r.response,g=r.error||r.response;if(!e.appId||!e.clientKey){var _="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(_),void(g&&g(_))}if(n.body())i.default.ajax("POST",e.apiPath+"?"+v.build(),n.body(),S,g,r.queued);else{var b=u.default.devMode||r.sendNow||!e.batchEnabled,A=function(){var t=e.popUnsentRequests();if(t.length>0){var n=JSON.stringify({data:t}),u=(new a.default).attachApiKeys(e.appId,e.clientKey).add(o.default.PARAMS.SDK_VERSION,o.default.SDK_VERSION).add(o.default.PARAMS.ACTION,o.default.METHODS.MULTI).add(o.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();i.default.ajax("POST",e.apiPath+"?"+u,n,S,g,r.queued)}};if(!b&&e.batchCooldown){var h=(new Date).getTime()/1e3;!f||h-f>=e.batchCooldown?(b=!0,f=h):c||(c=setTimeout((function(){c=null,f=(new Date).getTime()/1e3,A()}),1e3*(e.batchCooldown-(h-f))))}e.saveRequestForLater(v.buildDict()),b&&A()}},e.setNetworkTimeout=function(e){i.default.setNetworkTimeout(e)},e.saveRequestForLater=function(e){var t=s.default.getFromLocalStorage(o.default.DEFAULT_KEYS.COUNT)||0,n=o.default.DEFAULT_KEYS.ITEM+t;s.default.saveToLocalStorage(n,JSON.stringify(e)),t++,s.default.saveToLocalStorage(o.default.DEFAULT_KEYS.COUNT,t)},e.popUnsentRequests=function(){var e=[],t=s.default.getFromLocalStorage(o.default.DEFAULT_KEYS.COUNT)||0;s.default.removeFromLocalStorage(o.default.DEFAULT_KEYS.COUNT);for(var n=0;n<t;n++){var r=o.default.DEFAULT_KEYS.ITEM+n;try{var a=JSON.parse(s.default.getFromLocalStorage(r));e.push(a)}catch(e){}s.default.removeFromLocalStorage(r)}return e},e.numResponses=function(e){return e&&e.response?e.response.length:0},e.getResponseAt=function(e,t){return e&&e.response?e.response[t]:null},e.getLastResponse=function(t){var n=e.numResponses(t);return n>0?e.getResponseAt(t,n-1):null},e.isResponseSuccess=function(e){return!!e&&!!e.success},e.getResponseError=function(e){if(!e)return null;var t=e.error;return t?t.message:null},e.apiPath="https://www.leanplum.com/api",e.batchEnabled=!0,e.batchCooldown=5,e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.addStartResponseHandler=function(t){e.startHandlers.push(t),e.hasStarted&&t(e.startSuccessful)},e.removeStartResponseHandler=function(t){var n=e.startHandlers.indexOf(t);n>=0&&e.startHandlers.splice(n,1)},e.triggerStartHandlers=function(){for(var t=0;t<e.startHandlers.length;t++)e.startHandlers[t](e.startSuccessful)},e.addVariablesChangedHandler=function(t){e.variablesChangedHandlers.push(t),e.hasReceivedDiffs&&t()},e.removeVariablesChangedHandler=function(t){var n=e.variablesChangedHandlers.indexOf(t);n>=0&&e.variablesChangedHandlers.splice(n,1)},e.triggerVariablesChangedHandlers=function(){for(var t=0;t<e.variablesChangedHandlers.length;t++)e.variablesChangedHandlers[t]()},e.setVariantDebugInfoEnabled=function(t){e.variantDebugInfoEnabled=t},e.devMode=!1,e.variablesChangedHandlers=[],e.hasReceivedDiffs=!1,e.startHandlers=[],e.hasStarted=!1,e.startSuccessful=!1,e.variantDebugInfoEnabled=!1,e}();t.default=r},function(e,t,n){var r=n(2)(n(0),"Map");e.exports=r},function(e,t,n){var r=n(0).Symbol;e.exports=r},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var r=n(33);e.exports=function(e,t){return r(e,t)}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(6),o=n(20),a="[object AsyncFunction]",u="[object Function]",i="[object GeneratorFunction]",s="[object Proxy]";e.exports=function(e){if(!o(e))return!1;var t=r(e);return t==u||t==i||t==a||t==s}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(47))},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(53),o=n(60),a=n(62),u=n(63),i=n(64);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=u,s.prototype.set=i,e.exports=s},function(e,t,n){var r=n(65),o=n(68),a=n(69),u=1,i=2;e.exports=function(e,t,n,s,f,c){var l=n&u,d=e.length,p=t.length;if(d!=p&&!(l&&p>d))return!1;var v=c.get(e);if(v&&c.get(t))return v==t;var S=-1,g=!0,_=n&i?new r:void 0;for(c.set(e,t),c.set(t,e);++S<d;){var b=e[S],A=t[S];if(s)var h=l?s(A,b,S,t,e,c):s(b,A,S,e,t,c);if(void 0!==h){if(h)continue;g=!1;break}if(_){if(!o(t,(function(e,t){if(!a(_,t)&&(b===e||f(b,e,n,s,c)))return _.push(t)}))){g=!1;break}}else if(b!==A&&!f(b,A,n,s,c)){g=!1;break}}return c.delete(e),c.delete(t),g}},function(e,t,n){(function(e){var r=n(0),o=n(86),a=t&&!t.nodeType&&t,u=a&&"object"==typeof e&&e&&!e.nodeType&&e,i=u&&u.exports===a?r.Buffer:void 0,s=(i?i.isBuffer:void 0)||o;e.exports=s}).call(this,n(25)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(88),o=n(89),a=n(90),u=a&&a.isTypedArray,i=u?o(u):r;e.exports=i},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Function.prototype.apply,o=[],a=10,u=function(){function e(){}return e.setNetworkTimeout=function(e){a=e},e.ajax=function(t,n,o,u,i,s,f){if(s){if(e.runningRequest)return e.enqueueRequest(arguments);e.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===n.indexOf("https:")&&(n="http:"+n.substring(6)),r.call(e.ajaxIE8,null,arguments);var c=!1,l=new XMLHttpRequest;l.onreadystatechange=function(){if(4===l.readyState){if(c)return;var t;c=!0;var n=!1;if(f)t=l.responseText;else try{t=JSON.parse(l.responseText)}catch(e){setTimeout((function(){i&&i(null,l)}),0),n=!0}n||(l.status>=200&&l.status<300?setTimeout((function(){u&&u(t,l)}),0):setTimeout((function(){i&&i(t,l)}),0)),s&&(e.runningRequest=!1,e.dequeueRequest())}},l.open(t,n,!0),l.setRequestHeader("Content-Type","text/plain"),l.send(o),setTimeout((function(){c||l.abort()}),1e3*a)},e.ajaxIE8=function(t,n,r,o,u,i,s){var f=new XDomainRequest;f.onload=function(){var t,n=!1;if(s)t=f.responseText;else try{t=JSON.parse(f.responseText)}catch(e){setTimeout((function(){u&&u(null,f)}),0),n=!0}n||setTimeout((function(){o&&o(t,f)}),0),i&&(e.runningRequest=!1,e.dequeueRequest())},f.onerror=f.ontimeout=function(){setTimeout((function(){u&&u(null,f)}),0),i&&(e.runningRequest=!1,e.dequeueRequest())},f.onprogress=function(){},f.open(t,n),f.timeout=1e3*a,f.send(r)},e.enqueueRequest=function(e){o.push(e)},e.dequeueRequest=function(){var t=o.shift();t&&r.call(e.ajax,null,t)},e.runningRequest=!1,e}();t.default=u},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=r(n(12)),u=r(n(3)),i=r(n(10)),s=r(n(11)),f=function(){function e(){}return e.applyDiffs=function(t,n,r){e.diffs=t,e.variants=n,e.actionMetadata=r,a.default.hasReceivedDiffs=!0,e.merged=e.mergeHelper(e.variables,t),e.saveDiffs(),e.onUpdate&&e.onUpdate()},e.loadDiffs=function(){try{e.applyDiffs(JSON.parse(i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.ACTION_METADATA)||null)),e.token=i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.TOKEN),e.variantDebugInfo=i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(e){console.log("Leanplum: Invalid diffs: "+e)}},e.saveDiffs=function(){i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(e.diffs||{})),i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(e.variants||[])),i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.ACTION_METADATA,JSON.stringify(e.actionMetadata||{})),i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(e.variantDebugInfo||{})),i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.TOKEN,e.token)},e.setVariables=function(t){e.variables=t},e.getVariables=function(){return void 0!==e.merged?e.merged:e.variables},e.getVariantDebugInfo=function(){return e.variantDebugInfo},e.sendVariables=function(){var t={};t[o.default.PARAMS.VARIABLES]=e.variables,s.default.request(o.default.METHODS.SET_VARS,(new u.default).body(JSON.stringify(t)),{sendNow:!0})},e.mergeHelper=function(t,n){if("number"==typeof n||"boolean"==typeof n||"string"==typeof n)return n;if(null==n)return t;var r=function(e){return function(t){if(e instanceof Array)for(var n=0;n<e.length;n++)t(e[n]);else for(var r in e)({}).hasOwnProperty.call(e,r)&&t(r)}},o=r(t),a=r(n),u=!1;if(null===t&&!(n instanceof Array))for(var i in u=null,n)if(n.hasOwnProperty(i)){if(null===u&&(u=!0),"string"!=typeof i){u=!1;break}if(i.length<3||"["!==i.charAt(0)||"]"!==i.charAt(i.length-1)){u=!1;break}}if(t instanceof Array||u){var s=[];return o((function(e){s.push(e)})),a((function(t){for(var r=parseInt(t.substring(1,t.length-1)),o=n[t];r>=s.length;)s.push(null);s[r]=e.mergeHelper(s[r],o)})),s}var f={};return o((function(e){null!==n[e]&&void 0!==n[e]||(f[e]=t[e])})),a((function(r){f[r]=e.mergeHelper(null!==t?t[r]:null,n[r])})),f},e.clearUserContent=function(){e.diffs=void 0,e.variables=null,e.variants=[],e.variantDebugInfo={},e.merged=void 0},e.diffs=void 0,e.variables=null,e.variants=[],e.variantDebugInfo={},e.merged=void 0,e.onUpdate=void 0,e.token="",e.actionMetadata={},e}();t.default=f},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=r(n(12)),u=r(n(3)),i=r(n(31)),s=r(n(32)),f=r(n(10)),c=r(n(29)),l=r(n(11)),d=r(n(101)),p=new i.default,v=function(){function e(){}return e.setApiPath=function(e){l.default.apiPath&&(l.default.apiPath=e)},e.setEmail=function(t){e._email=t},e.setNetworkTimeout=function(e){l.default.setNetworkTimeout(e)},e.setVariantDebugInfoEnabled=function(e){a.default.setVariantDebugInfoEnabled(e)},e.getVariantDebugInfo=function(){return c.default.getVariantDebugInfo()},e.setAppIdForDevelopmentMode=function(e,t){l.default.appId=e,l.default.clientKey=t,a.default.devMode=!0},e.setAppIdForProductionMode=function(e,t){l.default.appId=e,l.default.clientKey=t,a.default.devMode=!1},e.setSocketHost=function(e){d.default.socketHost=e},e.setDeviceId=function(e){l.default.deviceId=e},e.setAppVersion=function(e){l.default.versionName=e},e.setDeviceName=function(t){e._deviceName=t},e.setDeviceModel=function(t){e._deviceModel=t},e.setSystemName=function(t){e._systemName=t},e.setSystemVersion=function(t){e._systemVersion=t},e.setVariables=function(e){c.default.setVariables(e)},e.setRequestBatching=function(e,t){l.default.batchEnabled=e,l.default.batchCooldown=t},e.getVariables=function(){return c.default.getVariables()},e.getVariable=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var r=e.getVariables(),o=0;o<t.length;o++)r=r[t[o]];return r},e.getVariants=function(){return c.default.variants||[]},e.addStartResponseHandler=function(e){a.default.addStartResponseHandler(e)},e.addVariablesChangedHandler=function(e){a.default.addVariablesChangedHandler(e)},e.removeStartResponseHandler=function(e){a.default.removeStartResponseHandler(e)},e.removeVariablesChangedHandler=function(e){a.default.removeVariablesChangedHandler(e)},e.forceContentUpdate=function(e){l.default.request(o.default.METHODS.GET_VARS,(new u.default).add(o.default.PARAMS.INCLUDE_DEFAULTS,!1).add(o.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,a.default.variantDebugInfoEnabled),{queued:!1,sendNow:!0,response:function(t){var n=l.default.getLastResponse(t),r=l.default.isResponseSuccess(n);r&&(c.default.applyDiffs(n[o.default.KEYS.VARS],n[o.default.KEYS.VARIANTS],n[o.default.KEYS.ACTION_METADATA]),c.default.variantDebugInfo=n[o.default.KEYS.VARIANT_DEBUG_INFO]),e&&e(r)}})},e.start=function(t,n,r){"function"==typeof t?(r=t,n={},t=null):"object"==typeof t&&null!=t?(r=n,n=t,t=null):"function"==typeof n&&(r=n,n={}),l.default.userId=t,r&&e.addStartResponseHandler(r),c.default.onUpdate=function(){a.default.triggerVariablesChangedHandlers()};var i=(new u.default).add(o.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(n)).add(o.default.PARAMS.COUNTRY,o.default.VALUES.DETECT).add(o.default.PARAMS.REGION,o.default.VALUES.DETECT).add(o.default.PARAMS.CITY,o.default.VALUES.DETECT).add(o.default.PARAMS.LOCATION,o.default.VALUES.DETECT).add(o.default.PARAMS.SYSTEM_NAME,e._systemName||p.OS).add(o.default.PARAMS.SYSTEM_VERSION,(e._systemVersion||"").toString()).add(o.default.PARAMS.BROWSER_NAME,p.browser).add(o.default.PARAMS.BROWSER_VERSION,p.version.toString()).add(o.default.PARAMS.LOCALE,o.default.VALUES.DETECT).add(o.default.PARAMS.DEVICE_NAME,e._deviceName||p.browser+" "+p.version).add(o.default.PARAMS.DEVICE_MODEL,e._deviceModel||"Web Browser").add(o.default.PARAMS.INCLUDE_DEFAULTS,!1).add(o.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,a.default.variantDebugInfoEnabled);l.default.request(o.default.METHODS.START,i,{queued:!0,sendNow:!0,response:function(e){a.default.hasStarted=!0;var t=l.default.getLastResponse(e);if(l.default.isResponseSuccess(t)){if(a.default.startSuccessful=!0,a.default.devMode){var n=t[o.default.KEYS.LATEST_VERSION];n&&console.log("A newer version of Leanplum, "+n+", is available. Go toleanplum.com to download it."),d.default.connect()}c.default.applyDiffs(t[o.default.KEYS.VARS],t[o.default.KEYS.VARIANTS],t[o.default.KEYS.ACTION_METADATA]),c.default.variantDebugInfo=t[o.default.KEYS.VARIANT_DEBUG_INFO],c.default.token=t[o.default.KEYS.TOKEN]}else a.default.startSuccessful=!1,c.default.loadDiffs();a.default.triggerStartHandlers()}})},e.startFromCache=function(t,n,r){"function"==typeof t?(r=t,n={},t=null):"object"==typeof t&&null!=t?(r=n,n=t,t=null):"function"==typeof n&&(r=n,n={}),l.default.userId=t,r&&e.addStartResponseHandler(r),a.default.hasStarted=!0,a.default.startSuccessful=!0,a.default.devMode&&d.default.connect(),c.default.loadDiffs(),a.default.triggerStartHandlers()},e.stop=function(){l.default.request(o.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0})},e.pauseSession=function(){l.default.request(o.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},e.resumeSession=function(){l.default.request(o.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},e.pauseState=function(){l.default.request(o.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},e.resumeState=function(){l.default.request(o.default.METHODS.RESUME_STATE,void 0,{queued:!0})},e.setUserId=function(t){e.setUserAttributes(t)},e.setUserAttributes=function(e,t){if(void 0===t)if("object"==typeof e)t=e,e=void 0;else if("string"!=typeof e)return void console.log("Leanplum: setUserAttributes expects a string or an object");l.default.request(o.default.METHODS.SET_USER_ATTRIBUTES,(new u.default).add(o.default.PARAMS.USER_ATTRIBUTES,t?JSON.stringify(t):void 0).add(o.default.PARAMS.NEW_USER_ID,e),{queued:!0}),e&&(l.default.userId=e,f.default.saveToLocalStorage(o.default.DEFAULT_KEYS.USER_ID,l.default.userId))},e.track=function(e,t,n,r){"object"==typeof t&&null!=t?(r=t,n=void 0,t=void 0):"string"==typeof t?(r=n,n=t,t=void 0):"object"==typeof n&&null!=n&&(r=n,n=void 0),l.default.request(o.default.METHODS.TRACK,(new u.default).add(o.default.PARAMS.EVENT,e).add(o.default.PARAMS.VALUE,t||0).add(o.default.PARAMS.INFO,n).add(o.default.PARAMS.PARAMS,JSON.stringify(r)),{queued:!0})},e.advanceTo=function(e,t,n){"object"==typeof t&&null!=t&&(n=t,t=void 0),l.default.request(o.default.METHODS.ADVANCE,(new u.default).add(o.default.PARAMS.STATE,e).add(o.default.PARAMS.INFO,t).add(o.default.PARAMS.PARAMS,JSON.stringify(n)),{queued:!0})},e.isWebPushSupported=function(){return s.default.isWebPushSupported()},e.isWebPushSubscribed=function(){return s.default.isWebPushSubscribed()},e.registerForWebPush=function(e){return new Promise((function(t,n){return s.default.isWebPushSupported()?s.default.register(e,(function(e){return e?t(!0):s.default.subscribeUser()})):n("Leanplum: WebPush is not supported.")}))},e.unregisterFromWebPush=function(){return s.default.unsubscribeUser()},e.clearUserContent=function(){c.default.clearUserContent()},e}();t.default=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=[{string:navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:navigator.userAgent,subString:"OmniWeb",versionSearch:"OmniWeb/",identity:"OmniWeb"},{string:navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:window.opera,identity:"Opera",versionSearch:"Version"},{string:navigator.vendor,subString:"iCab",identity:"iCab"},{string:navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:navigator.vendor,subString:"Camino",identity:"Camino"},{string:navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}],o=[{string:navigator.platform,subString:"Win",identity:"Windows"},{string:navigator.platform,subString:"Mac",identity:"Mac OS"},{string:navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:navigator.platform,subString:"Linux",identity:"Linux"}],a=function(){function e(){this.browser=this._searchString(r)||"Unknown Browser",this.version=this._searchVersion(navigator.userAgent)||this._searchVersion(navigator.appVersion)||"Unknown Version",this.OS=this._searchString(o)||"Unknown OS"}return e.prototype._searchString=function(e){for(var t=0;t<e.length;t++){var n=e[t].string,r=e[t].prop;if(this.versionSearchString=e[t].versionSearch||e[t].identity,n){if(-1!==n.indexOf(e[t].subString))return e[t].identity}else if(r)return e[t].identity}},e.prototype._searchVersion=function(e){if(!e)return-1;var t=e.indexOf(this.versionSearchString);return-1===t?-1:parseFloat(e.substring(t+this.versionSearchString.length+1))},e}();t.default=a},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=r(n(3)),u=r(n(16)),i=r(n(10)),s=r(n(11)),f=!1,c=null,l=function(){function e(){}return e.isWebPushSupported=function(){return navigator&&navigator.serviceWorker&&"serviceWorker"in navigator&&"PushManager"in window},e.isWebPushSubscribed=function(){return e.isWebPushSupported()?e.getServiceWorkerRegistration().then((function(t){return new Promise((function(n){t?t.pushManager.getSubscription().then((function(t){(f=null!==t)&&e.updateNewSubscriptionOnServer(t),n(f)})):n(!1)}))})):new Promise((function(e){e(!1)}))},e.register=function(t,n){if(!e.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),n(!1);navigator.serviceWorker.register(t||"/sw.min.js",null).then((function(t){(c=t).pushManager.getSubscription().then((function(t){if((f=!(null===t))&&e.updateNewSubscriptionOnServer(t),n)return n(f)}))})).catch((function(e){console.log("Leanplum: Service Worker Error: ",e)}))},e.subscribeUser=function(){var t=e.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68");return new Promise((function(n,r){return c.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:t}).then((function(t){return t?(e.updateNewSubscriptionOnServer(t),n(f=!0)):(f=!1,r())})).catch((function(e){return r("Leanplum: Failed to subscribe the user: "+e)}))}))},e.unsubscribeUser=function(){return new Promise((function(t,n){e.isWebPushSubscribed().then((function(e){if(!e)return t();c.pushManager.getSubscription().then((function(e){return e?e.unsubscribe():n()})).catch((function(e){n("Leanplum: Error unsubscribing: "+e)})).then((function(e){return e?(f=!1,t()):n()}))}),(function(e){return n()}))}))},e.getServiceWorkerRegistration=function(){return new Promise((function(e){c?e(c):navigator.serviceWorker.getRegistration().then((function(t){c=t,e(t)}))}))},e.urlB64ToUint8Array=function(e){for(var t=(e+new Array((4-e.length%4)%4).join("=")).replace(/-/g,"+").replace(/_/g,"/"),n=window.atob(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r[o]=n.charCodeAt(o);return r},e.prepareSubscription=function(e){var t=Function.prototype.apply,n=e.getKey?e.getKey("p256dh"):"",r=e.getKey?e.getKey("auth"):"",o=btoa(t.call(String.fromCharCode,null,new Uint8Array(n))),a=btoa(t.call(String.fromCharCode,null,new Uint8Array(r)));return{endpoint:e.endpoint,key:o,auth:a}},e.updateNewSubscriptionOnServer=function(t){if(t){var n=e.prepareSubscription(t),r=JSON.stringify(n),a=i.default.getFromLocalStorage(o.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION);u.default(a,r)||(i.default.saveToLocalStorage(o.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,r),e.setSubscription(r))}},e.setSubscription=function(e){e&&s.default.request(o.default.METHODS.SET_DEVICE_ATTRIBUTES,(new a.default).add(o.default.PARAMS.WEB_PUSH_SUBSCRIPTION,e),{queued:!1,sendNow:!0})},e}();t.default=l},function(e,t,n){var r=n(34),o=n(9);e.exports=function e(t,n,a,u,i){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,a,u,e,i))}},function(e,t,n){var r=n(35),o=n(23),a=n(70),u=n(74),i=n(96),s=n(15),f=n(24),c=n(26),l=1,d="[object Arguments]",p="[object Array]",v="[object Object]",S=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,g,_,b){var A=s(e),h=s(t),E=A?p:i(e),y=h?p:i(t),T=(E=E==d?v:E)==v,I=(y=y==d?v:y)==v,m=E==y;if(m&&f(e)){if(!f(t))return!1;A=!0,T=!1}if(m&&!T)return b||(b=new r),A||c(e)?o(e,t,n,g,_,b):a(e,t,E,n,g,_,b);if(!(n&l)){var O=T&&S.call(e,"__wrapped__"),R=I&&S.call(t,"__wrapped__");if(O||R){var D=O?e.value():e,M=R?t.value():t;return b||(b=new r),_(D,M,n,g,b)}}return!!m&&(b||(b=new r),u(e,t,n,g,_,b))}},function(e,t,n){var r=n(4),o=n(41),a=n(42),u=n(43),i=n(44),s=n(45);function f(e){var t=this.__data__=new r(e);this.size=t.size}f.prototype.clear=o,f.prototype.delete=a,f.prototype.get=u,f.prototype.has=i,f.prototype.set=s,e.exports=f},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(5),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(5);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(5);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(5);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(4);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(4),o=n(13),a=n(22),u=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var i=n.__data__;if(!o||i.length<u-1)return i.push([e,t]),this.size=++n.size,this;n=this.__data__=new a(i)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(18),o=n(50),a=n(20),u=n(21),i=/^\[object .+?Constructor\]$/,s=Function.prototype,f=Object.prototype,c=s.toString,l=f.hasOwnProperty,d=RegExp("^"+c.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||o(e))&&(r(e)?d:i).test(u(e))}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(14),o=Object.prototype,a=o.hasOwnProperty,u=o.toString,i=r?r.toStringTag:void 0;e.exports=function(e){var t=a.call(e,i),n=e[i];try{e[i]=void 0;var r=!0}catch(e){}var o=u.call(e);return r&&(t?e[i]=n:delete e[i]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r,o=n(51),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!a&&a in e}},function(e,t,n){var r=n(0)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(54),o=n(4),a=n(13);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(e,t,n){var r=n(55),o=n(56),a=n(57),u=n(58),i=n(59);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=u,s.prototype.set=i,e.exports=s},function(e,t,n){var r=n(7);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(7),o="__lodash_hash_undefined__",a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return n===o?void 0:n}return a.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(7),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(7),o="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?o:t,this}},function(e,t,n){var r=n(8);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(8);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(8);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(8);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(22),o=n(66),a=n(67);function u(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}u.prototype.add=u.prototype.push=o,u.prototype.has=a,e.exports=u},function(e,t){var n="__lodash_hash_undefined__";e.exports=function(e){return this.__data__.set(e,n),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t,n){var r=n(14),o=n(71),a=n(17),u=n(23),i=n(72),s=n(73),f=1,c=2,l="[object Boolean]",d="[object Date]",p="[object Error]",v="[object Map]",S="[object Number]",g="[object RegExp]",_="[object Set]",b="[object String]",A="[object Symbol]",h="[object ArrayBuffer]",E="[object DataView]",y=r?r.prototype:void 0,T=y?y.valueOf:void 0;e.exports=function(e,t,n,r,y,I,m){switch(n){case E:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case h:return!(e.byteLength!=t.byteLength||!I(new o(e),new o(t)));case l:case d:case S:return a(+e,+t);case p:return e.name==t.name&&e.message==t.message;case g:case b:return e==t+"";case v:var O=i;case _:var R=r&f;if(O||(O=s),e.size!=t.size&&!R)return!1;var D=m.get(e);if(D)return D==t;r|=c,m.set(e,t);var M=u(O(e),O(t),r,y,I,m);return m.delete(e),M;case A:if(T)return T.call(e)==T.call(t)}return!1}},function(e,t,n){var r=n(0).Uint8Array;e.exports=r},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t,n){var r=n(75),o=1,a=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,u,i,s){var f=n&o,c=r(e),l=c.length;if(l!=r(t).length&&!f)return!1;for(var d=l;d--;){var p=c[d];if(!(f?p in t:a.call(t,p)))return!1}var v=s.get(e);if(v&&s.get(t))return v==t;var S=!0;s.set(e,t),s.set(t,e);for(var g=f;++d<l;){var _=e[p=c[d]],b=t[p];if(u)var A=f?u(b,_,p,t,e,s):u(_,b,p,e,t,s);if(!(void 0===A?_===b||i(_,b,n,u,s):A)){S=!1;break}g||(g="constructor"==p)}if(S&&!g){var h=e.constructor,E=t.constructor;h!=E&&"constructor"in e&&"constructor"in t&&!("function"==typeof h&&h instanceof h&&"function"==typeof E&&E instanceof E)&&(S=!1)}return s.delete(e),s.delete(t),S}},function(e,t,n){var r=n(76),o=n(78),a=n(81);e.exports=function(e){return r(e,a,o)}},function(e,t,n){var r=n(77),o=n(15);e.exports=function(e,t,n){var a=t(e);return o(e)?a:r(a,n(e))}},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t,n){var r=n(79),o=n(80),a=Object.prototype.propertyIsEnumerable,u=Object.getOwnPropertySymbols,i=u?function(e){return null==e?[]:(e=Object(e),r(u(e),(function(t){return a.call(e,t)})))}:o;e.exports=i},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,a=[];++n<r;){var u=e[n];t(u,n,e)&&(a[o++]=u)}return a}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(82),o=n(91),a=n(95);e.exports=function(e){return a(e)?r(e):o(e)}},function(e,t,n){var r=n(83),o=n(84),a=n(15),u=n(24),i=n(87),s=n(26),f=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=a(e),c=!n&&o(e),l=!n&&!c&&u(e),d=!n&&!c&&!l&&s(e),p=n||c||l||d,v=p?r(e.length,String):[],S=v.length;for(var g in e)!t&&!f.call(e,g)||p&&("length"==g||l&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||i(g,S))||v.push(g);return v}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(85),o=n(9),a=Object.prototype,u=a.hasOwnProperty,i=a.propertyIsEnumerable,s=r(function(){return arguments}())?r:function(e){return o(e)&&u.call(e,"callee")&&!i.call(e,"callee")};e.exports=s},function(e,t,n){var r=n(6),o=n(9),a="[object Arguments]";e.exports=function(e){return o(e)&&r(e)==a}},function(e,t){e.exports=function(){return!1}},function(e,t){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var o=typeof e;return!!(t=null==t?n:t)&&("number"==o||"symbol"!=o&&r.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(6),o=n(27),a=n(9),u={};u["[object Float32Array]"]=u["[object Float64Array]"]=u["[object Int8Array]"]=u["[object Int16Array]"]=u["[object Int32Array]"]=u["[object Uint8Array]"]=u["[object Uint8ClampedArray]"]=u["[object Uint16Array]"]=u["[object Uint32Array]"]=!0,u["[object Arguments]"]=u["[object Array]"]=u["[object ArrayBuffer]"]=u["[object Boolean]"]=u["[object DataView]"]=u["[object Date]"]=u["[object Error]"]=u["[object Function]"]=u["[object Map]"]=u["[object Number]"]=u["[object Object]"]=u["[object RegExp]"]=u["[object Set]"]=u["[object String]"]=u["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&o(e.length)&&!!u[r(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(19),o=t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,u=a&&a.exports===o&&r.process,i=function(){try{var e=a&&a.require&&a.require("util").types;return e||u&&u.binding&&u.binding("util")}catch(e){}}();e.exports=i}).call(this,n(25)(e))},function(e,t,n){var r=n(92),o=n(93),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))a.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(94)(Object.keys,Object);e.exports=r},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(18),o=n(27);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(97),o=n(13),a=n(98),u=n(99),i=n(100),s=n(6),f=n(21),c=f(r),l=f(o),d=f(a),p=f(u),v=f(i),S=s;(r&&"[object DataView]"!=S(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=S(new o)||a&&"[object Promise]"!=S(a.resolve())||u&&"[object Set]"!=S(new u)||i&&"[object WeakMap]"!=S(new i))&&(S=function(e){var t=s(e),n="[object Object]"==t?e.constructor:void 0,r=n?f(n):"";if(r)switch(r){case c:return"[object DataView]";case l:return"[object Map]";case d:return"[object Promise]";case p:return"[object Set]";case v:return"[object WeakMap]"}return t}),e.exports=S},function(e,t,n){var r=n(2)(n(0),"DataView");e.exports=r},function(e,t,n){var r=n(2)(n(0),"Promise");e.exports=r},function(e,t,n){var r=n(2)(n(0),"Set");e.exports=r},function(e,t,n){var r=n(2)(n(0),"WeakMap");e.exports=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=r(n(3)),u=r(n(102)),i=r(n(29)),s=r(n(11)),f=r(n(16)),c=function(){function e(){}return e.connect=function(){if(WebSocket){var t=new u.default,n=!1;t.onopen=function(){if(!n){console.log("Leanplum: Connected to development server.");var e={};e[o.default.PARAMS.APP_ID]=s.default.appId,e[o.default.PARAMS.DEVICE_ID]=s.default.deviceId,t.send("auth",e),n=!0}},t.onerror=function(e){console.log("Leanplum: Socket error",e)},t.onmessage=function(e,n){"updateVars"===e?s.default.request(o.default.METHODS.GET_VARS,(new a.default).add(o.default.PARAMS.INCLUDE_DEFAULTS,!1),{queued:!1,sendNow:!0,response:function(e){var t=s.default.getLastResponse(e),n=t[o.default.KEYS.VARS],r=t[o.default.KEYS.VARIANTS],a=t[o.default.KEYS.ACTION_METADATA];f.default(n,i.default.diffs)||i.default.applyDiffs(n,r,a)}}):"getVariables"===e?(i.default.sendVariables(),t.send("getContentResponse",{updated:!0})):"getActions"===e?t.send("getContentResponse",{updated:!1}):"registerDevice"===e&&alert("Your device has been registered to "+n[0].email+".")},t.onclose=function(){console.log("Leanplum: Disconnected to development server."),n=!1},t.connect(e.socketHost),setInterval((function(){t.connected||t.connecting||t.connect(e.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},e.socketHost="dev.leanplum.com",e}();t.default=c},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(28)),a=function(){function e(){this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return e.prototype.connect=function(e){var t=this;t.connecting=!0,o.default.ajax("POST","https://"+e+"/socket.io/1","",(function(n){var r=n.split(":"),o=r[0],a=parseInt(r[1])/2*1e3;t.socket=new WebSocket("wss://"+e+"/socket.io/1/websocket/"+o);var u=null;t.socket.onopen=function(){t.connected=!0,t.connecting=!1,t.onopen&&t.onopen(),u=setInterval((function(){t.socket.send("2:::")}),a)},t.socket.onclose=function(){t.connected=!1,clearInterval(u),t.onclose&&t.onclose()},t.socket.onmessage=function(e){var n=e.data.split(":"),r=parseInt(n[0]);if(2===r)t.socket.send("2::");else if(5===r){var o=n[1],a=JSON.parse(n.slice(3).join(":")),u=a.name,i=a.args;o&&t.socket.send("6:::"+o),t.onmessage&&t.onmessage(u,i)}else 7===r&&console.log("Socket error: "+e.data)},t.socket.onerror=function(e){t.socket.close(),t.onerror&&t.onerror(e)}}),null,!1,!0)},e.prototype.send=function(e,t){if(this.connected){var n=JSON.stringify({name:e,args:t});this.socket.send("5:::"+n)}else console.log("Leanplum: Socket is not connected.")},e}();t.default=a}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9MZWFucGx1bS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9BcmdzQnVpbGRlci50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvTG9jYWxTdG9yYWdlTWFuYWdlci50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9MZWFucGx1bVJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvSW50ZXJuYWxTdGF0ZS50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNFcXVhbC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL05ldHdvcmsudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvVmFyQ2FjaGUudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvTGVhbnBsdW0udHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvQnJvd3NlckRldGVjdG9yLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL1B1c2hNYW5hZ2VyLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbERlZXAuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TdGFjay5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlR2V0LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0hhcy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlR2V0LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldENhY2hlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NhY2hlSGFzLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxCeVRhZy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBUb0FycmF5LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9BcnJheS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UHVzaC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUZpbHRlci5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkFycmF5LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19Qcm9taXNlLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fV2Vha01hcC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9MZWFucGx1bVNvY2tldC50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9Tb2NrZXRJb0NsaWVudC50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsIkZ1bmN0aW9uIiwiZGVmYXVsdCIsIk1FVEhPRFMiLCJTVEFSVCIsIlNUT1AiLCJBRFZBTkNFIiwiVFJBQ0siLCJQQVVTRV9TRVNTSU9OIiwiUkVTVU1FX1NFU1NJT04iLCJQQVVTRV9TVEFURSIsIlJFU1VNRV9TVEFURSIsIkRPV05MT0FEX0ZJTEUiLCJNVUxUSSIsIlNFVF9WQVJTIiwiR0VUX1ZBUlMiLCJTRVRfVVNFUl9BVFRSSUJVVEVTIiwiU0VUX0RFVklDRV9BVFRSSUJVVEVTIiwiVVBMT0FEX0ZJTEUiLCJSRUdJU1RFUl9ERVZJQ0UiLCJTREtfVkVSU0lPTiIsIkNMSUVOVCIsIlBBUkFNUyIsIkFDVElPTiIsIkFQUF9JRCIsIkNMSUVOVF9LRVkiLCJERVZJQ0VfSUQiLCJVU0VSX0lEIiwiTkVXX1VTRVJfSUQiLCJERVZfTU9ERSIsIlZFUlNJT05fTkFNRSIsIlNZU1RFTV9OQU1FIiwiU1lTVEVNX1ZFUlNJT04iLCJCUk9XU0VSX05BTUUiLCJCUk9XU0VSX1ZFUlNJT04iLCJERVZJQ0VfTkFNRSIsIkRFVklDRV9NT0RFTCIsIlVTRVJfQVRUUklCVVRFUyIsIkxPQ0FMRSIsIkNPVU5UUlkiLCJSRUdJT04iLCJDSVRZIiwiTE9DQVRJT04iLCJTVEFURSIsIklORk8iLCJFVkVOVCIsIlZBTFVFIiwiRklMRU5BTUUiLCJUSU1FIiwiREFUQSIsIlZBUlMiLCJGSUxFIiwiU0laRSIsIlZBUklBVElPTiIsIkhBU0giLCJFTUFJTCIsIlZBUklBQkxFUyIsIklOQ0xVREVfREVGQVVMVFMiLCJJTkNMVURFX1ZBUklBTlRfREVCVUdfSU5GTyIsIldFQl9QVVNIX1NVQlNDUklQVElPTiIsIktFWVMiLCJJU19SRUdJU1RFUkVEIiwiTEFURVNUX1ZFUlNJT04iLCJWQVJJQU5UUyIsIlZBUklBTlRfREVCVUdfSU5GTyIsIkFDVElPTl9NRVRBREFUQSIsIlRPS0VOIiwiREVGQVVMVF9LRVlTIiwiQ09VTlQiLCJJVEVNIiwiUFVTSF9TVUJTQ1JJUFRJT04iLCJWQUxVRVMiLCJERVRFQ1QiLCJiYXNlSXNOYXRpdmUiLCJnZXRWYWx1ZSIsInVuZGVmaW5lZCIsIl9faW1wb3J0RGVmYXVsdCIsInRoaXMiLCJtb2QiLCJDb25zdGFudHNfMSIsIkFyZ3NCdWlsZGVyIiwiYXJnU3RyaW5nIiwiYXJnVmFsdWVzIiwiYWRkIiwiZW5jb2RlZFVyaUNvbXBvbmVudCIsImVuY29kZVVSSUNvbXBvbmVudCIsImJvZHkiLCJfYm9keSIsImF0dGFjaEFwaUtleXMiLCJhcHBJZCIsImNsaWVudEtleSIsImJ1aWxkIiwiYnVpbGREaWN0IiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJlbnRyaWVzIiwiaW5kZXgiLCJsZW5ndGgiLCJjbGVhciIsImVudHJ5Iiwic2V0IiwiaGFzIiwiZXEiLCJhcnJheSIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwibnVsbFRhZyIsInVuZGVmaW5lZFRhZyIsInN5bVRvU3RyaW5nVGFnIiwibmF0aXZlQ3JlYXRlIiwiZ2V0TmF0aXZlIiwiaXNLZXlhYmxlIiwibWFwIiwiZGF0YSIsIl9fZGF0YV9fIiwibG9jYWxTdG9yYWdlRW5hYmxlZCIsImFsdGVybmF0ZUxvY2FsU3RvcmFnZSIsIkxvY2FsU3RvcmFnZU1hbmFnZXIiLCJnZXRGcm9tTG9jYWxTdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwic2F2ZVRvTG9jYWxTdG9yYWdlIiwiZSIsInJlbW92ZUZyb21Mb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwiQXJnc0J1aWxkZXJfMSIsIkludGVybmFsU3RhdGVfMSIsIk5ldHdvcmtfMSIsIkxvY2FsU3RvcmFnZU1hbmFnZXJfMSIsImxhc3RSZXF1ZXN0VGltZSIsImNvb2xkb3duVGltZW91dCIsIkxlYW5wbHVtUmVxdWVzdCIsInJlcXVlc3QiLCJhY3Rpb24iLCJwYXJhbXMiLCJvcHRpb25zIiwiZGV2aWNlSWQiLCJpZCIsInBvc3NpYmxlIiwiY2hhckF0IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwidXNlcklkIiwiYXJnc0J1aWxkZXIiLCJ2ZXJzaW9uTmFtZSIsImRldk1vZGUiLCJEYXRlIiwiZ2V0VGltZSIsInRvU3RyaW5nIiwic3VjY2VzcyIsInJlc3BvbnNlIiwiZXJyb3IiLCJlcnIiLCJjb25zb2xlIiwiYWpheCIsImFwaVBhdGgiLCJxdWV1ZWQiLCJzZW5kTm93IiwiYmF0Y2hFbmFibGVkIiwic2VuZFVuc2VudFJlcXVlc3RzIiwicmVxdWVzdHNUb1NlbmQiLCJwb3BVbnNlbnRSZXF1ZXN0cyIsInJlcXVlc3REYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsIm11bHRpUmVxdWVzdEFyZ3MiLCJiYXRjaENvb2xkb3duIiwibm93Iiwic2V0VGltZW91dCIsInNhdmVSZXF1ZXN0Rm9yTGF0ZXIiLCJzZXROZXR3b3JrVGltZW91dCIsInNlY29uZHMiLCJhcmdzIiwiY291bnQiLCJpdGVtS2V5IiwicmVxdWVzdEFyZ3MiLCJwYXJzZSIsInB1c2giLCJpZ25vcmVkIiwibnVtUmVzcG9uc2VzIiwiZ2V0UmVzcG9uc2VBdCIsImdldExhc3RSZXNwb25zZSIsImlzUmVzcG9uc2VTdWNjZXNzIiwiZ2V0UmVzcG9uc2VFcnJvciIsIm1lc3NhZ2UiLCJJbnRlcm5hbFN0YXRlIiwiYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIiLCJoYW5kbGVyIiwic3RhcnRIYW5kbGVycyIsImhhc1N0YXJ0ZWQiLCJzdGFydFN1Y2Nlc3NmdWwiLCJyZW1vdmVTdGFydFJlc3BvbnNlSGFuZGxlciIsImlkeCIsImluZGV4T2YiLCJzcGxpY2UiLCJ0cmlnZ2VyU3RhcnRIYW5kbGVycyIsImFkZFZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyIiwidmFyaWFibGVzQ2hhbmdlZEhhbmRsZXJzIiwiaGFzUmVjZWl2ZWREaWZmcyIsInJlbW92ZVZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyIiwidHJpZ2dlclZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycyIsInNldFZhcmlhbnREZWJ1Z0luZm9FbmFibGVkIiwidmFyaWFudERlYnVnSW5mb0VuYWJsZWQiLCJNYXAiLCJpc0FycmF5IiwiQXJyYXkiLCJiYXNlSXNFcXVhbCIsIm90aGVyIiwiYmFzZUdldFRhZyIsImlzT2JqZWN0IiwiYXN5bmNUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwicHJveHlUYWciLCJ0YWciLCJnbG9iYWwiLCJ0eXBlIiwiZnVuY1RvU3RyaW5nIiwiZnVuYyIsIm1hcENhY2hlQ2xlYXIiLCJtYXBDYWNoZURlbGV0ZSIsIm1hcENhY2hlR2V0IiwibWFwQ2FjaGVIYXMiLCJtYXBDYWNoZVNldCIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJhcnJheVNvbWUiLCJjYWNoZUhhcyIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiZXF1YWxGdW5jIiwic3RhY2siLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJvdGhMZW5ndGgiLCJzdGFja2VkIiwicmVzdWx0Iiwic2VlbiIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm90aEluZGV4Iiwic3R1YkZhbHNlIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJCdWZmZXIiLCJpc0J1ZmZlciIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVVuYXJ5Iiwibm9kZVV0aWwiLCJub2RlSXNUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiTUFYX1NBRkVfSU5URUdFUiIsImFwcGx5IiwicmVxdWVzdFF1ZXVlIiwibmV0d29ya1RpbWVvdXRTZWNvbmRzIiwiTmV0d29yayIsIm1ldGhvZCIsInVybCIsInBsYWluVGV4dCIsInJ1bm5pbmdSZXF1ZXN0IiwiZW5xdWV1ZVJlcXVlc3QiLCJhcmd1bWVudHMiLCJYRG9tYWluUmVxdWVzdCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJzdWJzdHJpbmciLCJhamF4SUU4IiwiaGFuZGxlZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlXzEiLCJyYW5DYWxsYmFjayIsInJlc3BvbnNlVGV4dCIsInN0YXR1cyIsImRlcXVldWVSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiYWJvcnQiLCJ4ZHIiLCJvbmxvYWQiLCJvbmVycm9yIiwib250aW1lb3V0Iiwib25wcm9ncmVzcyIsInRpbWVvdXQiLCJyZXF1ZXN0QXJndW1lbnRzIiwic2hpZnQiLCJMZWFucGx1bVJlcXVlc3RfMSIsIlZhckNhY2hlIiwiYXBwbHlEaWZmcyIsImRpZmZzIiwidmFyaWFudHMiLCJhY3Rpb25NZXRhZGF0YSIsIm1lcmdlZCIsIm1lcmdlSGVscGVyIiwidmFyaWFibGVzIiwic2F2ZURpZmZzIiwib25VcGRhdGUiLCJsb2FkRGlmZnMiLCJ0b2tlbiIsInZhcmlhbnREZWJ1Z0luZm8iLCJsb2ciLCJzZXRWYXJpYWJsZXMiLCJnZXRWYXJpYWJsZXMiLCJnZXRWYXJpYW50RGVidWdJbmZvIiwic2VuZFZhcmlhYmxlcyIsInZhcnMiLCJkaWZmIiwib2JqSXRlcmF0b3IiLCJvYmoiLCJmIiwiYXR0ciIsInZhcnNJdGVyYXRvciIsImRpZmZJdGVyYXRvciIsImF0dHJpYnV0ZSIsIm1lcmdlZF8xIiwidmFyU3Vic2NyaXB0Iiwic3Vic2NyaXB0IiwicGFyc2VJbnQiLCJkaWZmVmFsdWUiLCJjbGVhclVzZXJDb250ZW50IiwiQnJvd3NlckRldGVjdG9yXzEiLCJQdXNoTWFuYWdlcl8xIiwiVmFyQ2FjaGVfMSIsIkxlYW5wbHVtU29ja2V0XzEiLCJfYnJvd3NlckRldGVjdG9yIiwiTGVhbnBsdW0iLCJzZXRBcGlQYXRoIiwic2V0RW1haWwiLCJlbWFpbCIsIl9lbWFpbCIsInNldEFwcElkRm9yRGV2ZWxvcG1lbnRNb2RlIiwiYWNjZXNzS2V5Iiwic2V0QXBwSWRGb3JQcm9kdWN0aW9uTW9kZSIsInNldFNvY2tldEhvc3QiLCJob3N0Iiwic29ja2V0SG9zdCIsInNldERldmljZUlkIiwic2V0QXBwVmVyc2lvbiIsInNldERldmljZU5hbWUiLCJkZXZpY2VOYW1lIiwiX2RldmljZU5hbWUiLCJzZXREZXZpY2VNb2RlbCIsImRldmljZU1vZGVsIiwiX2RldmljZU1vZGVsIiwic2V0U3lzdGVtTmFtZSIsInN5c3RlbU5hbWUiLCJfc3lzdGVtTmFtZSIsInNldFN5c3RlbVZlcnNpb24iLCJzeXN0ZW1WZXJzaW9uIiwiX3N5c3RlbVZlcnNpb24iLCJzZXRSZXF1ZXN0QmF0Y2hpbmciLCJjb29sZG93blNlY29uZHMiLCJnZXRWYXJpYWJsZSIsIl9pIiwiY3VycmVudCIsImdldFZhcmlhbnRzIiwiZm9yY2VDb250ZW50VXBkYXRlIiwiY2FsbGJhY2siLCJnZXRWYXJzUmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJzdGFydCIsInVzZXJBdHRyaWJ1dGVzIiwiT1MiLCJicm93c2VyIiwidmVyc2lvbiIsInN0YXJ0UmVzcG9uc2UiLCJsYXRlc3RWZXJzaW9uIiwiY29ubmVjdCIsInN0YXJ0RnJvbUNhY2hlIiwic3RvcCIsInBhdXNlU2Vzc2lvbiIsInJlc3VtZVNlc3Npb24iLCJwYXVzZVN0YXRlIiwicmVzdW1lU3RhdGUiLCJzZXRVc2VySWQiLCJzZXRVc2VyQXR0cmlidXRlcyIsInRyYWNrIiwiZXZlbnQiLCJpbmZvIiwiYWR2YW5jZVRvIiwic3RhdGUiLCJpc1dlYlB1c2hTdXBwb3J0ZWQiLCJpc1dlYlB1c2hTdWJzY3JpYmVkIiwicmVnaXN0ZXJGb3JXZWJQdXNoIiwic2VydmljZVdvcmtlclVybCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVnaXN0ZXIiLCJpc1N1YnNjcmliZWQiLCJzdWJzY3JpYmVVc2VyIiwidW5yZWdpc3RlckZyb21XZWJQdXNoIiwidW5zdWJzY3JpYmVVc2VyIiwiZGF0YUJyb3dzZXIiLCJzdHJpbmciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzdWJTdHJpbmciLCJpZGVudGl0eSIsInZlcnNpb25TZWFyY2giLCJ2ZW5kb3IiLCJwcm9wIiwib3BlcmEiLCJkYXRhT1MiLCJwbGF0Zm9ybSIsIkJyb3dzZXJEZXRlY3RvciIsIl9zZWFyY2hTdHJpbmciLCJfc2VhcmNoVmVyc2lvbiIsImFwcFZlcnNpb24iLCJkYXRhU3RyaW5nIiwiZGF0YVByb3AiLCJ2ZXJzaW9uU2VhcmNoU3RyaW5nIiwicGFyc2VGbG9hdCIsImlzRXF1YWxfMSIsInNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24iLCJQdXNoTWFuYWdlciIsInNlcnZpY2VXb3JrZXIiLCJnZXRTZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uIiwidGhlbiIsInJlZ2lzdHJhdGlvbiIsInB1c2hNYW5hZ2VyIiwiZ2V0U3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwidXBkYXRlTmV3U3Vic2NyaXB0aW9uT25TZXJ2ZXIiLCJjYXRjaCIsImFwcGxpY2F0aW9uU2VydmVyS2V5IiwidXJsQjY0VG9VaW50OEFycmF5Iiwic3Vic2NyaWJlIiwidXNlclZpc2libGVPbmx5Iiwic3Vic2NyaWJlZCIsInVuc3Vic2NyaWJlIiwiZ2V0UmVnaXN0cmF0aW9uIiwiYmFzZTY0U3RyaW5nIiwiYmFzZTY0Iiwiam9pbiIsInJlcGxhY2UiLCJyYXdEYXRhIiwiYXRvYiIsIm91dHB1dEFycmF5IiwiVWludDhBcnJheSIsImNoYXJDb2RlQXQiLCJwcmVwYXJlU3Vic2NyaXB0aW9uIiwiZ2V0S2V5IiwiYXV0aCIsImtleUFzY2lpIiwiYnRvYSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImF1dGhBc2NpaSIsImVuZHBvaW50IiwicHJlcGFyZWRTdWJzY3JpcHRpb24iLCJwcmVwYXJlZFN1YnNjcmlwdGlvblN0cmluZyIsImV4aXN0aW5nU3Vic2NyaXB0aW9uU3RyaW5nIiwic2V0U3Vic2NyaXB0aW9uIiwiYmFzZUlzRXF1YWxEZWVwIiwiaXNPYmplY3RMaWtlIiwiU3RhY2siLCJlcXVhbEFycmF5cyIsImVxdWFsQnlUYWciLCJlcXVhbE9iamVjdHMiLCJnZXRUYWciLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJvYmplY3RUYWciLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsInNpemUiLCJhc3NvY0luZGV4T2YiLCJwb3AiLCJMQVJHRV9BUlJBWV9TSVpFIiwicGFpcnMiLCJpc0Z1bmN0aW9uIiwiaXNNYXNrZWQiLCJ0b1NvdXJjZSIsInJlSXNIb3N0Q3RvciIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwicmVJc05hdGl2ZSIsIlJlZ0V4cCIsInRlc3QiLCJnIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwidWlkIiwiY29yZUpzRGF0YSIsIm1hc2tTcmNLZXkiLCJleGVjIiwia2V5cyIsIklFX1BST1RPIiwiSGFzaCIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIQVNIX1VOREVGSU5FRCIsImdldE1hcERhdGEiLCJzZXRDYWNoZUFkZCIsInNldENhY2hlSGFzIiwidmFsdWVzIiwicHJlZGljYXRlIiwiY2FjaGUiLCJtYXBUb0FycmF5Iiwic2V0VG9BcnJheSIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJzeW1ib2xUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsImJ5dGVMZW5ndGgiLCJieXRlT2Zmc2V0IiwiYnVmZmVyIiwiY29udmVydCIsImZvckVhY2giLCJnZXRBbGxLZXlzIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm9ialZhbHVlIiwib2JqQ3RvciIsImNvbnN0cnVjdG9yIiwib3RoQ3RvciIsImJhc2VHZXRBbGxLZXlzIiwiZ2V0U3ltYm9scyIsImFycmF5UHVzaCIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJvZmZzZXQiLCJhcnJheUZpbHRlciIsInN0dWJBcnJheSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbCIsInJlc0luZGV4IiwiYXJyYXlMaWtlS2V5cyIsImJhc2VLZXlzIiwiaXNBcnJheUxpa2UiLCJiYXNlVGltZXMiLCJpc0FyZ3VtZW50cyIsImlzSW5kZXgiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpdGVyYXRlZSIsImJhc2VJc0FyZ3VtZW50cyIsInJlSXNVaW50IiwiaXNMZW5ndGgiLCJ0eXBlZEFycmF5VGFncyIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJpc1Byb3RvdHlwZSIsIm5hdGl2ZUtleXMiLCJDdG9yIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFyZyIsIkRhdGFWaWV3IiwiU2V0IiwiV2Vha01hcCIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsIkFycmF5QnVmZmVyIiwiY3RvclN0cmluZyIsIlNvY2tldElvQ2xpZW50XzEiLCJMZWFucGx1bVNvY2tldCIsIldlYlNvY2tldCIsImNsaWVudCIsImF1dGhTZW50Iiwib25vcGVuIiwib25tZXNzYWdlIiwiYWxlcnQiLCJvbmNsb3NlIiwic2V0SW50ZXJ2YWwiLCJjb25uZWN0ZWQiLCJjb25uZWN0aW5nIiwiU29ja2V0SW9DbGllbnQiLCJsaW5lIiwicGFydHMiLCJzcGxpdCIsInNlc3Npb24iLCJoZWFydGJlYXQiLCJzb2NrZXQiLCJoZWFydGJlYXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJtZXNzYWdlUGFydHMiLCJjb2RlIiwibWVzc2FnZUlkIiwic2xpY2UiLCJtZXNzYWdlRXZlbnQiLCJjbG9zZSIsImFyZ3NKc29uIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsSUFDUSxtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLEdBQUlILEdBQ2UsaUJBQVpDLFFBQ2RBLFFBQWtCLFNBQUlELElBRXRCRCxFQUFlLFNBQUlDLElBUnJCLENBU0dLLFFBQVEsV0FDWCxPLFlDVEUsSUFBSUMsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVVAsUUFHbkMsSUFBSUMsRUFBU0ksRUFBaUJFLEdBQVksQ0FDekNDLEVBQUdELEVBQ0hFLEdBQUcsRUFDSFQsUUFBUyxJQVVWLE9BTkFVLEVBQVFILEdBQVVJLEtBQUtWLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNNLEdBRy9ETCxFQUFPUSxHQUFJLEVBR0pSLEVBQU9ELFFBMERmLE9BckRBTSxFQUFvQk0sRUFBSUYsRUFHeEJKLEVBQW9CTyxFQUFJUixFQUd4QkMsRUFBb0JRLEVBQUksU0FBU2QsRUFBU2UsRUFBTUMsR0FDM0NWLEVBQW9CVyxFQUFFakIsRUFBU2UsSUFDbENHLE9BQU9DLGVBQWVuQixFQUFTZSxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVWLEVBQW9CZ0IsRUFBSSxTQUFTdEIsR0FDWCxvQkFBWHVCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZW5CLEVBQVN1QixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FBRXlCLE9BQU8sS0FRdkRuQixFQUFvQm9CLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRbkIsRUFBb0JtQixJQUMvQixF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QndPLEVBQWV0bkIsVUFBVXlTLEtBQU8sU0FBVTlULEVBQU0yTSxHQUM1QyxHQUFLbkcsS0FBS2lpQixVQUFWLENBSUEsSUFBSWlCLEVBQVd4ZCxLQUFLQyxVQUFVLENBQzFCbk0sS0FBTUEsRUFDTjJNLEtBQU1BLElBRVZuRyxLQUFLeWlCLE9BQU9uVixLQUFLLE9BQVM0VixRQVB0QmxlLFFBQVE4SixJQUFJLHVDQVNicVQsRUF4RndCLEdBMEZuQzFwQixFQUFRNEMsUUFBVThtQiIsImZpbGUiOiJsZWFucGx1bS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkxlYW5wbHVtXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkxlYW5wbHVtXCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzApO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKlxuICpcbiAqICBDb3B5cmlnaHQgMjAxNyBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZVxuICpcbiAqL1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIE1FVEhPRFM6IHtcbiAgICAgICAgU1RBUlQ6ICdzdGFydCcsXG4gICAgICAgIFNUT1A6ICdzdG9wJyxcbiAgICAgICAgQURWQU5DRTogJ2FkdmFuY2UnLFxuICAgICAgICBUUkFDSzogJ3RyYWNrJyxcbiAgICAgICAgUEFVU0VfU0VTU0lPTjogJ3BhdXNlU2Vzc2lvbicsXG4gICAgICAgIFJFU1VNRV9TRVNTSU9OOiAncmVzdW1lU2Vzc2lvbicsXG4gICAgICAgIFBBVVNFX1NUQVRFOiAncGF1c2VTdGF0ZScsXG4gICAgICAgIFJFU1VNRV9TVEFURTogJ3Jlc3VtZVN0YXRlJyxcbiAgICAgICAgRE9XTkxPQURfRklMRTogJ2Rvd25sb2FkRmlsZScsXG4gICAgICAgIE1VTFRJOiAnbXVsdGknLFxuICAgICAgICBTRVRfVkFSUzogJ3NldFZhcnMnLFxuICAgICAgICBHRVRfVkFSUzogJ2dldFZhcnMnLFxuICAgICAgICBTRVRfVVNFUl9BVFRSSUJVVEVTOiAnc2V0VXNlckF0dHJpYnV0ZXMnLFxuICAgICAgICBTRVRfREVWSUNFX0FUVFJJQlVURVM6ICdzZXREZXZpY2VBdHRyaWJ1dGVzJyxcbiAgICAgICAgVVBMT0FEX0ZJTEU6ICd1cGxvYWRGaWxlJyxcbiAgICAgICAgUkVHSVNURVJfREVWSUNFOiAncmVnaXN0ZXJEZXZpY2UnXG4gICAgfSxcbiAgICBTREtfVkVSU0lPTjogJzEuMy4wJyxcbiAgICBDTElFTlQ6ICdqcycsXG4gICAgUEFSQU1TOiB7XG4gICAgICAgIEFDVElPTjogJ2FjdGlvbicsXG4gICAgICAgIEFQUF9JRDogJ2FwcElkJyxcbiAgICAgICAgQ0xJRU5UOiAnY2xpZW50JyxcbiAgICAgICAgQ0xJRU5UX0tFWTogJ2NsaWVudEtleScsXG4gICAgICAgIERFVklDRV9JRDogJ2RldmljZUlkJyxcbiAgICAgICAgU0RLX1ZFUlNJT046ICdzZGtWZXJzaW9uJyxcbiAgICAgICAgVVNFUl9JRDogJ3VzZXJJZCcsXG4gICAgICAgIE5FV19VU0VSX0lEOiAnbmV3VXNlcklkJyxcbiAgICAgICAgREVWX01PREU6ICdkZXZNb2RlJyxcbiAgICAgICAgVkVSU0lPTl9OQU1FOiAndmVyc2lvbk5hbWUnLFxuICAgICAgICBTWVNURU1fTkFNRTogJ3N5c3RlbU5hbWUnLFxuICAgICAgICBTWVNURU1fVkVSU0lPTjogJ3N5c3RlbVZlcnNpb24nLFxuICAgICAgICBCUk9XU0VSX05BTUU6ICdicm93c2VyTmFtZScsXG4gICAgICAgIEJST1dTRVJfVkVSU0lPTjogJ2Jyb3dzZXJWZXJzaW9uJyxcbiAgICAgICAgREVWSUNFX05BTUU6ICdkZXZpY2VOYW1lJyxcbiAgICAgICAgREVWSUNFX01PREVMOiAnZGV2aWNlTW9kZWwnLFxuICAgICAgICBVU0VSX0FUVFJJQlVURVM6ICd1c2VyQXR0cmlidXRlcycsXG4gICAgICAgIExPQ0FMRTogJ2xvY2FsZScsXG4gICAgICAgIENPVU5UUlk6ICdjb3VudHJ5JyxcbiAgICAgICAgUkVHSU9OOiAncmVnaW9uJyxcbiAgICAgICAgQ0lUWTogJ2NpdHknLFxuICAgICAgICBMT0NBVElPTjogJ2xvY2F0aW9uJyxcbiAgICAgICAgU1RBVEU6ICdzdGF0ZScsXG4gICAgICAgIElORk86ICdpbmZvJyxcbiAgICAgICAgRVZFTlQ6ICdldmVudCcsXG4gICAgICAgIFZBTFVFOiAndmFsdWUnLFxuICAgICAgICBGSUxFTkFNRTogJ2ZpbGVuYW1lJyxcbiAgICAgICAgVElNRTogJ3RpbWUnLFxuICAgICAgICBEQVRBOiAnZGF0YScsXG4gICAgICAgIFZBUlM6ICd2YXJzJyxcbiAgICAgICAgRklMRTogJ2ZpbGUnLFxuICAgICAgICBTSVpFOiAnc2l6ZScsXG4gICAgICAgIFZBUklBVElPTjogJ3ZhcmlhdGlvbicsXG4gICAgICAgIEhBU0g6ICdoYXNoJyxcbiAgICAgICAgRU1BSUw6ICdlbWFpbCcsXG4gICAgICAgIFZBUklBQkxFUzogJ3ZhcnMnLFxuICAgICAgICBQQVJBTVM6ICdwYXJhbXMnLFxuICAgICAgICBJTkNMVURFX0RFRkFVTFRTOiAnaW5jbHVkZURlZmF1bHRzJyxcbiAgICAgICAgSU5DTFVERV9WQVJJQU5UX0RFQlVHX0lORk86ICdpbmNsdWRlVmFyaWFudERlYnVnSW5mbycsXG4gICAgICAgIFdFQl9QVVNIX1NVQlNDUklQVElPTjogJ3dlYlB1c2hTdWJzY3JpcHRpb24nXG4gICAgfSxcbiAgICBLRVlTOiB7XG4gICAgICAgIElTX1JFR0lTVEVSRUQ6ICdpc1JlZ2lzdGVyZWQnLFxuICAgICAgICBMQVRFU1RfVkVSU0lPTjogJ2xhdGVzdFZlcnNpb24nLFxuICAgICAgICBWQVJTOiAndmFycycsXG4gICAgICAgIFZBUklBTlRTOiAndmFyaWFudHMnLFxuICAgICAgICBWQVJJQU5UX0RFQlVHX0lORk86ICd2YXJpYW50RGVidWdJbmZvJyxcbiAgICAgICAgQUNUSU9OX01FVEFEQVRBOiAnYWN0aW9uTWV0YWRhdGEnLFxuICAgICAgICBUT0tFTjogJ3Rva2VuJ1xuICAgIH0sXG4gICAgREVGQVVMVF9LRVlTOiB7XG4gICAgICAgIENPVU5UOiAnX19sZWFucGx1bV91bnN5bmNlZCcsXG4gICAgICAgIElURU06ICdfX2xlYW5wbHVtX3Vuc3luY2VkXycsXG4gICAgICAgIFZBUklBQkxFUzogJ19fbGVhbnBsdW1fdmFyaWFibGVzJyxcbiAgICAgICAgVkFSSUFOVFM6ICdfX2xlYW5wbHVtX3ZhcmlhbnRzJyxcbiAgICAgICAgVkFSSUFOVF9ERUJVR19JTkZPOiAnX19sZWFucGx1bV92YXJpYW50X2RlYnVnX2luZm8nLFxuICAgICAgICBBQ1RJT05fTUVUQURBVEE6ICdfX2xlYW5wbHVtX2FjdGlvbl9tZXRhZGF0YScsXG4gICAgICAgIFRPS0VOOiAnX19sZWFucGx1bV90b2tlbicsXG4gICAgICAgIERFVklDRV9JRDogJ19fbGVhbnBsdW1fZGV2aWNlX2lkJyxcbiAgICAgICAgVVNFUl9JRDogJ19fbGVhbnBsdW1fdXNlcl9pZCcsXG4gICAgICAgIFBVU0hfU1VCU0NSSVBUSU9OOiAnX19sZWFucGx1bV9wdXNoX3N1YnNjcmlwdGlvbidcbiAgICB9LFxuICAgIFZBTFVFUzoge1xuICAgICAgICBERVRFQ1Q6ICcoZGV0ZWN0KSdcbiAgICB9XG59O1xuIiwidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDE3IExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlXG4gKlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbi8qKlxuICogTGVhbnBsdW0gQXJnc0J1aWxkZXIsIHVzZSB0byBjb25zdHJ1Y3QgcmVxdWVzdCBwYXlsb2FkLlxuICovXG52YXIgQXJnc0J1aWxkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGVtcHR5IHJlcXVlc3QgYXJndW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gQXJnc0J1aWxkZXIoKSB7XG4gICAgICAgIHRoaXMuYXJnU3RyaW5nID0gJyc7XG4gICAgICAgIHRoaXMuYXJnVmFsdWVzID0ge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBnaXZlbiBrZXksIHZhbHVlIHRvIHRoZSBwYXlsb2FkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBmb3IgdGhlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW59IHZhbHVlIFRoZSB2YWx1ZSBmb3IgZ2l2ZW4ga2V5LlxuICAgICAqIEByZXR1cm4ge0FyZ3NCdWlsZGVyfSBSZXR1cm5zIGFuIG9iamVjdCBvZiBBcmdzQnVpbGRlci5cbiAgICAgKi9cbiAgICBBcmdzQnVpbGRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFyZ1N0cmluZykge1xuICAgICAgICAgICAgdGhpcy5hcmdTdHJpbmcgKz0gJyYnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbmNvZGVkVXJpQ29tcG9uZW50ID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgICAgdGhpcy5hcmdTdHJpbmcgKz0ga2V5ICsgXCI9XCIgKyBlbmNvZGVkVXJpQ29tcG9uZW50O1xuICAgICAgICB0aGlzLmFyZ1ZhbHVlc1trZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FjaGUgdGhlIGdpdmVuIGJvZHkuXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBbYm9keV0gQSBnaXZlbiBib2R5LlxuICAgICAqIEByZXR1cm4ge0FyZ3NCdWlsZGVyfFN0cmluZ30gUmV0dXJucyBBcmdzQnVpbGRlciBpZiBib2R5IGdpdmVuLCBlbHNlIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5cbiAgICAgKi9cbiAgICBBcmdzQnVpbGRlci5wcm90b3R5cGUuYm9keSA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgICAgIGlmIChib2R5KSB7XG4gICAgICAgICAgICB0aGlzLl9ib2R5ID0gYm9keTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9ib2R5O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIGF0dGFjaCBnaXZlbiBhcHBJZCBhbmQgYXBwS2V5IHRvIHJlcXVlc3QuXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBhcHBJZCBUaGUgYXBwSWQgdG8gYXR0YWNoLlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gY2xpZW50S2V5IFRoZSBhcHBLZXkgdG8gYXR0YWNoLlxuICAgICAqIEByZXR1cm4ge0FyZ3NCdWlsZGVyfSBSZXR1cm5zIGFuIG9iamVjdCBvZiBBcmdzQnVpbGRlci5cbiAgICAgKi9cbiAgICBBcmdzQnVpbGRlci5wcm90b3R5cGUuYXR0YWNoQXBpS2V5cyA9IGZ1bmN0aW9uIChhcHBJZCwgY2xpZW50S2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5BUFBfSUQsIGFwcElkKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5DTElFTlQsIENvbnN0YW50c18xLmRlZmF1bHQuQ0xJRU5UKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5DTElFTlRfS0VZLCBjbGllbnRLZXkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBhcmd1bWVudHMuXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBBcmd1bWVudHMgc3RyaW5nLlxuICAgICAqL1xuICAgIEFyZ3NCdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJnU3RyaW5nO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBhcmd1bWVudCB2YWx1ZXMuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgYXJndW1lbnQgdmFsdWVzLlxuICAgICAqL1xuICAgIEFyZ3NCdWlsZGVyLnByb3RvdHlwZS5idWlsZERpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFyZ1ZhbHVlcztcbiAgICB9O1xuICAgIHJldHVybiBBcmdzQnVpbGRlcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBBcmdzQnVpbGRlcjtcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICpcbiAqICBDb3B5cmlnaHQgMjAxNyBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZVxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGxvY2FsU3RvcmFnZUVuYWJsZWQ7XG52YXIgYWx0ZXJuYXRlTG9jYWxTdG9yYWdlID0ge307XG52YXIgTG9jYWxTdG9yYWdlTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMb2NhbFN0b3JhZ2VNYW5hZ2VyKCkge1xuICAgIH1cbiAgICBMb2NhbFN0b3JhZ2VNYW5hZ2VyLmdldEZyb21Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2VFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFsdGVybmF0ZUxvY2FsU3RvcmFnZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2Vba2V5XTtcbiAgICB9O1xuICAgIExvY2FsU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZUVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBhbHRlcm5hdGVMb2NhbFN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2VFbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICBhbHRlcm5hdGVMb2NhbFN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMb2NhbFN0b3JhZ2VNYW5hZ2VyLnJlbW92ZUZyb21Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2VFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGFsdGVybmF0ZUxvY2FsU3RvcmFnZVtrZXldO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2VFbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICBkZWxldGUgYWx0ZXJuYXRlTG9jYWxTdG9yYWdlW2tleV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBMb2NhbFN0b3JhZ2VNYW5hZ2VyO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExvY2FsU3RvcmFnZU1hbmFnZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDE3IExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlXG4gKlxuICovXG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbnZhciBBcmdzQnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0FyZ3NCdWlsZGVyXCIpKTtcbnZhciBJbnRlcm5hbFN0YXRlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vSW50ZXJuYWxTdGF0ZVwiKSk7XG52YXIgTmV0d29ya18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL05ldHdvcmtcIikpO1xudmFyIExvY2FsU3RvcmFnZU1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Mb2NhbFN0b3JhZ2VNYW5hZ2VyXCIpKTtcbnZhciBsYXN0UmVxdWVzdFRpbWUgPSB1bmRlZmluZWQ7XG52YXIgY29vbGRvd25UaW1lb3V0ID0gbnVsbDtcbnZhciBMZWFucGx1bVJlcXVlc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGVhbnBsdW1SZXF1ZXN0KCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3Rpb25cbiAgICAgKiBAcGFyYW0gcGFyYW1zXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5zdWNjZXNzXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZXJyb3JcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZXNwb25zZVxuICAgICAqIEBwYXJhbSBvcHRpb25zLnF1ZXVlZFxuICAgICAqIEBwYXJhbSBvcHRpb25zLnNlbmROb3dcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIExlYW5wbHVtUmVxdWVzdC5yZXF1ZXN0ID0gZnVuY3Rpb24gKGFjdGlvbiwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwgbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpO1xuICAgICAgICAvLyBHZXQgb3IgY3JlYXRlIGRldmljZSBJRCBhbmQgdXNlciBJRC5cbiAgICAgICAgaWYgKCFMZWFucGx1bVJlcXVlc3QuZGV2aWNlSWQpIHtcbiAgICAgICAgICAgIExlYW5wbHVtUmVxdWVzdC5kZXZpY2VJZCA9XG4gICAgICAgICAgICAgICAgTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0RnJvbUxvY2FsU3RvcmFnZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5ERVZJQ0VfSUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghTGVhbnBsdW1SZXF1ZXN0LmRldmljZUlkKSB7XG4gICAgICAgICAgICB2YXIgaWQgPSAnJztcbiAgICAgICAgICAgIHZhciBwb3NzaWJsZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JyArXG4gICAgICAgICAgICAgICAgJzAxMjM0NTY3ODknO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWQgKz0gcG9zc2libGUuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlLmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTGVhbnBsdW1SZXF1ZXN0LmRldmljZUlkID0gaWQ7XG4gICAgICAgICAgICBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5zYXZlVG9Mb2NhbFN0b3JhZ2UoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuREVWSUNFX0lELCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFMZWFucGx1bVJlcXVlc3QudXNlcklkKSB7XG4gICAgICAgICAgICBMZWFucGx1bVJlcXVlc3QudXNlcklkID0gTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0RnJvbUxvY2FsU3RvcmFnZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5VU0VSX0lEKTtcbiAgICAgICAgICAgIGlmICghTGVhbnBsdW1SZXF1ZXN0LnVzZXJJZCkge1xuICAgICAgICAgICAgICAgIExlYW5wbHVtUmVxdWVzdC51c2VySWQgPSBMZWFucGx1bVJlcXVlc3QuZGV2aWNlSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuc2F2ZVRvTG9jYWxTdG9yYWdlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlVTRVJfSUQsIExlYW5wbHVtUmVxdWVzdC51c2VySWQpO1xuICAgICAgICB2YXIgYXJnc0J1aWxkZXIgPSBwYXJhbXNcbiAgICAgICAgICAgIC5hdHRhY2hBcGlLZXlzKExlYW5wbHVtUmVxdWVzdC5hcHBJZCwgTGVhbnBsdW1SZXF1ZXN0LmNsaWVudEtleSlcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuU0RLX1ZFUlNJT04sIENvbnN0YW50c18xLmRlZmF1bHQuU0RLX1ZFUlNJT04pXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkRFVklDRV9JRCwgTGVhbnBsdW1SZXF1ZXN0LmRldmljZUlkKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5VU0VSX0lELCBMZWFucGx1bVJlcXVlc3QudXNlcklkKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5BQ1RJT04sIGFjdGlvbilcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVkVSU0lPTl9OQU1FLCBMZWFucGx1bVJlcXVlc3QudmVyc2lvbk5hbWUpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkRFVl9NT0RFLCBJbnRlcm5hbFN0YXRlXzEuZGVmYXVsdC5kZXZNb2RlKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5USU1FLCAobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKS50b1N0cmluZygpKTtcbiAgICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3MgfHwgb3B0aW9ucy5yZXNwb25zZTtcbiAgICAgICAgdmFyIGVycm9yID0gb3B0aW9ucy5lcnJvciB8fCBvcHRpb25zLnJlc3BvbnNlO1xuICAgICAgICBpZiAoIUxlYW5wbHVtUmVxdWVzdC5hcHBJZCB8fCAhTGVhbnBsdW1SZXF1ZXN0LmNsaWVudEtleSkge1xuICAgICAgICAgICAgdmFyIGVyciA9ICdMZWFucGx1bSBBcHAgSUQgYW5kIGNsaWVudCBrZXkgYXJlIG5vdCBzZXQuIE1ha2Ugc3VyZSB5b3UgJyArXG4gICAgICAgICAgICAgICAgJ2FyZSBjYWxsaW5nIHNldEFwcElkRm9yRGV2ZWxvcG1lbnRNb2RlIG9yIHNldEFwcElkRm9yUHJvZHVjdGlvbk1vZGUgJyArXG4gICAgICAgICAgICAgICAgJ2JlZm9yZSBpc3N1aW5nIEFQSSBjYWxscy4nO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIGVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5ib2R5KCkpIHtcbiAgICAgICAgICAgIE5ldHdvcmtfMS5kZWZhdWx0LmFqYXgoJ1BPU1QnLCBMZWFucGx1bVJlcXVlc3QuYXBpUGF0aCArIFwiP1wiICsgYXJnc0J1aWxkZXIuYnVpbGQoKSwgcGFyYW1zLmJvZHkoKSwgc3VjY2VzcywgZXJyb3IsIG9wdGlvbnMucXVldWVkKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VuZE5vdyA9IEludGVybmFsU3RhdGVfMS5kZWZhdWx0LmRldk1vZGUgfHwgb3B0aW9ucy5zZW5kTm93IHx8ICFMZWFucGx1bVJlcXVlc3QuYmF0Y2hFbmFibGVkO1xuICAgICAgICB2YXIgc2VuZFVuc2VudFJlcXVlc3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcXVlc3RzVG9TZW5kID0gTGVhbnBsdW1SZXF1ZXN0LnBvcFVuc2VudFJlcXVlc3RzKCk7XG4gICAgICAgICAgICBpZiAocmVxdWVzdHNUb1NlbmQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0RGF0YSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEnOiByZXF1ZXN0c1RvU2VuZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBtdWx0aVJlcXVlc3RBcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRhY2hBcGlLZXlzKExlYW5wbHVtUmVxdWVzdC5hcHBJZCwgTGVhbnBsdW1SZXF1ZXN0LmNsaWVudEtleSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5TREtfVkVSU0lPTiwgQ29uc3RhbnRzXzEuZGVmYXVsdC5TREtfVkVSU0lPTilcbiAgICAgICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5BQ1RJT04sIENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5NVUxUSSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5USU1FLCAobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKS50b1N0cmluZygpLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgIC5idWlsZCgpO1xuICAgICAgICAgICAgICAgIE5ldHdvcmtfMS5kZWZhdWx0LmFqYXgoJ1BPU1QnLCBMZWFucGx1bVJlcXVlc3QuYXBpUGF0aCArIFwiP1wiICsgbXVsdGlSZXF1ZXN0QXJncywgcmVxdWVzdERhdGEsIHN1Y2Nlc3MsIGVycm9yLCBvcHRpb25zLnF1ZXVlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIERlYWwgd2l0aCBjb29sZG93bi5cbiAgICAgICAgaWYgKCFzZW5kTm93ICYmIExlYW5wbHVtUmVxdWVzdC5iYXRjaENvb2xkb3duKSB7XG4gICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwO1xuICAgICAgICAgICAgaWYgKCFsYXN0UmVxdWVzdFRpbWUgfHxcbiAgICAgICAgICAgICAgICBub3cgLSBsYXN0UmVxdWVzdFRpbWUgPj0gTGVhbnBsdW1SZXF1ZXN0LmJhdGNoQ29vbGRvd24pIHtcbiAgICAgICAgICAgICAgICBzZW5kTm93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBsYXN0UmVxdWVzdFRpbWUgPSBub3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghY29vbGRvd25UaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgY29vbGRvd25UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvb2xkb3duVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RSZXF1ZXN0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFVuc2VudFJlcXVlc3RzKCk7XG4gICAgICAgICAgICAgICAgfSwgKExlYW5wbHVtUmVxdWVzdC5iYXRjaENvb2xkb3duIC0gKG5vdyAtIGxhc3RSZXF1ZXN0VGltZSkpICogMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgTGVhbnBsdW1SZXF1ZXN0LnNhdmVSZXF1ZXN0Rm9yTGF0ZXIoYXJnc0J1aWxkZXIuYnVpbGREaWN0KCkpO1xuICAgICAgICBpZiAoc2VuZE5vdykge1xuICAgICAgICAgICAgc2VuZFVuc2VudFJlcXVlc3RzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG5ldHdvcmsgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyBUaGUgdGltZW91dCBpbiBzZWNvbmRzLlxuICAgICAqL1xuICAgIExlYW5wbHVtUmVxdWVzdC5zZXROZXR3b3JrVGltZW91dCA9IGZ1bmN0aW9uIChzZWNvbmRzKSB7XG4gICAgICAgIE5ldHdvcmtfMS5kZWZhdWx0LnNldE5ldHdvcmtUaW1lb3V0KHNlY29uZHMpO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnNhdmVSZXF1ZXN0Rm9yTGF0ZXIgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgY291bnQgPSBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5nZXRGcm9tTG9jYWxTdG9yYWdlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkNPVU5UKSB8fCAwO1xuICAgICAgICB2YXIgaXRlbUtleSA9IENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLklURU0gKyBjb3VudDtcbiAgICAgICAgTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuc2F2ZVRvTG9jYWxTdG9yYWdlKGl0ZW1LZXksIEpTT04uc3RyaW5naWZ5KGFyZ3MpKTtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuc2F2ZVRvTG9jYWxTdG9yYWdlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkNPVU5ULCBjb3VudCk7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucG9wVW5zZW50UmVxdWVzdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXF1ZXN0RGF0YSA9IFtdO1xuICAgICAgICB2YXIgY291bnQgPSBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5nZXRGcm9tTG9jYWxTdG9yYWdlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkNPVU5UKSB8fCAwO1xuICAgICAgICBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5yZW1vdmVGcm9tTG9jYWxTdG9yYWdlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkNPVU5UKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbUtleSA9IENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLklURU0gKyBpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdEFyZ3MgPSBKU09OLnBhcnNlKExvY2FsU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LmdldEZyb21Mb2NhbFN0b3JhZ2UoaXRlbUtleSkpO1xuICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLnB1c2gocmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGlnbm9yZWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5yZW1vdmVGcm9tTG9jYWxTdG9yYWdlKGl0ZW1LZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXF1ZXN0RGF0YTtcbiAgICB9O1xuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8gUmVzcG9uc2UgcGFyc2luZyAvLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBMZWFucGx1bVJlcXVlc3QubnVtUmVzcG9uc2VzID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVzcG9uc2UubGVuZ3RoO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LmdldFJlc3BvbnNlQXQgPSBmdW5jdGlvbiAocmVzcG9uc2UsIGluZGV4KSB7XG4gICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVzcG9uc2VbaW5kZXhdO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LmdldExhc3RSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICB2YXIgY291bnQgPSBMZWFucGx1bVJlcXVlc3QubnVtUmVzcG9uc2VzKHJlc3BvbnNlKTtcbiAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIExlYW5wbHVtUmVxdWVzdC5nZXRSZXNwb25zZUF0KHJlc3BvbnNlLCBjb3VudCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExlYW5wbHVtUmVxdWVzdC5pc1Jlc3BvbnNlU3VjY2VzcyA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhcmVzcG9uc2Uuc3VjY2VzcztcbiAgICB9O1xuICAgIExlYW5wbHVtUmVxdWVzdC5nZXRSZXNwb25zZUVycm9yID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgICB9O1xuICAgIExlYW5wbHVtUmVxdWVzdC5hcGlQYXRoID0gJ2h0dHBzOi8vd3d3LmxlYW5wbHVtLmNvbS9hcGknO1xuICAgIExlYW5wbHVtUmVxdWVzdC5iYXRjaEVuYWJsZWQgPSB0cnVlO1xuICAgIExlYW5wbHVtUmVxdWVzdC5iYXRjaENvb2xkb3duID0gNTtcbiAgICByZXR1cm4gTGVhbnBsdW1SZXF1ZXN0O1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExlYW5wbHVtUmVxdWVzdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbiAqXG4gKiAgQ29weXJpZ2h0IDIwMTcgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2VcbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBJbnRlcm5hbFN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEludGVybmFsU3RhdGUoKSB7XG4gICAgfVxuICAgIEludGVybmFsU3RhdGUuYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICBJbnRlcm5hbFN0YXRlLnN0YXJ0SGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICAgICAgaWYgKEludGVybmFsU3RhdGUuaGFzU3RhcnRlZCkge1xuICAgICAgICAgICAgaGFuZGxlcihJbnRlcm5hbFN0YXRlLnN0YXJ0U3VjY2Vzc2Z1bCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEludGVybmFsU3RhdGUucmVtb3ZlU3RhcnRSZXNwb25zZUhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB2YXIgaWR4ID0gSW50ZXJuYWxTdGF0ZS5zdGFydEhhbmRsZXJzLmluZGV4T2YoaGFuZGxlcik7XG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgSW50ZXJuYWxTdGF0ZS5zdGFydEhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnRlcm5hbFN0YXRlLnRyaWdnZXJTdGFydEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IEludGVybmFsU3RhdGUuc3RhcnRIYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgSW50ZXJuYWxTdGF0ZS5zdGFydEhhbmRsZXJzW2ldKEludGVybmFsU3RhdGUuc3RhcnRTdWNjZXNzZnVsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW50ZXJuYWxTdGF0ZS5hZGRWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIEludGVybmFsU3RhdGUudmFyaWFibGVzQ2hhbmdlZEhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICAgIGlmIChJbnRlcm5hbFN0YXRlLmhhc1JlY2VpdmVkRGlmZnMpIHtcbiAgICAgICAgICAgIGhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW50ZXJuYWxTdGF0ZS5yZW1vdmVWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHZhciBpZHggPSBJbnRlcm5hbFN0YXRlLnZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIEludGVybmFsU3RhdGUudmFyaWFibGVzQ2hhbmdlZEhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnRlcm5hbFN0YXRlLnRyaWdnZXJWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgSW50ZXJuYWxTdGF0ZS52YXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIEludGVybmFsU3RhdGUudmFyaWFibGVzQ2hhbmdlZEhhbmRsZXJzW2ldKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEludGVybmFsU3RhdGUuc2V0VmFyaWFudERlYnVnSW5mb0VuYWJsZWQgPSBmdW5jdGlvbiAodmFyaWFudERlYnVnSW5mb0VuYWJsZWQpIHtcbiAgICAgICAgSW50ZXJuYWxTdGF0ZS52YXJpYW50RGVidWdJbmZvRW5hYmxlZCA9IHZhcmlhbnREZWJ1Z0luZm9FbmFibGVkO1xuICAgIH07XG4gICAgSW50ZXJuYWxTdGF0ZS5kZXZNb2RlID0gZmFsc2U7XG4gICAgSW50ZXJuYWxTdGF0ZS52YXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMgPSBbXTtcbiAgICBJbnRlcm5hbFN0YXRlLmhhc1JlY2VpdmVkRGlmZnMgPSBmYWxzZTtcbiAgICBJbnRlcm5hbFN0YXRlLnN0YXJ0SGFuZGxlcnMgPSBbXTtcbiAgICBJbnRlcm5hbFN0YXRlLmhhc1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICBJbnRlcm5hbFN0YXRlLnN0YXJ0U3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgIEludGVybmFsU3RhdGUudmFyaWFudERlYnVnSW5mb0VuYWJsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gSW50ZXJuYWxTdGF0ZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBJbnRlcm5hbFN0YXRlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gKiBlcXVpdmFsZW50LlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBvYmplY3QgPT09IG90aGVyO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFcXVhbDtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQXJyYXlzO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQWpheCBmdW5jdGlvbnMgZnJvbTpcbiAqXG4gKiBQYXJzZSBKYXZhU2NyaXB0IFNES1xuICogVmVyc2lvbjogMS4xLjVcbiAqIEJ1aWx0OiBNb24gT2N0IDAxIDIwMTIgMTc6NTc6MTNcbiAqIGh0dHA6Ly9wYXJzZS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAxMiBQYXJzZSwgSW5jLlxuICogVGhlIFBhcnNlIEphdmFTY3JpcHQgU0RLIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkdcbiAqIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVJcbiAqIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xudmFyIHJlcXVlc3RRdWV1ZSA9IFtdO1xudmFyIG5ldHdvcmtUaW1lb3V0U2Vjb25kcyA9IDEwO1xudmFyIE5ldHdvcmsgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmV0d29yaygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbmV0d29yayB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzIFRoZSB0aW1lb3V0IGluIHNlY29uZHMuXG4gICAgICovXG4gICAgTmV0d29yay5zZXROZXR3b3JrVGltZW91dCA9IGZ1bmN0aW9uIChzZWNvbmRzKSB7XG4gICAgICAgIG5ldHdvcmtUaW1lb3V0U2Vjb25kcyA9IHNlY29uZHM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNYWtlIGFuIGFqYXggcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIFRoZSBodHRwIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgdG8gb3Blbi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcnxCbG9ifERvY3VtZW50fEZvcm1EYXRhfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHNlbnQgaW4gYm9keS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWNjZXNzIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIHN1Y2Nlc3MuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZXJyb3IgQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gZXJyb3IuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBxdWV1ZWQgV2hldGhlciB0aGUgcmVxdWVzdCBzaG91bGQgYmUgcXVldWVkIG9yIGltbWVkaWF0ZWx5IHNlbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcGxhaW5UZXh0XSBXaGV0aGVyIHRoZSByZXNwb25zZSBzaG91bGQgYmUgcmV0dXJuZWQgYXMgcGxhaW4gdGV4dCBvciBqc29uLlxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICovXG4gICAgTmV0d29yay5hamF4ID0gZnVuY3Rpb24gKG1ldGhvZCwgdXJsLCBkYXRhLCBzdWNjZXNzLCBlcnJvciwgcXVldWVkLCBwbGFpblRleHQpIHtcbiAgICAgICAgaWYgKHF1ZXVlZCkge1xuICAgICAgICAgICAgaWYgKE5ldHdvcmsucnVubmluZ1JlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICAgICAgICAgICAgcmV0dXJuIE5ldHdvcmsuZW5xdWV1ZVJlcXVlc3QoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE5ldHdvcmsucnVubmluZ1JlcXVlc3QgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBAbmFtZXNwYWNlIFhEb21haW5SZXF1ZXN0ICoqL1xuICAgICAgICAvKiogQG5hbWVzcGFjZSBsb2NhdGlvbiAqKi9cbiAgICAgICAgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHA6JyAmJiB1cmwuaW5kZXhPZignaHR0cHM6JykgPT09IDApIHtcbiAgICAgICAgICAgICAgICB1cmwgPSBcImh0dHA6XCIgKyB1cmwuc3Vic3RyaW5nKDYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5LmNhbGwoTmV0d29yay5hamF4SUU4LCBudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoYW5kbGVkID0gZmFsc2U7XG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlXzE7XG4gICAgICAgICAgICAgICAgdmFyIHJhbkNhbGxiYWNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHBsYWluVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZV8xID0geGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZV8xID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKG51bGwsIHhocik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5DYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFyYW5DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyhyZXNwb25zZV8xLCB4aHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKHJlc3BvbnNlXzEsIHhocik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlZCkge1xuICAgICAgICAgICAgICAgICAgICBOZXR3b3JrLnJ1bm5pbmdSZXF1ZXN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIE5ldHdvcmsuZGVxdWV1ZVJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L3BsYWluJyk7IC8vIEF2b2lkIHByZS1mbGlnaHQuXG4gICAgICAgIHhoci5zZW5kKGRhdGEpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghaGFuZGxlZCkge1xuICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBuZXR3b3JrVGltZW91dFNlY29uZHMgKiAxMDAwKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1ha2UgYW4gYWpheCByZXF1ZXN0IGZvciBJRTguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBUaGUgaHR0cCBtZXRob2QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgdXJsIHRvIG9wZW4uXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ8QmxvYnxEb2N1bWVudHxGb3JtRGF0YX0gZGF0YSBUaGUgZGF0YSB0byBiZSBzZW50IGluIGJvZHkuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gc3VjY2VzcyBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBzdWNjZXNzLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGVycm9yIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGVycm9yLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcXVldWVkIFdoZXRoZXIgdGhlIHJlcXVlc3Qgc2hvdWxkIGJlIHF1ZXVlZCBvciBpbW1lZGlhdGVseSBzZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGxhaW5UZXh0IFdoZXRoZXIgdGhlIHJlc3BvbnNlIHNob3VsZCBiZSByZXR1cm5lZCBhcyBwbGFpbiB0ZXh0IG9yIGpzb24uXG4gICAgICovXG4gICAgTmV0d29yay5hamF4SUU4ID0gZnVuY3Rpb24gKG1ldGhvZCwgdXJsLCBkYXRhLCBzdWNjZXNzLCBlcnJvciwgcXVldWVkLCBwbGFpblRleHQpIHtcbiAgICAgICAgdmFyIHhkciA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgICAgICB4ZHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgdmFyIHJhbkNhbGxiYWNrID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAocGxhaW5UZXh0KSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB4ZHIucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHhkci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKG51bGwsIHhkcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICByYW5DYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFyYW5DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyhyZXNwb25zZSwgeGRyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHF1ZXVlZCkge1xuICAgICAgICAgICAgICAgIE5ldHdvcmsucnVubmluZ1JlcXVlc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBOZXR3b3JrLmRlcXVldWVSZXF1ZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhkci5vbmVycm9yID0geGRyLm9udGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcihudWxsLCB4ZHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgaWYgKHF1ZXVlZCkge1xuICAgICAgICAgICAgICAgIE5ldHdvcmsucnVubmluZ1JlcXVlc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBOZXR3b3JrLmRlcXVldWVSZXF1ZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhkci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB9O1xuICAgICAgICB4ZHIub3BlbihtZXRob2QsIHVybCk7XG4gICAgICAgIHhkci50aW1lb3V0ID0gbmV0d29ya1RpbWVvdXRTZWNvbmRzICogMTAwMDtcbiAgICAgICAgeGRyLnNlbmQoZGF0YSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSByZXF1ZXN0IHRvIHRoZSByZXF1ZXN0IHF1ZXVlLlxuICAgICAqIEBwYXJhbSB7QXJndW1lbnRzfSByZXF1ZXN0QXJndW1lbnRzIFRoZSByZXF1ZXN0IGFyZ3VtZW50cyBmcm9tIHRoZSBpbml0aWFsIG1ldGhvZCBjYWxsLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgTmV0d29yay5lbnF1ZXVlUmVxdWVzdCA9IGZ1bmN0aW9uIChyZXF1ZXN0QXJndW1lbnRzKSB7XG4gICAgICAgIHJlcXVlc3RRdWV1ZS5wdXNoKHJlcXVlc3RBcmd1bWVudHMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcmVxdWVzdCBmcm9tIHRoZSByZXF1ZXN0IHF1ZXVlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgTmV0d29yay5kZXF1ZXVlUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSByZXF1ZXN0UXVldWUuc2hpZnQoKTtcbiAgICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgICAgIGFwcGx5LmNhbGwoTmV0d29yay5hamF4LCBudWxsLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTmV0d29yay5ydW5uaW5nUmVxdWVzdCA9IGZhbHNlO1xuICAgIHJldHVybiBOZXR3b3JrO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE5ldHdvcms7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDE3IExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlXG4gKlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbnZhciBJbnRlcm5hbFN0YXRlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vSW50ZXJuYWxTdGF0ZVwiKSk7XG52YXIgQXJnc0J1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9BcmdzQnVpbGRlclwiKSk7XG52YXIgTG9jYWxTdG9yYWdlTWFuYWdlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0xvY2FsU3RvcmFnZU1hbmFnZXJcIikpO1xudmFyIExlYW5wbHVtUmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0xlYW5wbHVtUmVxdWVzdFwiKSk7XG52YXIgVmFyQ2FjaGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFyQ2FjaGUoKSB7XG4gICAgfVxuICAgIFZhckNhY2hlLmFwcGx5RGlmZnMgPSBmdW5jdGlvbiAoZGlmZnMsIHZhcmlhbnRzLCBhY3Rpb25NZXRhZGF0YSkge1xuICAgICAgICBWYXJDYWNoZS5kaWZmcyA9IGRpZmZzO1xuICAgICAgICBWYXJDYWNoZS52YXJpYW50cyA9IHZhcmlhbnRzO1xuICAgICAgICBWYXJDYWNoZS5hY3Rpb25NZXRhZGF0YSA9IGFjdGlvbk1ldGFkYXRhO1xuICAgICAgICBJbnRlcm5hbFN0YXRlXzEuZGVmYXVsdC5oYXNSZWNlaXZlZERpZmZzID0gdHJ1ZTtcbiAgICAgICAgVmFyQ2FjaGUubWVyZ2VkID0gVmFyQ2FjaGUubWVyZ2VIZWxwZXIoVmFyQ2FjaGUudmFyaWFibGVzLCBkaWZmcyk7XG4gICAgICAgIFZhckNhY2hlLnNhdmVEaWZmcygpO1xuICAgICAgICBpZiAoVmFyQ2FjaGUub25VcGRhdGUpIHtcbiAgICAgICAgICAgIFZhckNhY2hlLm9uVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZhckNhY2hlLmxvYWREaWZmcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFZhckNhY2hlLmFwcGx5RGlmZnMoSlNPTi5wYXJzZShMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5nZXRGcm9tTG9jYWxTdG9yYWdlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlZBUklBQkxFUykgfHwgbnVsbCksIEpTT04ucGFyc2UoTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0RnJvbUxvY2FsU3RvcmFnZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5WQVJJQU5UUykgfHwgbnVsbCksIEpTT04ucGFyc2UoTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0RnJvbUxvY2FsU3RvcmFnZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5BQ1RJT05fTUVUQURBVEEpIHx8IG51bGwpKTtcbiAgICAgICAgICAgIFZhckNhY2hlLnRva2VuID0gTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0RnJvbUxvY2FsU3RvcmFnZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5UT0tFTik7XG4gICAgICAgICAgICBWYXJDYWNoZS52YXJpYW50RGVidWdJbmZvID0gTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0RnJvbUxvY2FsU3RvcmFnZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5WQVJJQU5UX0RFQlVHX0lORk8pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxlYW5wbHVtOiBJbnZhbGlkIGRpZmZzOiBcIiArIGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWYXJDYWNoZS5zYXZlRGlmZnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIExvY2FsU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnNhdmVUb0xvY2FsU3RvcmFnZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5WQVJJQUJMRVMsIEpTT04uc3RyaW5naWZ5KFZhckNhY2hlLmRpZmZzIHx8IHt9KSk7XG4gICAgICAgIExvY2FsU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnNhdmVUb0xvY2FsU3RvcmFnZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5WQVJJQU5UUywgSlNPTi5zdHJpbmdpZnkoVmFyQ2FjaGUudmFyaWFudHMgfHwgW10pKTtcbiAgICAgICAgTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuc2F2ZVRvTG9jYWxTdG9yYWdlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkFDVElPTl9NRVRBREFUQSwgSlNPTi5zdHJpbmdpZnkoVmFyQ2FjaGUuYWN0aW9uTWV0YWRhdGEgfHwge30pKTtcbiAgICAgICAgTG9jYWxTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuc2F2ZVRvTG9jYWxTdG9yYWdlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlZBUklBTlRfREVCVUdfSU5GTywgSlNPTi5zdHJpbmdpZnkoVmFyQ2FjaGUudmFyaWFudERlYnVnSW5mbyB8fCB7fSkpO1xuICAgICAgICBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5zYXZlVG9Mb2NhbFN0b3JhZ2UoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVE9LRU4sIFZhckNhY2hlLnRva2VuKTtcbiAgICB9O1xuICAgIFZhckNhY2hlLnNldFZhcmlhYmxlcyA9IGZ1bmN0aW9uICh2YXJpYWJsZXMpIHtcbiAgICAgICAgVmFyQ2FjaGUudmFyaWFibGVzID0gdmFyaWFibGVzO1xuICAgIH07XG4gICAgVmFyQ2FjaGUuZ2V0VmFyaWFibGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gVmFyQ2FjaGUubWVyZ2VkICE9PSB1bmRlZmluZWQgPyBWYXJDYWNoZS5tZXJnZWQgOiBWYXJDYWNoZS52YXJpYWJsZXM7XG4gICAgfTtcbiAgICBWYXJDYWNoZS5nZXRWYXJpYW50RGVidWdJbmZvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gVmFyQ2FjaGUudmFyaWFudERlYnVnSW5mbztcbiAgICB9O1xuICAgIFZhckNhY2hlLnNlbmRWYXJpYWJsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBib2R5ID0ge307XG4gICAgICAgIGJvZHlbQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVkFSSUFCTEVTXSA9IFZhckNhY2hlLnZhcmlhYmxlcztcbiAgICAgICAgTGVhbnBsdW1SZXF1ZXN0XzEuZGVmYXVsdC5yZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5TRVRfVkFSUywgbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpLmJvZHkoSlNPTi5zdHJpbmdpZnkoYm9keSkpLCB7XG4gICAgICAgICAgICBzZW5kTm93OiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVmFyQ2FjaGUubWVyZ2VIZWxwZXIgPSBmdW5jdGlvbiAodmFycywgZGlmZikge1xuICAgICAgICBpZiAodHlwZW9mIGRpZmYgPT09ICdudW1iZXInIHx8IHR5cGVvZiBkaWZmID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIGRpZmYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlmZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlmZiA9PT0gbnVsbCB8fCBkaWZmID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB2YXJzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvYmpJdGVyYXRvciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZihvYmpbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhdHRyIGluIG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBzZWVtcyB0byBiZSBiZXN0IHByYWN0aWNlOiBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNzA3MVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZWZsZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGF0dHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZihhdHRyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHZhciB2YXJzSXRlcmF0b3IgPSBvYmpJdGVyYXRvcih2YXJzKTtcbiAgICAgICAgdmFyIGRpZmZJdGVyYXRvciA9IG9iakl0ZXJhdG9yKGRpZmYpO1xuICAgICAgICAvLyBJbmZlciB0aGF0IHRoZSBkaWZmcyBpcyBhbiBhcnJheSBpZiB0aGUgdmFycyB2YWx1ZSBkb2Vzbid0IGV4aXN0IHRvIHRlbGwgdXMgdGhlIHR5cGUuXG4gICAgICAgIHZhciBpc0FycmF5ID0gZmFsc2U7XG4gICAgICAgIGlmICh2YXJzID09PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoIShkaWZmIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgaXNBcnJheSA9IG51bGw7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYXR0cmlidXRlIGluIGRpZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkaWZmLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FycmF5ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgYXR0cmlidXRlID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQXJyYXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubGVuZ3RoIDwgMyB8fCBhdHRyaWJ1dGUuY2hhckF0KDApICE9PSAnWycgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS5jaGFyQXQoYXR0cmlidXRlLmxlbmd0aCAtIDEpICE9PSAnXScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQXJyYXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE1lcmdlIGFycmF5cy5cbiAgICAgICAgaWYgKHZhcnMgaW5zdGFuY2VvZiBBcnJheSB8fCBpc0FycmF5KSB7XG4gICAgICAgICAgICB2YXIgbWVyZ2VkXzEgPSBbXTtcbiAgICAgICAgICAgIHZhcnNJdGVyYXRvcihmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgICAgICAgIG1lcmdlZF8xLnB1c2goYXR0cik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRpZmZJdGVyYXRvcihmdW5jdGlvbiAodmFyU3Vic2NyaXB0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdCA9IHBhcnNlSW50KHZhclN1YnNjcmlwdC5zdWJzdHJpbmcoMSwgdmFyU3Vic2NyaXB0Lmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICAgICAgICB2YXIgZGlmZlZhbHVlID0gZGlmZlt2YXJTdWJzY3JpcHRdO1xuICAgICAgICAgICAgICAgIHdoaWxlIChzdWJzY3JpcHQgPj0gbWVyZ2VkXzEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lcmdlZF8xLnB1c2gobnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1lcmdlZF8xW3N1YnNjcmlwdF0gPSBWYXJDYWNoZS5tZXJnZUhlbHBlcihtZXJnZWRfMVtzdWJzY3JpcHRdLCBkaWZmVmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkXzE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWVyZ2UgZGljdGlvbmFyaWVzLlxuICAgICAgICB2YXIgbWVyZ2VkID0ge307XG4gICAgICAgIHZhcnNJdGVyYXRvcihmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgICAgaWYgKGRpZmZbYXR0cl0gPT09IG51bGwgfHwgZGlmZlthdHRyXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkW2F0dHJdID0gdmFyc1thdHRyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRpZmZJdGVyYXRvcihmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgICAgbWVyZ2VkW2F0dHJdID0gVmFyQ2FjaGUubWVyZ2VIZWxwZXIodmFycyAhPT0gbnVsbCA/IHZhcnNbYXR0cl0gOiBudWxsLCBkaWZmW2F0dHJdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgfTtcbiAgICBWYXJDYWNoZS5jbGVhclVzZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBWYXJDYWNoZS5kaWZmcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgVmFyQ2FjaGUudmFyaWFibGVzID0gbnVsbDtcbiAgICAgICAgVmFyQ2FjaGUudmFyaWFudHMgPSBbXTtcbiAgICAgICAgVmFyQ2FjaGUudmFyaWFudERlYnVnSW5mbyA9IHt9O1xuICAgICAgICBWYXJDYWNoZS5tZXJnZWQgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBWYXJDYWNoZS5kaWZmcyA9IHVuZGVmaW5lZDtcbiAgICBWYXJDYWNoZS52YXJpYWJsZXMgPSBudWxsO1xuICAgIFZhckNhY2hlLnZhcmlhbnRzID0gW107XG4gICAgVmFyQ2FjaGUudmFyaWFudERlYnVnSW5mbyA9IHt9O1xuICAgIFZhckNhY2hlLm1lcmdlZCA9IHVuZGVmaW5lZDtcbiAgICBWYXJDYWNoZS5vblVwZGF0ZSA9IHVuZGVmaW5lZDtcbiAgICBWYXJDYWNoZS50b2tlbiA9ICcnO1xuICAgIFZhckNhY2hlLmFjdGlvbk1ldGFkYXRhID0ge307XG4gICAgcmV0dXJuIFZhckNhY2hlO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFZhckNhY2hlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKlxuICpcbiAqICBDb3B5cmlnaHQgMjAxNyBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZVxuICpcbiAqL1xudmFyIENvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnN0YW50c1wiKSk7XG52YXIgSW50ZXJuYWxTdGF0ZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0ludGVybmFsU3RhdGVcIikpO1xudmFyIEFyZ3NCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXJnc0J1aWxkZXJcIikpO1xudmFyIEJyb3dzZXJEZXRlY3Rvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0Jyb3dzZXJEZXRlY3RvclwiKSk7XG52YXIgUHVzaE1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9QdXNoTWFuYWdlclwiKSk7XG52YXIgTG9jYWxTdG9yYWdlTWFuYWdlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0xvY2FsU3RvcmFnZU1hbmFnZXJcIikpO1xudmFyIFZhckNhY2hlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVmFyQ2FjaGVcIikpO1xudmFyIExlYW5wbHVtUmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0xlYW5wbHVtUmVxdWVzdFwiKSk7XG52YXIgTGVhbnBsdW1Tb2NrZXRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9MZWFucGx1bVNvY2tldFwiKSk7XG52YXIgX2Jyb3dzZXJEZXRlY3RvciA9IG5ldyBCcm93c2VyRGV0ZWN0b3JfMS5kZWZhdWx0KCk7XG4vKipcbiAqIEBwcmVzZXJ2ZSBMZWFucGx1bSBKYXZhc2NyaXB0IFNESy5cbiAqIENvcHlyaWdodCAyMDE2LCBMZWFucGx1bSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFlvdSBtYXkgbm90IGRpc3RyaWJ1dGUgdGhpcyBzb3VyY2UgY29kZSB3aXRob3V0IHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvblxuICogZnJvbSBMZWFucGx1bS5cbiAqL1xudmFyIExlYW5wbHVtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExlYW5wbHVtKCkge1xuICAgIH1cbiAgICBMZWFucGx1bS5zZXRBcGlQYXRoID0gZnVuY3Rpb24gKGFwaVBhdGgpIHtcbiAgICAgICAgaWYgKCFMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LmFwaVBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LmFwaVBhdGggPSBhcGlQYXRoO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0RW1haWwgPSBmdW5jdGlvbiAoZW1haWwpIHtcbiAgICAgICAgTGVhbnBsdW0uX2VtYWlsID0gZW1haWw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBuZXR3b3JrIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHMgVGhlIHRpbWVvdXQgaW4gc2Vjb25kcy5cbiAgICAgKi9cbiAgICBMZWFucGx1bS5zZXROZXR3b3JrVGltZW91dCA9IGZ1bmN0aW9uIChzZWNvbmRzKSB7XG4gICAgICAgIExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQuc2V0TmV0d29ya1RpbWVvdXQoc2Vjb25kcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRWYXJpYW50RGVidWdJbmZvRW5hYmxlZCA9IGZ1bmN0aW9uICh2YXJpYW50RGVidWdJbmZvRW5hYmxlZCkge1xuICAgICAgICBJbnRlcm5hbFN0YXRlXzEuZGVmYXVsdC5zZXRWYXJpYW50RGVidWdJbmZvRW5hYmxlZCh2YXJpYW50RGVidWdJbmZvRW5hYmxlZCk7XG4gICAgfTtcbiAgICA7XG4gICAgTGVhbnBsdW0uZ2V0VmFyaWFudERlYnVnSW5mbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFZhckNhY2hlXzEuZGVmYXVsdC5nZXRWYXJpYW50RGVidWdJbmZvKCk7XG4gICAgfTtcbiAgICA7XG4gICAgTGVhbnBsdW0uc2V0QXBwSWRGb3JEZXZlbG9wbWVudE1vZGUgPSBmdW5jdGlvbiAoYXBwSWQsIGFjY2Vzc0tleSkge1xuICAgICAgICBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LmFwcElkID0gYXBwSWQ7XG4gICAgICAgIExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQuY2xpZW50S2V5ID0gYWNjZXNzS2V5O1xuICAgICAgICBJbnRlcm5hbFN0YXRlXzEuZGVmYXVsdC5kZXZNb2RlID0gdHJ1ZTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldEFwcElkRm9yUHJvZHVjdGlvbk1vZGUgPSBmdW5jdGlvbiAoYXBwSWQsIGFjY2Vzc0tleSkge1xuICAgICAgICBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LmFwcElkID0gYXBwSWQ7XG4gICAgICAgIExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQuY2xpZW50S2V5ID0gYWNjZXNzS2V5O1xuICAgICAgICBJbnRlcm5hbFN0YXRlXzEuZGVmYXVsdC5kZXZNb2RlID0gZmFsc2U7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRTb2NrZXRIb3N0ID0gZnVuY3Rpb24gKGhvc3QpIHtcbiAgICAgICAgTGVhbnBsdW1Tb2NrZXRfMS5kZWZhdWx0LnNvY2tldEhvc3QgPSBob3N0O1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0RGV2aWNlSWQgPSBmdW5jdGlvbiAoZGV2aWNlSWQpIHtcbiAgICAgICAgTGVhbnBsdW1SZXF1ZXN0XzEuZGVmYXVsdC5kZXZpY2VJZCA9IGRldmljZUlkO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0QXBwVmVyc2lvbiA9IGZ1bmN0aW9uICh2ZXJzaW9uTmFtZSkge1xuICAgICAgICBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LnZlcnNpb25OYW1lID0gdmVyc2lvbk5hbWU7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXREZXZpY2VOYW1lID0gZnVuY3Rpb24gKGRldmljZU5hbWUpIHtcbiAgICAgICAgTGVhbnBsdW0uX2RldmljZU5hbWUgPSBkZXZpY2VOYW1lO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0RGV2aWNlTW9kZWwgPSBmdW5jdGlvbiAoZGV2aWNlTW9kZWwpIHtcbiAgICAgICAgTGVhbnBsdW0uX2RldmljZU1vZGVsID0gZGV2aWNlTW9kZWw7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRTeXN0ZW1OYW1lID0gZnVuY3Rpb24gKHN5c3RlbU5hbWUpIHtcbiAgICAgICAgTGVhbnBsdW0uX3N5c3RlbU5hbWUgPSBzeXN0ZW1OYW1lO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0U3lzdGVtVmVyc2lvbiA9IGZ1bmN0aW9uIChzeXN0ZW1WZXJzaW9uKSB7XG4gICAgICAgIExlYW5wbHVtLl9zeXN0ZW1WZXJzaW9uID0gc3lzdGVtVmVyc2lvbjtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldFZhcmlhYmxlcyA9IGZ1bmN0aW9uICh2YXJpYWJsZXMpIHtcbiAgICAgICAgVmFyQ2FjaGVfMS5kZWZhdWx0LnNldFZhcmlhYmxlcyh2YXJpYWJsZXMpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0UmVxdWVzdEJhdGNoaW5nID0gZnVuY3Rpb24gKGJhdGNoRW5hYmxlZCwgY29vbGRvd25TZWNvbmRzKSB7XG4gICAgICAgIExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQuYmF0Y2hFbmFibGVkID0gYmF0Y2hFbmFibGVkO1xuICAgICAgICBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LmJhdGNoQ29vbGRvd24gPSBjb29sZG93blNlY29uZHM7XG4gICAgfTtcbiAgICBMZWFucGx1bS5nZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBWYXJDYWNoZV8xLmRlZmF1bHQuZ2V0VmFyaWFibGVzKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5nZXRWYXJpYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3VycmVudCA9IExlYW5wbHVtLmdldFZhcmlhYmxlcygpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50W2FyZ3NbaV1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH07XG4gICAgTGVhbnBsdW0uZ2V0VmFyaWFudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBWYXJDYWNoZV8xLmRlZmF1bHQudmFyaWFudHMgfHwgW107XG4gICAgfTtcbiAgICBMZWFucGx1bS5hZGRTdGFydFJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIEludGVybmFsU3RhdGVfMS5kZWZhdWx0LmFkZFN0YXJ0UmVzcG9uc2VIYW5kbGVyKGhhbmRsZXIpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uYWRkVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICBJbnRlcm5hbFN0YXRlXzEuZGVmYXVsdC5hZGRWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnJlbW92ZVN0YXJ0UmVzcG9uc2VIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgSW50ZXJuYWxTdGF0ZV8xLmRlZmF1bHQucmVtb3ZlU3RhcnRSZXNwb25zZUhhbmRsZXIoaGFuZGxlcik7XG4gICAgfTtcbiAgICBMZWFucGx1bS5yZW1vdmVWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIEludGVybmFsU3RhdGVfMS5kZWZhdWx0LnJlbW92ZVZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyKGhhbmRsZXIpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uZm9yY2VDb250ZW50VXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQucmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuR0VUX1ZBUlMsIG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5JTkNMVURFX0RFRkFVTFRTLCBmYWxzZSlcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuSU5DTFVERV9WQVJJQU5UX0RFQlVHX0lORk8sIEludGVybmFsU3RhdGVfMS5kZWZhdWx0LnZhcmlhbnREZWJ1Z0luZm9FbmFibGVkKSwge1xuICAgICAgICAgICAgcXVldWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICByZXNwb25zZTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdldFZhcnNSZXNwb25zZSA9IExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQuZ2V0TGFzdFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNTdWNjZXNzID0gTGVhbnBsdW1SZXF1ZXN0XzEuZGVmYXVsdC5pc1Jlc3BvbnNlU3VjY2VzcyhnZXRWYXJzUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGlmIChpc1N1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgVmFyQ2FjaGVfMS5kZWZhdWx0LmFwcGx5RGlmZnMoZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJTXSwgZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJJQU5UU10sIGdldFZhcnNSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuQUNUSU9OX01FVEFEQVRBXSk7XG4gICAgICAgICAgICAgICAgICAgIFZhckNhY2hlXzEuZGVmYXVsdC52YXJpYW50RGVidWdJbmZvID0gZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJJQU5UX0RFQlVHX0lORk9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soaXNTdWNjZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnN0YXJ0ID0gZnVuY3Rpb24gKHVzZXJJZCwgdXNlckF0dHJpYnV0ZXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIE92ZXJsb2Fkcy5cbiAgICAgICAgaWYgKHR5cGVvZiB1c2VySWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdXNlcklkO1xuICAgICAgICAgICAgdXNlckF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgICAgIHVzZXJJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHVzZXJJZCA9PT0gJ29iamVjdCcgJiYgdXNlcklkICE9PSBudWxsICYmXG4gICAgICAgICAgICB1c2VySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1c2VyQXR0cmlidXRlcztcbiAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0gdXNlcklkO1xuICAgICAgICAgICAgdXNlcklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdXNlckF0dHJpYnV0ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdXNlckF0dHJpYnV0ZXM7XG4gICAgICAgICAgICB1c2VyQXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQudXNlcklkID0gdXNlcklkO1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIExlYW5wbHVtLmFkZFN0YXJ0UmVzcG9uc2VIYW5kbGVyKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBWYXJDYWNoZV8xLmRlZmF1bHQub25VcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBJbnRlcm5hbFN0YXRlXzEuZGVmYXVsdC50cmlnZ2VyVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXJzKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlVTRVJfQVRUUklCVVRFUywgSlNPTi5zdHJpbmdpZnkodXNlckF0dHJpYnV0ZXMpKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5DT1VOVFJZLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlJFR0lPTiwgQ29uc3RhbnRzXzEuZGVmYXVsdC5WQUxVRVMuREVURUNUKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5DSVRZLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkxPQ0FUSU9OLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlNZU1RFTV9OQU1FLCBMZWFucGx1bS5fc3lzdGVtTmFtZSB8fCBfYnJvd3NlckRldGVjdG9yLk9TKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5TWVNURU1fVkVSU0lPTiwgKExlYW5wbHVtLl9zeXN0ZW1WZXJzaW9uIHx8ICcnKS50b1N0cmluZygpKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5CUk9XU0VSX05BTUUsIF9icm93c2VyRGV0ZWN0b3IuYnJvd3NlcilcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQlJPV1NFUl9WRVJTSU9OLCBfYnJvd3NlckRldGVjdG9yLnZlcnNpb24udG9TdHJpbmcoKSlcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuTE9DQUxFLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkRFVklDRV9OQU1FLCBMZWFucGx1bS5fZGV2aWNlTmFtZSB8fFxuICAgICAgICAgICAgX2Jyb3dzZXJEZXRlY3Rvci5icm93c2VyICsgXCIgXCIgKyBfYnJvd3NlckRldGVjdG9yLnZlcnNpb24pXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkRFVklDRV9NT0RFTCwgTGVhbnBsdW0uX2RldmljZU1vZGVsIHx8ICdXZWIgQnJvd3NlcicpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklOQ0xVREVfREVGQVVMVFMsIGZhbHNlKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5JTkNMVURFX1ZBUklBTlRfREVCVUdfSU5GTywgSW50ZXJuYWxTdGF0ZV8xLmRlZmF1bHQudmFyaWFudERlYnVnSW5mb0VuYWJsZWQpO1xuICAgICAgICAvLyBJc3N1ZSByZXF1ZXN0LlxuICAgICAgICAvLyBub2luc3BlY3Rpb24gQW5ub3RhdG9yXG4gICAgICAgIExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQucmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuU1RBUlQsIGFyZ3MsIHtcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZSxcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICByZXNwb25zZTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgSW50ZXJuYWxTdGF0ZV8xLmRlZmF1bHQuaGFzU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0UmVzcG9uc2UgPSBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LmdldExhc3RSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgaWYgKExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQuaXNSZXNwb25zZVN1Y2Nlc3Moc3RhcnRSZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgSW50ZXJuYWxTdGF0ZV8xLmRlZmF1bHQuc3RhcnRTdWNjZXNzZnVsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEludGVybmFsU3RhdGVfMS5kZWZhdWx0LmRldk1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXRlc3RWZXJzaW9uID0gc3RhcnRSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuTEFURVNUX1ZFUlNJT05dO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhdGVzdFZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkEgbmV3ZXIgdmVyc2lvbiBvZiBMZWFucGx1bSwgXCIgKyBsYXRlc3RWZXJzaW9uICsgXCIsIGlzIGF2YWlsYWJsZS4gR28gdG9cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsZWFucGx1bS5jb20gdG8gZG93bmxvYWQgaXQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBMZWFucGx1bVNvY2tldF8xLmRlZmF1bHQuY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFZhckNhY2hlXzEuZGVmYXVsdC5hcHBseURpZmZzKHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlZBUlNdLCBzdGFydFJlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJJQU5UU10sIHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLkFDVElPTl9NRVRBREFUQV0pO1xuICAgICAgICAgICAgICAgICAgICBWYXJDYWNoZV8xLmRlZmF1bHQudmFyaWFudERlYnVnSW5mbyA9IHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlZBUklBTlRfREVCVUdfSU5GT107XG4gICAgICAgICAgICAgICAgICAgIFZhckNhY2hlXzEuZGVmYXVsdC50b2tlbiA9IHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlRPS0VOXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIEludGVybmFsU3RhdGVfMS5kZWZhdWx0LnN0YXJ0U3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBWYXJDYWNoZV8xLmRlZmF1bHQubG9hZERpZmZzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEludGVybmFsU3RhdGVfMS5kZWZhdWx0LnRyaWdnZXJTdGFydEhhbmRsZXJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc3RhcnRGcm9tQ2FjaGUgPSBmdW5jdGlvbiAodXNlcklkLCB1c2VyQXR0cmlidXRlcywgY2FsbGJhY2spIHtcbiAgICAgICAgLy8gT3ZlcmxvYWRzLlxuICAgICAgICBpZiAodHlwZW9mIHVzZXJJZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1c2VySWQ7XG4gICAgICAgICAgICAvLyBub2luc3BlY3Rpb24gSlNVbnVzZWRBc3NpZ25tZW50XG4gICAgICAgICAgICB1c2VyQXR0cmlidXRlcyA9IHt9O1xuICAgICAgICAgICAgdXNlcklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdXNlcklkID09PSAnb2JqZWN0JyAmJiB1c2VySWQgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHVzZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHVzZXJBdHRyaWJ1dGVzO1xuICAgICAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEpTVW51c2VkQXNzaWdubWVudFxuICAgICAgICAgICAgdXNlckF0dHJpYnV0ZXMgPSB1c2VySWQ7XG4gICAgICAgICAgICB1c2VySWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB1c2VyQXR0cmlidXRlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1c2VyQXR0cmlidXRlcztcbiAgICAgICAgICAgIC8vIG5vaW5zcGVjdGlvbiBKU1VudXNlZEFzc2lnbm1lbnRcbiAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgTGVhbnBsdW1SZXF1ZXN0XzEuZGVmYXVsdC51c2VySWQgPSB1c2VySWQ7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgTGVhbnBsdW0uYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIEludGVybmFsU3RhdGVfMS5kZWZhdWx0Lmhhc1N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICBJbnRlcm5hbFN0YXRlXzEuZGVmYXVsdC5zdGFydFN1Y2Nlc3NmdWwgPSB0cnVlO1xuICAgICAgICBpZiAoSW50ZXJuYWxTdGF0ZV8xLmRlZmF1bHQuZGV2TW9kZSkge1xuICAgICAgICAgICAgTGVhbnBsdW1Tb2NrZXRfMS5kZWZhdWx0LmNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICBWYXJDYWNoZV8xLmRlZmF1bHQubG9hZERpZmZzKCk7XG4gICAgICAgIEludGVybmFsU3RhdGVfMS5kZWZhdWx0LnRyaWdnZXJTdGFydEhhbmRsZXJzKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gQW5ub3RhdG9yXG4gICAgICAgIExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQucmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuU1RPUCwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBzZW5kTm93OiB0cnVlLFxuICAgICAgICAgICAgcXVldWVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW0ucGF1c2VTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gQW5ub3RhdG9yXG4gICAgICAgIExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQucmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuUEFVU0VfU0VTU0lPTiwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBzZW5kTm93OiB0cnVlLFxuICAgICAgICAgICAgcXVldWVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW0ucmVzdW1lU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEFubm90YXRvclxuICAgICAgICBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LnJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlJFU1VNRV9TRVNTSU9OLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5wYXVzZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gQW5ub3RhdG9yXG4gICAgICAgIExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQucmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuUEFVU0VfU1RBVEUsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgcXVldWVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW0ucmVzdW1lU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIG5vaW5zcGVjdGlvbiBBbm5vdGF0b3JcbiAgICAgICAgTGVhbnBsdW1SZXF1ZXN0XzEuZGVmYXVsdC5yZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5SRVNVTUVfU1RBVEUsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgcXVldWVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0VXNlcklkID0gZnVuY3Rpb24gKHVzZXJJZCkge1xuICAgICAgICBMZWFucGx1bS5zZXRVc2VyQXR0cmlidXRlcyh1c2VySWQpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0VXNlckF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAodXNlcklkLCB1c2VyQXR0cmlidXRlcykge1xuICAgICAgICBpZiAodXNlckF0dHJpYnV0ZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1c2VySWQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdXNlckF0dHJpYnV0ZXMgPSB1c2VySWQ7XG4gICAgICAgICAgICAgICAgdXNlcklkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHVzZXJJZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTGVhbnBsdW06IHNldFVzZXJBdHRyaWJ1dGVzIGV4cGVjdHMgYSBzdHJpbmcgb3IgYW4gJyArXG4gICAgICAgICAgICAgICAgICAgICdvYmplY3QnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEFubm90YXRvclxuICAgICAgICBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LnJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlNFVF9VU0VSX0FUVFJJQlVURVMsIG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5VU0VSX0FUVFJJQlVURVMsIHVzZXJBdHRyaWJ1dGVzID8gSlNPTi5zdHJpbmdpZnkodXNlckF0dHJpYnV0ZXMpIDogdW5kZWZpbmVkKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5ORVdfVVNFUl9JRCwgdXNlcklkKSwge1xuICAgICAgICAgICAgcXVldWVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodXNlcklkKSB7XG4gICAgICAgICAgICBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LnVzZXJJZCA9IHVzZXJJZDtcbiAgICAgICAgICAgIExvY2FsU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnNhdmVUb0xvY2FsU3RvcmFnZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5VU0VSX0lELCBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LnVzZXJJZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExlYW5wbHVtLnRyYWNrID0gZnVuY3Rpb24gKGV2ZW50LCB2YWx1ZSwgaW5mbywgcGFyYW1zKSB7XG4gICAgICAgIC8vIE92ZXJsb2Fkcy5cbiAgICAgICAgLy8gb2JqZWN0ICYmICFudWxsICYmICF1bmRlZmluZWQgLT4gcGFyYW1zXG4gICAgICAgIC8vIHN0cmluZyAtPiBpbmZvLCBwYXJhbXNcbiAgICAgICAgLy8gKiwgb2JqZWN0ICYmICFudWxsICYmICF1bmRlZmluZWQgLT4gdmFsdWUsIHBhcmFtc1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXJhbXMgPSB2YWx1ZTtcbiAgICAgICAgICAgIGluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBwYXJhbXMgPSBpbmZvO1xuICAgICAgICAgICAgaW5mbyA9IHZhbHVlO1xuICAgICAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGluZm8gPT09ICdvYmplY3QnICYmIGluZm8gIT09IG51bGwgJiYgaW5mbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXJhbXMgPSBpbmZvO1xuICAgICAgICAgICAgaW5mbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBub2luc3BlY3Rpb24gQW5ub3RhdG9yXG4gICAgICAgIExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQucmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuVFJBQ0ssIG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5FVkVOVCwgZXZlbnQpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlZBTFVFLCB2YWx1ZSB8fCAwLjApXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklORk8sIGluZm8pXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlBBUkFNUywgSlNPTi5zdHJpbmdpZnkocGFyYW1zKSksIHtcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtLmFkdmFuY2VUbyA9IGZ1bmN0aW9uIChzdGF0ZSwgaW5mbywgcGFyYW1zKSB7XG4gICAgICAgIC8vIE92ZXJsb2Fkcy5cbiAgICAgICAgLy8gc3RyaW5nfG51bGx8dW5kZWZpbmVkLCAqIC0+IGluZm8sIHBhcmFtc1xuICAgICAgICAvLyBvYmplY3QgJiYgIW51bGwgJiYgIXVuZGVmaW5lZCAtPiBwYXJhbXNcbiAgICAgICAgaWYgKHR5cGVvZiBpbmZvID09PSAnb2JqZWN0JyAmJiBpbmZvICE9PSBudWxsICYmIGluZm8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyYW1zID0gaW5mbztcbiAgICAgICAgICAgIGluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgTGVhbnBsdW1SZXF1ZXN0XzEuZGVmYXVsdC5yZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5BRFZBTkNFLCBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuU1RBVEUsIHN0YXRlKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5JTkZPLCBpbmZvKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5QQVJBTVMsIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpLCB7XG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHdlYiBwdXNoIGlzIHN1cHBvcnRlZCBpbiB0aGUgYnJvd3Nlci5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHN1cHBvcnRlZCwgZWxzZSBmYWxzZS5cbiAgICAgKi9cbiAgICBMZWFucGx1bS5pc1dlYlB1c2hTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBQdXNoTWFuYWdlcl8xLmRlZmF1bHQuaXNXZWJQdXNoU3VwcG9ydGVkKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHdlYiBwdXNoIGlzIHN1YnNjcmliZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZXMgaWYgdHJ1ZSwgcmVqZWN0cyBpZiBmYWxzZS5cbiAgICAgKi9cbiAgICBMZWFucGx1bS5pc1dlYlB1c2hTdWJzY3JpYmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHVzaE1hbmFnZXJfMS5kZWZhdWx0LmlzV2ViUHVzaFN1YnNjcmliZWQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIHRoZSBicm93c2VyIGZvciB3ZWIgcHVzaC5cbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgc2VydmljZVdvcmtlclVybCBUaGUgdXJsIG9uIHlvdXIgc2VydmVyIHRoYXQgaG9zdHMgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL3N3Lm1pbi5qcyBzZXJ2aWNlIHdvcmtlciBqcyBmaWxlLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgICAgICAgICAgIFJlc29sdmVzIGlmIHJlZ2lzdHJhdGlvbiBzdWNjZXNzZnVsLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyd2lzZSBmYWlscy5cbiAgICAgKi9cbiAgICBMZWFucGx1bS5yZWdpc3RlckZvcldlYlB1c2ggPSBmdW5jdGlvbiAoc2VydmljZVdvcmtlclVybCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgaWYgKFB1c2hNYW5hZ2VyXzEuZGVmYXVsdC5pc1dlYlB1c2hTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQdXNoTWFuYWdlcl8xLmRlZmF1bHQucmVnaXN0ZXIoc2VydmljZVdvcmtlclVybCwgZnVuY3Rpb24gKGlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHVzaE1hbmFnZXJfMS5kZWZhdWx0LnN1YnNjcmliZVVzZXIoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0xlYW5wbHVtOiBXZWJQdXNoIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVW5yZWdpc3RlcnMgdGhlIGJyb3dzZXIgZm9ybSB3ZWIgcHVzaC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICAgIFJlc29sdmVzIG9uIHN1Y2Nlc3MsIG90aGVyd2lzZSByZWplY3RzLlxuICAgICAqL1xuICAgIExlYW5wbHVtLnVucmVnaXN0ZXJGcm9tV2ViUHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFB1c2hNYW5hZ2VyXzEuZGVmYXVsdC51bnN1YnNjcmliZVVzZXIoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFycyBjYWNoZWQgdmFsdWVzIGZvciBtZXNzYWdlcywgdmFyaWFibGVzIGFuZCB0ZXN0IGFzc2lnbm1lbnRzLlxuICAgICAqIFVzZSBzcGFyaW5nbHkgYXMgaWYgdGhlIGFwcCBpcyB1cGRhdGVkLCB5b3UnbGwgaGF2ZSB0byBkZWFsIHdpdGggcG90ZW50aWFsbHlcbiAgICAgKiBpbmNvbnNpc3RlbnQgc3RhdGUgb3IgdXNlciBleHBlcmllbmNlLlxuICAgICAqL1xuICAgIExlYW5wbHVtLmNsZWFyVXNlckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFZhckNhY2hlXzEuZGVmYXVsdC5jbGVhclVzZXJDb250ZW50KCk7XG4gICAgfTtcbiAgICByZXR1cm4gTGVhbnBsdW07XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTGVhbnBsdW07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDE3IExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlXG4gKlxuICovXG52YXIgZGF0YUJyb3dzZXIgPSBbe1xuICAgICAgICBzdHJpbmc6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIHN1YlN0cmluZzogJ0Nocm9tZScsXG4gICAgICAgIGlkZW50aXR5OiAnQ2hyb21lJ1xuICAgIH0sIHtcbiAgICAgICAgc3RyaW5nOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICBzdWJTdHJpbmc6ICdPbW5pV2ViJyxcbiAgICAgICAgdmVyc2lvblNlYXJjaDogJ09tbmlXZWIvJyxcbiAgICAgICAgaWRlbnRpdHk6ICdPbW5pV2ViJ1xuICAgIH0sIHtcbiAgICAgICAgc3RyaW5nOiBuYXZpZ2F0b3IudmVuZG9yLFxuICAgICAgICBzdWJTdHJpbmc6ICdBcHBsZScsXG4gICAgICAgIGlkZW50aXR5OiAnU2FmYXJpJyxcbiAgICAgICAgdmVyc2lvblNlYXJjaDogJ1ZlcnNpb24nXG4gICAgfSwge1xuICAgICAgICBwcm9wOiB3aW5kb3cub3BlcmEsXG4gICAgICAgIGlkZW50aXR5OiAnT3BlcmEnLFxuICAgICAgICB2ZXJzaW9uU2VhcmNoOiAnVmVyc2lvbidcbiAgICB9LCB7XG4gICAgICAgIHN0cmluZzogbmF2aWdhdG9yLnZlbmRvcixcbiAgICAgICAgc3ViU3RyaW5nOiAnaUNhYicsXG4gICAgICAgIGlkZW50aXR5OiAnaUNhYidcbiAgICB9LCB7XG4gICAgICAgIHN0cmluZzogbmF2aWdhdG9yLnZlbmRvcixcbiAgICAgICAgc3ViU3RyaW5nOiAnS0RFJyxcbiAgICAgICAgaWRlbnRpdHk6ICdLb25xdWVyb3InXG4gICAgfSwge1xuICAgICAgICBzdHJpbmc6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIHN1YlN0cmluZzogJ0ZpcmVmb3gnLFxuICAgICAgICBpZGVudGl0eTogJ0ZpcmVmb3gnXG4gICAgfSwge1xuICAgICAgICBzdHJpbmc6IG5hdmlnYXRvci52ZW5kb3IsXG4gICAgICAgIHN1YlN0cmluZzogJ0NhbWlubycsXG4gICAgICAgIGlkZW50aXR5OiAnQ2FtaW5vJ1xuICAgIH0sIHtcbiAgICAgICAgc3RyaW5nOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICBzdWJTdHJpbmc6ICdOZXRzY2FwZScsXG4gICAgICAgIGlkZW50aXR5OiAnTmV0c2NhcGUnXG4gICAgfSwge1xuICAgICAgICBzdHJpbmc6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIHN1YlN0cmluZzogJ01TSUUnLFxuICAgICAgICBpZGVudGl0eTogJ0V4cGxvcmVyJyxcbiAgICAgICAgdmVyc2lvblNlYXJjaDogJ01TSUUnXG4gICAgfSwge1xuICAgICAgICBzdHJpbmc6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIHN1YlN0cmluZzogJ0dlY2tvJyxcbiAgICAgICAgaWRlbnRpdHk6ICdNb3ppbGxhJyxcbiAgICAgICAgdmVyc2lvblNlYXJjaDogJ3J2J1xuICAgIH0sIHtcbiAgICAgICAgc3RyaW5nOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICBzdWJTdHJpbmc6ICdNb3ppbGxhJyxcbiAgICAgICAgaWRlbnRpdHk6ICdOZXRzY2FwZScsXG4gICAgICAgIHZlcnNpb25TZWFyY2g6ICdNb3ppbGxhJ1xuICAgIH1dO1xudmFyIGRhdGFPUyA9IFt7XG4gICAgICAgIHN0cmluZzogbmF2aWdhdG9yLnBsYXRmb3JtLFxuICAgICAgICBzdWJTdHJpbmc6ICdXaW4nLFxuICAgICAgICBpZGVudGl0eTogJ1dpbmRvd3MnXG4gICAgfSwge1xuICAgICAgICBzdHJpbmc6IG5hdmlnYXRvci5wbGF0Zm9ybSxcbiAgICAgICAgc3ViU3RyaW5nOiAnTWFjJyxcbiAgICAgICAgaWRlbnRpdHk6ICdNYWMgT1MnXG4gICAgfSwge1xuICAgICAgICBzdHJpbmc6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIHN1YlN0cmluZzogJ2lQaG9uZScsXG4gICAgICAgIGlkZW50aXR5OiAnaU9TJ1xuICAgIH0sIHtcbiAgICAgICAgc3RyaW5nOiBuYXZpZ2F0b3IucGxhdGZvcm0sXG4gICAgICAgIHN1YlN0cmluZzogJ0xpbnV4JyxcbiAgICAgICAgaWRlbnRpdHk6ICdMaW51eCdcbiAgICB9XTtcbi8vIEJyb3dzZXIgZGV0ZWN0aW9uLiBTb3VyY2U6IGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZGV0ZWN0Lmh0bWxcbi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGRldGVjdCB3aGljaCBicm93c2VyIGNsaWVudCBpcyB1c2luZy5cbiAqL1xudmFyIEJyb3dzZXJEZXRlY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgb2JqZWN0IHdpdGggY3VycmVudCBicm93c2VyIHNldHRpbmdzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJyb3dzZXJEZXRlY3RvcigpIHtcbiAgICAgICAgdGhpcy5icm93c2VyID0gdGhpcy5fc2VhcmNoU3RyaW5nKGRhdGFCcm93c2VyKSB8fCAnVW5rbm93biBCcm93c2VyJztcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdGhpcy5fc2VhcmNoVmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50KSB8fFxuICAgICAgICAgICAgdGhpcy5fc2VhcmNoVmVyc2lvbihuYXZpZ2F0b3IuYXBwVmVyc2lvbikgfHwgJ1Vua25vd24gVmVyc2lvbic7XG4gICAgICAgIHRoaXMuT1MgPSB0aGlzLl9zZWFyY2hTdHJpbmcoZGF0YU9TKSB8fCAnVW5rbm93biBPUyc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoZXMgdGhlIGNsaWVudCdzIHN5c3RlbSB0byB0aGUgcHJlZGVmaW5lZCBzeXN0ZW0gbGlzdC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBUaGUgZGF0YSBvYmplY3QgdG8gc2Nhbi5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBmb3VuZCBpZGVudGl0eSBzdHJpbmcuXG4gICAgICovXG4gICAgQnJvd3NlckRldGVjdG9yLnByb3RvdHlwZS5fc2VhcmNoU3RyaW5nID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZGF0YVN0cmluZyA9IGRhdGFbaV0uc3RyaW5nO1xuICAgICAgICAgICAgdmFyIGRhdGFQcm9wID0gZGF0YVtpXS5wcm9wO1xuICAgICAgICAgICAgdGhpcy52ZXJzaW9uU2VhcmNoU3RyaW5nID0gZGF0YVtpXS52ZXJzaW9uU2VhcmNoIHx8IGRhdGFbaV0uaWRlbnRpdHk7XG4gICAgICAgICAgICBpZiAoZGF0YVN0cmluZykge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhU3RyaW5nLmluZGV4T2YoZGF0YVtpXS5zdWJTdHJpbmcpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtpXS5pZGVudGl0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhUHJvcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2ldLmlkZW50aXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBzeXN0ZW0uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFTdHJpbmcgVGhlIGRhdGEgb2JqZWN0IHRvIHNjYW4uXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgZm91bmQgbnVtYmVyLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgQnJvd3NlckRldGVjdG9yLnByb3RvdHlwZS5fc2VhcmNoVmVyc2lvbiA9IGZ1bmN0aW9uIChkYXRhU3RyaW5nKSB7XG4gICAgICAgIGlmICghZGF0YVN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGRhdGFTdHJpbmcuaW5kZXhPZih0aGlzLnZlcnNpb25TZWFyY2hTdHJpbmcpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoZGF0YVN0cmluZy5zdWJzdHJpbmcoaW5kZXggKyB0aGlzLnZlcnNpb25TZWFyY2hTdHJpbmcubGVuZ3RoICsgMSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEJyb3dzZXJEZXRlY3Rvcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBCcm93c2VyRGV0ZWN0b3I7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDE3IExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlXG4gKlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbnZhciBBcmdzQnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0FyZ3NCdWlsZGVyXCIpKTtcbnZhciBpc0VxdWFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvZGFzaC9pc0VxdWFsXCIpKTtcbnZhciBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTG9jYWxTdG9yYWdlTWFuYWdlclwiKSk7XG52YXIgTGVhbnBsdW1SZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTGVhbnBsdW1SZXF1ZXN0XCIpKTtcbnZhciBBUFBMSUNBVElPTl9TRVJWRVJfUFVCTElDX0tFWSA9ICdCSW5XUHBXbnRmUjM5cmdYU1AwNHBxZG1FZERHYTUwejZ6cWJNdnh5eEpDd3pYSXVTcFNoOEM4ODgtQ2ZKODJXRUxsN1hlOGNqQScgK1xuICAgICduZkN0LTN2SzBDaTY4JztcbnZhciBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbnZhciBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uID0gbnVsbDtcbi8qKlxuICogUHVzaCBNYW5hZ2VyIGhhbmRsZXMgdGhlIHJlZ2lzdHJhdGlvbiBhbmQgc3Vic2NyaXB0aW9uIGZvciB3ZWIgcHVzaC5cbiAqL1xudmFyIFB1c2hNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFB1c2hNYW5hZ2VyKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB3ZWIgcHVzaCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBzdXBwb3J0ZWQsIGVsc2UgZmFsc2UuXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIuaXNXZWJQdXNoU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyICYmICdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IgJiZcbiAgICAgICAgICAgICdQdXNoTWFuYWdlcicgaW4gd2luZG93O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhlIGJyb3dzZXIgaXMgc3Vic2NyaWJlZCB0byB3ZWIgcHVzaCBub3RpZmljYXRpb25zLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFRydWUgaWYgc3Vic2NyaWJlZCwgZWxzZSBmYWxzZS5cbiAgICAgKi9cbiAgICBQdXNoTWFuYWdlci5pc1dlYlB1c2hTdWJzY3JpYmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIVB1c2hNYW5hZ2VyLmlzV2ViUHVzaFN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQdXNoTWFuYWdlci5nZXRTZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZWdpc3RyYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIGlmICghcmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqIEBuYW1lc3BhY2UgcmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyIFRoZSBwdXNoIG1hbmFnZXIgb2JqZWN0IG9mIHRoZSBicm93c2VyLiAqKi9cbiAgICAgICAgICAgICAgICAgICAgLyoqIEBuYW1lc3BhY2UgcmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLmdldFN1YnNjcmlwdGlvbiAqKi9cbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLmdldFN1YnNjcmlwdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1N1YnNjcmliZWQgPSBzdWJzY3JpcHRpb24gIT09IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUHVzaE1hbmFnZXIudXBkYXRlTmV3U3Vic2NyaXB0aW9uT25TZXJ2ZXIoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaXNTdWJzY3JpYmVkKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgZm9yIFdlYlB1c2guXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgIHNlcnZpY2VXb3JrZXJVcmwgVGhlIHVybCB0aGF0IHNlcnZlcyB0aGUgc2VydmljZSB3b3JrZXJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiB5b3VyIGRvbWFpbi5cbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sgICAgICAgICBUaGUgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdpdGggcmVzdWx0LlxuICAgICAqIEByZXR1cm4ge29iamVjdH0gbm90aGluZ1xuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHNlcnZpY2VXb3JrZXJVcmwsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghUHVzaE1hbmFnZXIuaXNXZWJQdXNoU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMZWFucGx1bTogUHVzaCBtZXNzYWdpbmcgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoc2VydmljZVdvcmtlclVybCA/IHNlcnZpY2VXb3JrZXJVcmwgOiAnL3N3Lm1pbi5qcycsIG51bGwpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgICBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uID0gcmVnaXN0cmF0aW9uO1xuICAgICAgICAgICAgLy8gU2V0IHRoZSBpbml0aWFsIHN1YnNjcmlwdGlvbiB2YWx1ZVxuICAgICAgICAgICAgc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5nZXRTdWJzY3JpcHRpb24oKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICBpc1N1YnNjcmliZWQgPSAhKHN1YnNjcmlwdGlvbiA9PT0gbnVsbCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICBQdXNoTWFuYWdlci51cGRhdGVOZXdTdWJzY3JpcHRpb25PblNlcnZlcihzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGlzU3Vic2NyaWJlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTGVhbnBsdW06IFNlcnZpY2UgV29ya2VyIEVycm9yOiAnLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIHRoZSB1c2VyKGJyb3dzZXIpIHRvIHB1c2guXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzb2x2ZXMgaWYgc3Vic2NyaXB0aW9uIHN1Y2Nlc3NmdWwsIG90aGVyd2lzZSByZWplY3RzLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnN1YnNjcmliZVVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcHBsaWNhdGlvblNlcnZlcktleSA9IFB1c2hNYW5hZ2VyLnVybEI2NFRvVWludDhBcnJheShBUFBMSUNBVElPTl9TRVJWRVJfUFVCTElDX0tFWSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAvKiogQG5hbWVzcGFjZSBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLnN1YnNjcmliZSBTdWJzY3JpYmUgdG8gcHVzaC4gKiovXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIHVzZXJWaXNpYmxlT25seTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvblNlcnZlcktleTogYXBwbGljYXRpb25TZXJ2ZXJLZXlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgUHVzaE1hbmFnZXIudXBkYXRlTmV3U3Vic2NyaXB0aW9uT25TZXJ2ZXIoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoaXNTdWJzY3JpYmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoXCJMZWFucGx1bTogRmFpbGVkIHRvIHN1YnNjcmliZSB0aGUgdXNlcjogXCIgKyBlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVW5zdWJzY3JpYmUgdGhlIHVzZXIoYnJvd3NlcikgZnJvbSBwdXNoLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVzIGlmIHVuc3Vic2NyaWJlZCwgb3RoZXJ3aXNlIHJlamVjdHMuXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIudW5zdWJzY3JpYmVVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgUHVzaE1hbmFnZXIuaXNXZWJQdXNoU3Vic2NyaWJlZCgpLnRoZW4oZnVuY3Rpb24gKHN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5nZXRTdWJzY3JpcHRpb24oKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKiBAbmFtZXNwYWNlIHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIudW5zdWJzY3JpYmUgVW5zdWJzY3JpYmUgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAqICBwdXNoLiAqKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJMZWFucGx1bTogRXJyb3IgdW5zdWJzY3JpYmluZzogXCIgKyBlcnJvcik7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbiBvYmplY3QgZnJvbSBicm93c2VyLlxuICAgICAqIEByZXR1cm4ge29iamVjdH0gUmV0dXJucyB0aGUgcmVnaXN0cmF0aW9uIG9yIG51bGwuXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIuZ2V0U2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICBpZiAoc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbikge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvKiogQG5hbWVzcGFjZSBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5nZXRSZWdpc3RyYXRpb24gUmV0cmlldmVzIHRoZSAgcHVzaCByZWdpc3RyYXRpb25cbiAgICAgICAgICAgICAgICAgKiBmcm9tIHRoZSBicm93c2VyLiAqKi9cbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5nZXRSZWdpc3RyYXRpb24oKS50aGVuKGZ1bmN0aW9uIChyZWdpc3RyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiA9IHJlZ2lzdHJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZWdpc3RyYXRpb24pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVuY29kZXMgYSBiYXNlNjQgdXJsIHN0cmluZyB0byBhbiB1aW50OCBhcnJhcnkuXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBiYXNlNjRTdHJpbmcgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9ICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIudXJsQjY0VG9VaW50OEFycmF5ID0gZnVuY3Rpb24gKGJhc2U2NFN0cmluZykge1xuICAgICAgICB2YXIgcGFkZGluZyA9IG5ldyBBcnJheSgoNCAtIGJhc2U2NFN0cmluZy5sZW5ndGggJSA0KSAlIDQpLmpvaW4oJz0nKTtcbiAgICAgICAgdmFyIGJhc2U2NCA9IChiYXNlNjRTdHJpbmcgKyBwYWRkaW5nKVxuICAgICAgICAgICAgLnJlcGxhY2UoLy0vZywgJysnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL18vZywgJy8nKTtcbiAgICAgICAgdmFyIHJhd0RhdGEgPSB3aW5kb3cuYXRvYihiYXNlNjQpO1xuICAgICAgICB2YXIgb3V0cHV0QXJyYXkgPSBuZXcgVWludDhBcnJheShyYXdEYXRhLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3RGF0YS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgb3V0cHV0QXJyYXlbaV0gPSByYXdEYXRhLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dEFycmF5O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogW3ByZXBhcmVTdWJzY3JpcHRpb24gZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBzdWJzY3JpcHRpb24gVGhlIHJhdyBzdWJzY3JpcHRpb24gZnJvbSBicm93c2VyLlxuICAgICAqIEBwYXJhbSAge2Z1bmN0aW9ufSBzdWJzY3JpcHRpb24uZ2V0S2V5IFRoZSBzdWJzY3JpcHRpb24ga2V5LlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gc3Vic2NyaXB0aW9uLmVuZHBvaW50IFRoZSBzdWJzY3JpcHRpb24ga2V5LlxuICAgICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHN1YnNjcmlwdGlvbiBvYmplY3QgdG8gYmUgc2VudCB0byBzZXJ2ZXIuXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIucHJlcGFyZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuICAgICAgICB2YXIga2V5ID0gc3Vic2NyaXB0aW9uLmdldEtleSA/IHN1YnNjcmlwdGlvbi5nZXRLZXkoJ3AyNTZkaCcpIDogJyc7XG4gICAgICAgIHZhciBhdXRoID0gc3Vic2NyaXB0aW9uLmdldEtleSA/IHN1YnNjcmlwdGlvbi5nZXRLZXkoJ2F1dGgnKSA6ICcnO1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gRVM2TW9kdWxlc0RlcGVuZGVuY2llc1xuICAgICAgICB2YXIga2V5QXNjaWkgPSBidG9hKGFwcGx5LmNhbGwoU3RyaW5nLmZyb21DaGFyQ29kZSwgbnVsbCwgbmV3IFVpbnQ4QXJyYXkoa2V5KSkpO1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gRVM2TW9kdWxlc0RlcGVuZGVuY2llc1xuICAgICAgICB2YXIgYXV0aEFzY2lpID0gYnRvYShhcHBseS5jYWxsKFN0cmluZy5mcm9tQ2hhckNvZGUsIG51bGwsIG5ldyBVaW50OEFycmF5KGF1dGgpKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbmRwb2ludDogc3Vic2NyaXB0aW9uLmVuZHBvaW50LFxuICAgICAgICAgICAga2V5OiBrZXlBc2NpaSxcbiAgICAgICAgICAgIGF1dGg6IGF1dGhBc2NpaVxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VuZCBhIG5ldyBzdWJzY3JpcHRpb24gb2JqZWN0IHRvIHRoZSBMZWFucGx1bSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHN1YnNjcmlwdGlvbiBUaGUgc3Vic2NyaXB0aW9uLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnVwZGF0ZU5ld1N1YnNjcmlwdGlvbk9uU2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB2YXIgcHJlcGFyZWRTdWJzY3JpcHRpb24gPSBQdXNoTWFuYWdlci5wcmVwYXJlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB2YXIgcHJlcGFyZWRTdWJzY3JpcHRpb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShwcmVwYXJlZFN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdTdWJzY3JpcHRpb25TdHJpbmcgPSBMb2NhbFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5nZXRGcm9tTG9jYWxTdG9yYWdlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlBVU0hfU1VCU0NSSVBUSU9OKTtcbiAgICAgICAgICAgIGlmICghaXNFcXVhbF8xLmRlZmF1bHQoZXhpc3RpbmdTdWJzY3JpcHRpb25TdHJpbmcsIHByZXBhcmVkU3Vic2NyaXB0aW9uU3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIExvY2FsU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnNhdmVUb0xvY2FsU3RvcmFnZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5QVVNIX1NVQlNDUklQVElPTiwgcHJlcGFyZWRTdWJzY3JpcHRpb25TdHJpbmcpO1xuICAgICAgICAgICAgICAgIFB1c2hNYW5hZ2VyLnNldFN1YnNjcmlwdGlvbihwcmVwYXJlZFN1YnNjcmlwdGlvblN0cmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNlbmQgdGhlIHN1YnNjcmlwdGlvbiB0byB0aGUgTGVhbnBsdW0gc2VydmVyLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nL09iamVjdH0gc3Vic2NyaXB0aW9uIFRoZSBzdWJzY3JpcHRpb24gc3RyaW5nLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnNldFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKCFzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LnJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlNFVF9ERVZJQ0VfQVRUUklCVVRFUywgbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5XRUJfUFVTSF9TVUJTQ1JJUFRJT04sIHN1YnNjcmlwdGlvbiksIHtcbiAgICAgICAgICAgIHF1ZXVlZDogZmFsc2UsXG4gICAgICAgICAgICBzZW5kTm93OiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFB1c2hNYW5hZ2VyO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFB1c2hNYW5hZ2VyO1xuIiwidmFyIGJhc2VJc0VxdWFsRGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsRGVlcCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tIYXM7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja1NldDtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlRGVsZXRlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpLFxuICAgIHNldENhY2hlQWRkID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVBZGQnKSxcbiAgICBzZXRDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX3NldENhY2hlSGFzJyk7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxubW9kdWxlLmV4cG9ydHMgPSBTZXRDYWNoZTtcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlQWRkO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlSGFzO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVNvbWU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWNoZUhhcztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBtYXBUb0FycmF5ID0gcmVxdWlyZSgnLi9fbWFwVG9BcnJheScpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxCeVRhZztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFRvQXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzO1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRBbGxLZXlzO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UHVzaDtcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlGaWx0ZXI7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuIiwidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhVmlldztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbiAqXG4gKiAgQ29weXJpZ2h0IDIwMTcgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2VcbiAqXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xudmFyIEFyZ3NCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXJnc0J1aWxkZXJcIikpO1xudmFyIFNvY2tldElvQ2xpZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vU29ja2V0SW9DbGllbnRcIikpO1xudmFyIFZhckNhY2hlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVmFyQ2FjaGVcIikpO1xudmFyIExlYW5wbHVtUmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0xlYW5wbHVtUmVxdWVzdFwiKSk7XG52YXIgaXNFcXVhbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvaXNFcXVhbFwiKSk7XG52YXIgTGVhbnBsdW1Tb2NrZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGVhbnBsdW1Tb2NrZXQoKSB7XG4gICAgfVxuICAgIExlYW5wbHVtU29ja2V0LmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghV2ViU29ja2V0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnWW91ciBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IFdlYlNvY2tldHMuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNsaWVudCA9IG5ldyBTb2NrZXRJb0NsaWVudF8xLmRlZmF1bHQoKTtcbiAgICAgICAgdmFyIGF1dGhTZW50ID0gZmFsc2U7XG4gICAgICAgIGNsaWVudC5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWF1dGhTZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBDb25uZWN0ZWQgdG8gZGV2ZWxvcG1lbnQgc2VydmVyLicpO1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0ge307XG4gICAgICAgICAgICAgICAgYXJnc1tDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5BUFBfSURdID0gTGVhbnBsdW1SZXF1ZXN0XzEuZGVmYXVsdC5hcHBJZDtcbiAgICAgICAgICAgICAgICBhcmdzW0NvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkRFVklDRV9JRF0gPSBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LmRldmljZUlkO1xuICAgICAgICAgICAgICAgIGNsaWVudC5zZW5kKCdhdXRoJywgYXJncyk7XG4gICAgICAgICAgICAgICAgYXV0aFNlbnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjbGllbnQub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBTb2NrZXQgZXJyb3InLCBldmVudCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgICAgICogQHBhcmFtIGFyZ3NcbiAgICAgICAgICogQHBhcmFtIGFyZ3NbXS5lbWFpbFxuICAgICAgICAgKi9cbiAgICAgICAgY2xpZW50Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCwgYXJncykge1xuICAgICAgICAgICAgaWYgKGV2ZW50ID09PSAndXBkYXRlVmFycycpIHtcbiAgICAgICAgICAgICAgICBMZWFucGx1bVJlcXVlc3RfMS5kZWZhdWx0LnJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLkdFVF9WQVJTLCBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KClcbiAgICAgICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5JTkNMVURFX0RFRkFVTFRTLCBmYWxzZSksIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldFZhcnNSZXNwb25zZSA9IExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQuZ2V0TGFzdFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBnZXRWYXJzUmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlZBUlNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhcmlhbnRzID0gZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJJQU5UU107XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uTWV0YWRhdGEgPSBnZXRWYXJzUmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLkFDVElPTl9NRVRBREFUQV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRXF1YWxfMS5kZWZhdWx0KHZhbHVlcywgVmFyQ2FjaGVfMS5kZWZhdWx0LmRpZmZzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhckNhY2hlXzEuZGVmYXVsdC5hcHBseURpZmZzKHZhbHVlcywgdmFyaWFudHMsIGFjdGlvbk1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQgPT09ICdnZXRWYXJpYWJsZXMnKSB7XG4gICAgICAgICAgICAgICAgVmFyQ2FjaGVfMS5kZWZhdWx0LnNlbmRWYXJpYWJsZXMoKTtcbiAgICAgICAgICAgICAgICBjbGllbnQuc2VuZCgnZ2V0Q29udGVudFJlc3BvbnNlJywge1xuICAgICAgICAgICAgICAgICAgICAndXBkYXRlZCc6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50ID09PSAnZ2V0QWN0aW9ucycpIHtcbiAgICAgICAgICAgICAgICAvLyBVbnN1cHBvcnRlZCBpbiBKYXZhU2NyaXB0IFNESy5cbiAgICAgICAgICAgICAgICBjbGllbnQuc2VuZCgnZ2V0Q29udGVudFJlc3BvbnNlJywge1xuICAgICAgICAgICAgICAgICAgICAndXBkYXRlZCc6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldmVudCA9PT0gJ3JlZ2lzdGVyRGV2aWNlJykge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hbGVydFxuICAgICAgICAgICAgICAgIGFsZXJ0KFwiWW91ciBkZXZpY2UgaGFzIGJlZW4gcmVnaXN0ZXJlZCB0byBcIiArIGFyZ3NbMF0uZW1haWwgKyBcIi5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNsaWVudC5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBEaXNjb25uZWN0ZWQgdG8gZGV2ZWxvcG1lbnQgc2VydmVyLicpO1xuICAgICAgICAgICAgYXV0aFNlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgY2xpZW50LmNvbm5lY3QoTGVhbnBsdW1Tb2NrZXQuc29ja2V0SG9zdCk7XG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghY2xpZW50LmNvbm5lY3RlZCAmJiAhY2xpZW50LmNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgICBjbGllbnQuY29ubmVjdChMZWFucGx1bVNvY2tldC5zb2NrZXRIb3N0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgNTAwMCk7XG4gICAgfTtcbiAgICBMZWFucGx1bVNvY2tldC5zb2NrZXRIb3N0ID0gJ2Rldi5sZWFucGx1bS5jb20nO1xuICAgIHJldHVybiBMZWFucGx1bVNvY2tldDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBMZWFucGx1bVNvY2tldDtcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbiAqXG4gKiAgQ29weXJpZ2h0IDIwMTcgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2VcbiAqXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBOZXR3b3JrXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTmV0d29ya1wiKSk7XG4vKipcbiAqIFNvY2tldC5pbyAxLjAgY2xpZW50IGNsYXNzLlxuICovXG52YXIgU29ja2V0SW9DbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgU29ja2V0SW9DbGllbnQsIG5vdCBjb25uZWN0ZWQgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTb2NrZXRJb0NsaWVudCgpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdGluZyA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25uZWN0cyB0byB0aGUgZ2l2ZW4gc29ja2V0SG9zdC5cbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IHNvY2tldEhvc3QgVGhlIGhvc3QgdG8gY29ubmVjdCB0by5cbiAgICAgKi9cbiAgICBTb2NrZXRJb0NsaWVudC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChzb2NrZXRIb3N0KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXRoaXNcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBzZWxmLmNvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICBOZXR3b3JrXzEuZGVmYXVsdC5hamF4KCdQT1NUJywgXCJodHRwczovL1wiICsgc29ja2V0SG9zdCArIFwiL3NvY2tldC5pby8xXCIsICcnLCBmdW5jdGlvbiAobGluZSkge1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgdmFyIHNlc3Npb24gPSBwYXJ0c1swXTtcbiAgICAgICAgICAgIHZhciBoZWFydGJlYXQgPSBwYXJzZUludChwYXJ0c1sxXSkgLyAyICogMTAwMDtcbiAgICAgICAgICAgIHNlbGYuc29ja2V0ID0gbmV3IFdlYlNvY2tldChcIndzczovL1wiICsgc29ja2V0SG9zdCArIFwiL3NvY2tldC5pby8xL3dlYnNvY2tldC9cIiArIHNlc3Npb24pO1xuICAgICAgICAgICAgdmFyIGhlYXJ0YmVhdEludGVydmFsID0gbnVsbDtcbiAgICAgICAgICAgIHNlbGYuc29ja2V0Lm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2VsZi5jb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYub25vcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYub25vcGVuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhlYXJ0YmVhdEludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNvY2tldC5zZW5kKCcyOjo6Jyk7XG4gICAgICAgICAgICAgICAgfSwgaGVhcnRiZWF0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzZWxmLnNvY2tldC5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChoZWFydGJlYXRJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYub25jbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm9uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2VsZi5zb2NrZXQub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VQYXJ0cyA9IGV2ZW50LmRhdGEuc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHBhcnNlSW50KG1lc3NhZ2VQYXJ0c1swXSk7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zb2NrZXQuc2VuZCgnMjo6Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VJZCA9IG1lc3NhZ2VQYXJ0c1sxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKG1lc3NhZ2VQYXJ0cy5zbGljZSgzKS5qb2luKCc6JykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZUV2ZW50ID0gZGF0YS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGRhdGEuYXJncztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zb2NrZXQuc2VuZChcIjY6OjpcIiArIG1lc3NhZ2VJZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYub25tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9ubWVzc2FnZShtZXNzYWdlRXZlbnQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTb2NrZXQgZXJyb3I6IFwiICsgZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNlbGYuc29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnNvY2tldC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLm9uZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vbmVycm9yKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LCBudWxsLCBmYWxzZSwgdHJ1ZSAvLyBudWxsLCBxdWV1ZWQsIHBsYWluVGV4dFxuICAgICAgICApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VuZHMgZ2l2ZW4gZXZlbnQgd2l0aCBhcmd1bWVudHMgdG8gdGhlIHNlcnZlci5cbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZXZlbnQuXG4gICAgICogQHBhcmFtICB7Kn0gYXJncyBBcmd1bWVudHMgdG8gc2VuZC5cbiAgICAgKi9cbiAgICBTb2NrZXRJb0NsaWVudC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChuYW1lLCBhcmdzKSB7XG4gICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMZWFucGx1bTogU29ja2V0IGlzIG5vdCBjb25uZWN0ZWQuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFyZ3NKc29uID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3NcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc29ja2V0LnNlbmQoXCI1Ojo6XCIgKyBhcmdzSnNvbik7XG4gICAgfTtcbiAgICByZXR1cm4gU29ja2V0SW9DbGllbnQ7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gU29ja2V0SW9DbGllbnQ7XG4iXSwic291cmNlUm9vdCI6IiJ9