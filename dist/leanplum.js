!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=28)}([function(e,t,n){var r=n(19),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();e.exports=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.4.0",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_METADATA:"actionMetadata",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_METADATA:"__leanplum_action_metadata",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)"}}},function(e,t,n){var r=n(46),o=n(52);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(1)),a=function(){function e(){this.argString="",this.argValues={}}return e.prototype.add=function(e,t){return void 0===t?this:(this.argString&&(this.argString+="&"),this.argString+=e+"="+encodeURIComponent(t),this.argValues[e]=t,this)},e.prototype.body=function(e){return e?(this._body=e,this):this._body},e.prototype.attachApiKeys=function(e,t){return this.add(o.default.PARAMS.APP_ID,e).add(o.default.PARAMS.CLIENT,o.default.CLIENT).add(o.default.PARAMS.CLIENT_KEY,t)},e.prototype.build=function(){return this.argString},e.prototype.buildDict=function(){return this.argValues},e}();t.default=a},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0});var o={},a=function(){function e(){}return e.getFromLocalStorage=function(e){return!1===r?o[e]:localStorage[e]},e.saveToLocalStorage=function(e,t){if(!1!==r)try{localStorage[e]=t}catch(n){r=!1,o[e]=t}else o[e]=t},e.removeFromLocalStorage=function(e){if(!1!==r)try{localStorage.removeItem(e)}catch(t){r=!1,delete o[e]}else delete o[e]},e}();t.default=a},function(e,t,n){var r=n(36),o=n(37),a=n(38),i=n(39),s=n(40);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=s,e.exports=u},function(e,t,n){var r=n(17);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(12),o=n(48),a=n(49),i=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?o(e):a(e)}},function(e,t,n){var r=n(2)(Object,"create");e.exports=r},function(e,t,n){var r=n(61);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var r=n(2)(n(0),"Map");e.exports=r},function(e,t,n){var r=n(0).Symbol;e.exports=r},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(3)),a=r(n(1)),i=r(n(4)),s=r(n(15)),u=void 0,c=null,l=function(){function e(){}return e.request=function(t,n,r){if(void 0===r&&(r={}),r=r||{},n=n||new o.default,e.deviceId||(e.deviceId=i.default.getFromLocalStorage(a.default.DEFAULT_KEYS.DEVICE_ID)),!e.deviceId){for(var l="",f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",d=0;d<16;d++)l+=f.charAt(Math.floor(Math.random()*f.length));e.deviceId=l,i.default.saveToLocalStorage(a.default.DEFAULT_KEYS.DEVICE_ID,l)}e.userId||(e.userId=i.default.getFromLocalStorage(a.default.DEFAULT_KEYS.USER_ID),e.userId||(e.userId=e.deviceId)),i.default.saveToLocalStorage(a.default.DEFAULT_KEYS.USER_ID,e.userId);var p=n.attachApiKeys(e.appId,e.clientKey).add(a.default.PARAMS.SDK_VERSION,a.default.SDK_VERSION).add(a.default.PARAMS.DEVICE_ID,e.deviceId).add(a.default.PARAMS.USER_ID,e.userId).add(a.default.PARAMS.ACTION,t).add(a.default.PARAMS.VERSION_NAME,e.versionName).add(a.default.PARAMS.DEV_MODE,r.devMode).add(a.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),v=r.success||r.response,h=r.error||r.response;if(!e.appId||!e.clientKey){var S="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(S),void(h&&h(S))}if(n.body())s.default.ajax("POST",e.apiPath+"?"+p.build(),n.body(),v,h,r.queued);else{var _=r.devMode||r.sendNow||!e.batchEnabled,g=function(){var t=e.popUnsentRequests();if(t.length>0){var n=JSON.stringify({data:t}),i=(new o.default).attachApiKeys(e.appId,e.clientKey).add(a.default.PARAMS.SDK_VERSION,a.default.SDK_VERSION).add(a.default.PARAMS.ACTION,a.default.METHODS.MULTI).add(a.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();s.default.ajax("POST",e.apiPath+"?"+i,n,v,h,r.queued)}};if(!_&&e.batchCooldown){var b=(new Date).getTime()/1e3;!u||b-u>=e.batchCooldown?(_=!0,u=b):c||(c=setTimeout((function(){c=null,u=(new Date).getTime()/1e3,g()}),1e3*(e.batchCooldown-(b-u))))}e.saveRequestForLater(p.buildDict()),_&&g()}},e.setNetworkTimeout=function(e){s.default.setNetworkTimeout(e)},e.saveRequestForLater=function(e){var t=i.default.getFromLocalStorage(a.default.DEFAULT_KEYS.COUNT)||0,n=a.default.DEFAULT_KEYS.ITEM+t;i.default.saveToLocalStorage(n,JSON.stringify(e)),t++,i.default.saveToLocalStorage(a.default.DEFAULT_KEYS.COUNT,t)},e.popUnsentRequests=function(){var e=[],t=i.default.getFromLocalStorage(a.default.DEFAULT_KEYS.COUNT)||0;i.default.removeFromLocalStorage(a.default.DEFAULT_KEYS.COUNT);for(var n=0;n<t;n++){var r=a.default.DEFAULT_KEYS.ITEM+n;try{var o=JSON.parse(i.default.getFromLocalStorage(r));e.push(o)}catch(e){}i.default.removeFromLocalStorage(r)}return e},e.numResponses=function(e){return e&&e.response?e.response.length:0},e.getResponseAt=function(e,t){return e&&e.response?e.response[t]:null},e.getLastResponse=function(t){var n=e.numResponses(t);return n>0?e.getResponseAt(t,n-1):null},e.isResponseSuccess=function(e){return!!e&&!!e.success},e.getResponseError=function(e){if(!e)return null;var t=e.error;return t?t.message:null},e.apiPath="https://www.leanplum.com/api",e.batchEnabled=!0,e.batchCooldown=5,e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Function.prototype.apply,o=[],a=10,i=function(){function e(){}return e.setNetworkTimeout=function(e){a=e},e.ajax=function(t,n,o,i,s,u,c){if(u){if(e.runningRequest)return e.enqueueRequest(arguments);e.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===n.indexOf("https:")&&(n="http:"+n.substring(6)),r.call(e.ajaxIE8,null,arguments);var l=!1,f=new XMLHttpRequest;f.onreadystatechange=function(){if(4===f.readyState){if(l)return;var t;l=!0;var n=!1;if(c)t=f.responseText;else try{t=JSON.parse(f.responseText)}catch(e){setTimeout((function(){s&&s(null,f)}),0),n=!0}n||(f.status>=200&&f.status<300?setTimeout((function(){i&&i(t,f)}),0):setTimeout((function(){s&&s(t,f)}),0)),u&&(e.runningRequest=!1,e.dequeueRequest())}},f.open(t,n,!0),f.setRequestHeader("Content-Type","text/plain"),f.send(o),setTimeout((function(){l||f.abort()}),1e3*a)},e.ajaxIE8=function(t,n,r,o,i,s,u){var c=new XDomainRequest;c.onload=function(){var t,n=!1;if(u)t=c.responseText;else try{t=JSON.parse(c.responseText)}catch(e){setTimeout((function(){i&&i(null,c)}),0),n=!0}n||setTimeout((function(){o&&o(t,c)}),0),s&&(e.runningRequest=!1,e.dequeueRequest())},c.onerror=c.ontimeout=function(){setTimeout((function(){i&&i(null,c)}),0),s&&(e.runningRequest=!1,e.dequeueRequest())},c.onprogress=function(){},c.open(t,n),c.timeout=1e3*a,c.send(r)},e.enqueueRequest=function(e){o.push(e)},e.dequeueRequest=function(){var t=o.shift();t&&r.call(e.ajax,null,t)},e.runningRequest=!1,e}();t.default=i},function(e,t,n){var r=n(33);e.exports=function(e,t){return r(e,t)}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(7),o=n(20);e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(47))},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(53),o=n(60),a=n(62),i=n(63),s=n(64);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=s,e.exports=u},function(e,t,n){var r=n(65),o=n(68),a=n(69);e.exports=function(e,t,n,i,s,u){var c=1&n,l=e.length,f=t.length;if(l!=f&&!(c&&f>l))return!1;var d=u.get(e);if(d&&u.get(t))return d==t;var p=-1,v=!0,h=2&n?new r:void 0;for(u.set(e,t),u.set(t,e);++p<l;){var S=e[p],_=t[p];if(i)var g=c?i(_,S,p,t,e,u):i(S,_,p,e,t,u);if(void 0!==g){if(g)continue;v=!1;break}if(h){if(!o(t,(function(e,t){if(!a(h,t)&&(S===e||s(S,e,n,i,u)))return h.push(t)}))){v=!1;break}}else if(S!==_&&!s(S,_,n,i,u)){v=!1;break}}return u.delete(e),u.delete(t),v}},function(e,t,n){(function(e){var r=n(0),o=n(86),a=t&&!t.nodeType&&t,i=a&&"object"==typeof e&&e&&!e.nodeType&&e,s=i&&i.exports===a?r.Buffer:void 0,u=(s?s.isBuffer:void 0)||o;e.exports=u}).call(this,n(25)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(88),o=n(89),a=n(90),i=a&&a.isTypedArray,s=i?o(i):r;e.exports=s},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t,n){var r=n(29);e.exports=r.default},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(3)),i=o(n(30)),s=o(n(1)),u=o(n(31)),c=o(n(14)),l=o(n(32)),f=o(n(4)),d=o(n(102)),p=o(n(103)),v=new i.default,h=function(){function e(){}return e.setApiPath=function(e){c.default.apiPath&&(c.default.apiPath=e)},e.setEmail=function(t){e._email=t},e.setNetworkTimeout=function(e){c.default.setNetworkTimeout(e)},e.setVariantDebugInfoEnabled=function(t){e._internalState.variantDebugInfoEnabled=t},e.getVariantDebugInfo=function(){return e._varCache.getVariantDebugInfo()},e.setAppIdForDevelopmentMode=function(t,n){c.default.appId=t,c.default.clientKey=n,e._internalState.devMode=!0},e.setAppIdForProductionMode=function(t,n){c.default.appId=t,c.default.clientKey=n,e._internalState.devMode=!1},e.setSocketHost=function(t){e._lpSocket.setSocketHost(t)},e.setDeviceId=function(e){c.default.deviceId=e},e.setAppVersion=function(e){c.default.versionName=e},e.setDeviceName=function(t){e._deviceName=t},e.setDeviceModel=function(t){e._deviceModel=t},e.setSystemName=function(t){e._systemName=t},e.setSystemVersion=function(t){e._systemVersion=t},e.setVariables=function(t){e._varCache.setVariables(t)},e.setRequestBatching=function(e,t){c.default.batchEnabled=e,c.default.batchCooldown=t},e.getVariables=function(){return e._varCache.getVariables()},e.getVariable=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var r=e.getVariables(),o=0;o<t.length;o++)r=r[t[o]];return r},e.getVariants=function(){return e._varCache.variants||[]},e.addStartResponseHandler=function(t){e._internalState.addStartResponseHandler(t)},e.removeStartResponseHandler=function(t){e._internalState.removeStartResponseHandler(t)},e.__destroy=function(){c.default.apiPath="https://www.leanplum.com/api",c.default.batchEnabled=!0,c.default.batchCooldown=5,c.default.deviceId=void 0,c.default.userId=void 0,c.default.appId=void 0,c.default.clientKey=void 0,c.default.versionName=void 0,e._internalState=new u.default,e._lpSocket=new l.default,e._pushManager=new d.default(e.createRequest),e._varCache=new p.default(e.createRequest)},e.addVariablesChangedHandler=function(t){e._varCache.addVariablesChangedHandler(t)},e.removeVariablesChangedHandler=function(t){e._varCache.removeVariablesChangedHandler(t)},e.forceContentUpdate=function(t){var n=(new a.default).add(s.default.PARAMS.INCLUDE_DEFAULTS,!1).add(s.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,e._internalState.variantDebugInfoEnabled);e.createRequest(s.default.METHODS.GET_VARS,n,{queued:!1,sendNow:!0,response:function(n){var r=c.default.getLastResponse(n),o=c.default.isResponseSuccess(r);o&&(e._varCache.applyDiffs(r[s.default.KEYS.VARS],r[s.default.KEYS.VARIANTS],r[s.default.KEYS.ACTION_METADATA]),e._varCache.setVariantDebugInfo(r[s.default.KEYS.VARIANT_DEBUG_INFO])),t&&t(o)}})},e.start=function(t,n,r){"function"==typeof t?(r=t,n={},t=null):"object"==typeof t&&null!=t?(r=n,n=t,t=null):"function"==typeof n&&(r=n,n={}),c.default.userId=t,r&&e.addStartResponseHandler(r),e._varCache.onUpdate=function(){e._varCache.triggerVariablesChangedHandlers()};var o=(new a.default).add(s.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(n)).add(s.default.PARAMS.COUNTRY,s.default.VALUES.DETECT).add(s.default.PARAMS.REGION,s.default.VALUES.DETECT).add(s.default.PARAMS.CITY,s.default.VALUES.DETECT).add(s.default.PARAMS.LOCATION,s.default.VALUES.DETECT).add(s.default.PARAMS.SYSTEM_NAME,e._systemName||v.OS).add(s.default.PARAMS.SYSTEM_VERSION,(e._systemVersion||"").toString()).add(s.default.PARAMS.BROWSER_NAME,v.browser).add(s.default.PARAMS.BROWSER_VERSION,v.version.toString()).add(s.default.PARAMS.LOCALE,s.default.VALUES.DETECT).add(s.default.PARAMS.DEVICE_NAME,e._deviceName||v.browser+" "+v.version).add(s.default.PARAMS.DEVICE_MODEL,e._deviceModel||"Web Browser").add(s.default.PARAMS.INCLUDE_DEFAULTS,!1).add(s.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,e._internalState.variantDebugInfoEnabled);e.createRequest(s.default.METHODS.START,o,{queued:!0,sendNow:!0,response:function(t){e._internalState.hasStarted=!0;var n=c.default.getLastResponse(t);if(c.default.isResponseSuccess(n)){if(e._internalState.startSuccessful=!0,e._internalState.devMode){var r=n[s.default.KEYS.LATEST_VERSION];r&&console.log("A newer version of Leanplum, "+r+', is available.\nUse "npm update leanplum-sdk" or go to https://docs.leanplum.com/reference#javascript-setup to download it.'),e._lpSocket.connect(e._varCache,e.createRequest)}e._varCache.applyDiffs(n[s.default.KEYS.VARS],n[s.default.KEYS.VARIANTS],n[s.default.KEYS.ACTION_METADATA]),e._varCache.setVariantDebugInfo(n[s.default.KEYS.VARIANT_DEBUG_INFO]),e._varCache.token=n[s.default.KEYS.TOKEN]}else e._internalState.startSuccessful=!1,e._varCache.loadDiffs();e._internalState.triggerStartHandlers()}})},e.startFromCache=function(t,n,r){"function"==typeof t?(r=t,n={},t=null):"object"==typeof t&&null!=t?(r=n,n=t,t=null):"function"==typeof n&&(r=n,n={}),c.default.userId=t,r&&e.addStartResponseHandler(r),e._internalState.hasStarted=!0,e._internalState.startSuccessful=!0,e._internalState.devMode&&e._lpSocket.connect(e._varCache,e.createRequest),e._varCache.loadDiffs(),e._internalState.triggerStartHandlers()},e.stop=function(){e.createRequest(s.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0})},e.pauseSession=function(){e.createRequest(s.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},e.resumeSession=function(){e.createRequest(s.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},e.pauseState=function(){e.createRequest(s.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},e.resumeState=function(){e.createRequest(s.default.METHODS.RESUME_STATE,void 0,{queued:!0})},e.setUserId=function(t){e.setUserAttributes(t)},e.setUserAttributes=function(t,n){if(void 0===n)if("object"==typeof t)n=t,t=void 0;else if("string"!=typeof t)return void console.log("Leanplum: setUserAttributes expects a string or an object");var r=(new a.default).add(s.default.PARAMS.USER_ATTRIBUTES,n?JSON.stringify(n):void 0).add(s.default.PARAMS.NEW_USER_ID,t);e.createRequest(s.default.METHODS.SET_USER_ATTRIBUTES,r,{queued:!0}),t&&(c.default.userId=t,f.default.saveToLocalStorage(s.default.DEFAULT_KEYS.USER_ID,c.default.userId))},e.track=function(t,n,r,o){"object"==typeof n&&null!=n?(o=n,r=void 0,n=void 0):"string"==typeof n?(o=r,r=n,n=void 0):"object"==typeof r&&null!=r&&(o=r,r=void 0);var i=(new a.default).add(s.default.PARAMS.EVENT,t).add(s.default.PARAMS.VALUE,n||0).add(s.default.PARAMS.INFO,r).add(s.default.PARAMS.PARAMS,JSON.stringify(o));e.createRequest(s.default.METHODS.TRACK,i,{queued:!0})},e.advanceTo=function(t,n,r){"object"==typeof n&&null!=n&&(r=n,n=void 0);var o=(new a.default).add(s.default.PARAMS.STATE,t).add(s.default.PARAMS.INFO,n).add(s.default.PARAMS.PARAMS,JSON.stringify(r));e.createRequest(s.default.METHODS.ADVANCE,o,{queued:!0})},e.isWebPushSupported=function(){return e._pushManager.isWebPushSupported()},e.isWebPushSubscribed=function(){return e._pushManager.isWebPushSubscribed()},e.registerForWebPush=function(t){return e._pushManager.isWebPushSupported()?e._pushManager.register(t,(function(t){return t?Promise.resolve(!0):e._pushManager.subscribeUser()})):Promise.reject("Leanplum: WebPush is not supported.")},e.unregisterFromWebPush=function(){return e._pushManager.unsubscribeUser()},e.clearUserContent=function(){e._varCache.clearUserContent()},e.createRequest=function(t,n,o){void 0===o&&(o={}),c.default.request(t,n,r({devMode:e._internalState.devMode},o))},e._internalState=new u.default,e._lpSocket=new l.default,e._pushManager=new d.default(e.createRequest),e._varCache=new p.default(e.createRequest),e}();t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=[{string:navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:navigator.userAgent,subString:"OmniWeb",versionSearch:"OmniWeb/",identity:"OmniWeb"},{string:navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:window.opera,identity:"Opera",versionSearch:"Version"},{string:navigator.vendor,subString:"iCab",identity:"iCab"},{string:navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:navigator.vendor,subString:"Camino",identity:"Camino"},{string:navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}],o=[{string:navigator.platform,subString:"Win",identity:"Windows"},{string:navigator.platform,subString:"Mac",identity:"Mac OS"},{string:navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:navigator.userAgent,subString:"Android",identity:"Android"},{string:navigator.platform,subString:"Linux",identity:"Linux"}],a=function(){function e(){this.browser=this._searchString(r)||"Unknown Browser",this.version=this._searchVersion(navigator.userAgent)||this._searchVersion(navigator.appVersion)||"Unknown Version",this.OS=this._searchString(o)||"Unknown OS"}return e.prototype._searchString=function(e){for(var t=0;t<e.length;t++){var n=e[t].string,r=e[t].prop;if(this.versionSearchString=e[t].versionSearch||e[t].identity,n){if(-1!==n.indexOf(e[t].subString))return e[t].identity}else if(r)return e[t].identity}},e.prototype._searchVersion=function(e){if(!e)return-1;var t=e.indexOf(this.versionSearchString);return-1===t?-1:parseFloat(e.substring(t+this.versionSearchString.length+1))},e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.startHandlers=[],this.devMode=!1,this.hasStarted=!1,this.startSuccessful=!1,this.variantDebugInfoEnabled=!1}return e.prototype.addStartResponseHandler=function(e){this.startHandlers.push(e),this.hasStarted&&e(this.startSuccessful)},e.prototype.removeStartResponseHandler=function(e){var t=this.startHandlers.indexOf(e);t>=0&&this.startHandlers.splice(t,1)},e.prototype.triggerStartHandlers=function(){for(var e=0;e<this.startHandlers.length;e++)this.startHandlers[e](this.startSuccessful)},e}();t.default=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(16)),a=r(n(3)),i=r(n(1)),s=r(n(14)),u=r(n(101)),c=function(){function e(){this.socketHost="dev.leanplum.com"}return e.prototype.connect=function(e,t){var n=this;if(WebSocket){var r=new u.default,c=!1;r.onopen=function(){var e;c||(console.log("Leanplum: Connected to development server."),r.send("auth",((e={})[i.default.PARAMS.APP_ID]=s.default.appId,e[i.default.PARAMS.DEVICE_ID]=s.default.deviceId,e)),c=!0)},r.onerror=function(e){console.log("Leanplum: Socket error",e)},r.onmessage=function(n,u){if("updateVars"===n){var c=(new a.default).add(i.default.PARAMS.INCLUDE_DEFAULTS,!1);t(i.default.METHODS.GET_VARS,c,{queued:!1,sendNow:!0,response:function(t){var n=s.default.getLastResponse(t),r=n[i.default.KEYS.VARS],a=n[i.default.KEYS.VARIANTS],u=n[i.default.KEYS.ACTION_METADATA];o.default(r,e.diffs)||e.applyDiffs(r,a,u)}})}else"getVariables"===n?(e.sendVariables(),r.send("getContentResponse",{updated:!0})):"getActions"===n?r.send("getContentResponse",{updated:!1}):"registerDevice"===n&&alert("Your device has been registered to "+u[0].email+".")},r.onclose=function(){console.log("Leanplum: Disconnected to development server."),c=!1},r.connect(this.socketHost),setInterval((function(){r.connected||r.connecting||r.connect(n.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},e.prototype.setSocketHost=function(e){this.socketHost=e},e}();t.default=c},function(e,t,n){var r=n(34),o=n(10);e.exports=function e(t,n,a,i,s){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,a,i,e,s))}},function(e,t,n){var r=n(35),o=n(23),a=n(70),i=n(74),s=n(96),u=n(13),c=n(24),l=n(26),f="[object Object]",d=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,p,v,h){var S=u(e),_=u(t),g=S?"[object Array]":s(e),b=_?"[object Array]":s(t),A=(g="[object Arguments]"==g?f:g)==f,y=(b="[object Arguments]"==b?f:b)==f,E=g==b;if(E&&c(e)){if(!c(t))return!1;S=!0,A=!1}if(E&&!A)return h||(h=new r),S||l(e)?o(e,t,n,p,v,h):a(e,t,g,n,p,v,h);if(!(1&n)){var T=A&&d.call(e,"__wrapped__"),R=y&&d.call(t,"__wrapped__");if(T||R){var I=T?e.value():e,O=R?t.value():t;return h||(h=new r),v(I,O,n,p,h)}}return!!E&&(h||(h=new r),i(e,t,n,p,v,h))}},function(e,t,n){var r=n(5),o=n(41),a=n(42),i=n(43),s=n(44),u=n(45);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=o,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=s,c.prototype.set=u,e.exports=c},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(6),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(6);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(6);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(6);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(5);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(5),o=n(11),a=n(22);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var i=n.__data__;if(!o||i.length<199)return i.push([e,t]),this.size=++n.size,this;n=this.__data__=new a(i)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(18),o=n(50),a=n(20),i=n(21),s=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,l=u.toString,f=c.hasOwnProperty,d=RegExp("^"+l.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||o(e))&&(r(e)?d:s).test(i(e))}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(12),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var t=a.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var o=i.call(e);return r&&(t?e[s]=n:delete e[s]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r,o=n(51),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!a&&a in e}},function(e,t,n){var r=n(0)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(54),o=n(5),a=n(11);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(e,t,n){var r=n(55),o=n(56),a=n(57),i=n(58),s=n(59);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=s,e.exports=u},function(e,t,n){var r=n(8);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(8),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(8),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(8);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t,n){var r=n(9);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(9);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(9);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(9);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(22),o=n(66),a=n(67);function i(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}i.prototype.add=i.prototype.push=o,i.prototype.has=a,e.exports=i},function(e,t){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t,n){var r=n(12),o=n(71),a=n(17),i=n(23),s=n(72),u=n(73),c=r?r.prototype:void 0,l=c?c.valueOf:void 0;e.exports=function(e,t,n,r,c,f,d){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!f(new o(e),new o(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=s;case"[object Set]":var v=1&r;if(p||(p=u),e.size!=t.size&&!v)return!1;var h=d.get(e);if(h)return h==t;r|=2,d.set(e,t);var S=i(p(e),p(t),r,c,f,d);return d.delete(e),S;case"[object Symbol]":if(l)return l.call(e)==l.call(t)}return!1}},function(e,t,n){var r=n(0).Uint8Array;e.exports=r},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t,n){var r=n(75),o=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,a,i,s){var u=1&n,c=r(e),l=c.length;if(l!=r(t).length&&!u)return!1;for(var f=l;f--;){var d=c[f];if(!(u?d in t:o.call(t,d)))return!1}var p=s.get(e);if(p&&s.get(t))return p==t;var v=!0;s.set(e,t),s.set(t,e);for(var h=u;++f<l;){var S=e[d=c[f]],_=t[d];if(a)var g=u?a(_,S,d,t,e,s):a(S,_,d,e,t,s);if(!(void 0===g?S===_||i(S,_,n,a,s):g)){v=!1;break}h||(h="constructor"==d)}if(v&&!h){var b=e.constructor,A=t.constructor;b!=A&&"constructor"in e&&"constructor"in t&&!("function"==typeof b&&b instanceof b&&"function"==typeof A&&A instanceof A)&&(v=!1)}return s.delete(e),s.delete(t),v}},function(e,t,n){var r=n(76),o=n(78),a=n(81);e.exports=function(e){return r(e,a,o)}},function(e,t,n){var r=n(77),o=n(13);e.exports=function(e,t,n){var a=t(e);return o(e)?a:r(a,n(e))}},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t,n){var r=n(79),o=n(80),a=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(e){return null==e?[]:(e=Object(e),r(i(e),(function(t){return a.call(e,t)})))}:o;e.exports=s},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,a=[];++n<r;){var i=e[n];t(i,n,e)&&(a[o++]=i)}return a}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(82),o=n(91),a=n(95);e.exports=function(e){return a(e)?r(e):o(e)}},function(e,t,n){var r=n(83),o=n(84),a=n(13),i=n(24),s=n(87),u=n(26),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=a(e),l=!n&&o(e),f=!n&&!l&&i(e),d=!n&&!l&&!f&&u(e),p=n||l||f||d,v=p?r(e.length,String):[],h=v.length;for(var S in e)!t&&!c.call(e,S)||p&&("length"==S||f&&("offset"==S||"parent"==S)||d&&("buffer"==S||"byteLength"==S||"byteOffset"==S)||s(S,h))||v.push(S);return v}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(85),o=n(10),a=Object.prototype,i=a.hasOwnProperty,s=a.propertyIsEnumerable,u=r(function(){return arguments}())?r:function(e){return o(e)&&i.call(e,"callee")&&!s.call(e,"callee")};e.exports=u},function(e,t,n){var r=n(7),o=n(10);e.exports=function(e){return o(e)&&"[object Arguments]"==r(e)}},function(e,t){e.exports=function(){return!1}},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(7),o=n(27),a=n(10),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&o(e.length)&&!!i[r(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(19),o=t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=a&&a.exports===o&&r.process,s=function(){try{var e=a&&a.require&&a.require("util").types;return e||i&&i.binding&&i.binding("util")}catch(e){}}();e.exports=s}).call(this,n(25)(e))},function(e,t,n){var r=n(92),o=n(93),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))a.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(94)(Object.keys,Object);e.exports=r},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(18),o=n(27);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(97),o=n(11),a=n(98),i=n(99),s=n(100),u=n(7),c=n(21),l=c(r),f=c(o),d=c(a),p=c(i),v=c(s),h=u;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=h(new o)||a&&"[object Promise]"!=h(a.resolve())||i&&"[object Set]"!=h(new i)||s&&"[object WeakMap]"!=h(new s))&&(h=function(e){var t=u(e),n="[object Object]"==t?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case l:return"[object DataView]";case f:return"[object Map]";case d:return"[object Promise]";case p:return"[object Set]";case v:return"[object WeakMap]"}return t}),e.exports=h},function(e,t,n){var r=n(2)(n(0),"DataView");e.exports=r},function(e,t,n){var r=n(2)(n(0),"Promise");e.exports=r},function(e,t,n){var r=n(2)(n(0),"Set");e.exports=r},function(e,t,n){var r=n(2)(n(0),"WeakMap");e.exports=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(15)),a=function(){function e(){this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return e.prototype.connect=function(e){var t=this;t.connecting=!0,o.default.ajax("POST","https://"+e+"/socket.io/1","",(function(n){var r=n.split(":"),o=r[0],a=parseInt(r[1])/2*1e3;t.socket=new WebSocket("wss://"+e+"/socket.io/1/websocket/"+o);var i=null;t.socket.onopen=function(){t.connected=!0,t.connecting=!1,t.onopen&&t.onopen(),i=setInterval((function(){t.socket.send("2:::")}),a)},t.socket.onclose=function(){t.connected=!1,clearInterval(i),t.onclose&&t.onclose()},t.socket.onmessage=function(e){var n=e.data.split(":"),r=parseInt(n[0]);if(2===r)t.socket.send("2::");else if(5===r){var o=n[1],a=JSON.parse(n.slice(3).join(":")),i=a.name,s=a.args;o&&t.socket.send("6:::"+o),t.onmessage&&t.onmessage(i,s)}else 7===r&&console.log("Socket error: "+e.data)},t.socket.onerror=function(e){t.socket.close(),t.onerror&&t.onerror(e)}}),null,!1,!0)},e.prototype.send=function(e,t){if(this.connected){var n=JSON.stringify({name:e,args:t});this.socket.send("5:::"+n)}else console.log("Leanplum: Socket is not connected.")},e}();t.default=a},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function s(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}u((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=a(n(16)),s=a(n(3)),u=a(n(1)),c=a(n(4)),l=function(){function e(e){this.createRequest=e,this.serviceWorkerRegistration=null}return e.prototype.isWebPushSupported=function(){var e;return Boolean(void 0!==(null===(e=window)||void 0===e?void 0:e.navigator)&&"serviceWorker"in window.navigator&&"PushManager"in window)},e.prototype.isWebPushSubscribed=function(){return r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:return this.isWebPushSupported()?[4,this.getServiceWorkerRegistration()]:[3,3];case 1:return(e=r.sent())?[4,e.pushManager.getSubscription()]:[3,3];case 2:return t=r.sent(),(n=null!==t)&&this.updateNewSubscriptionOnServer(t),[2,n];case 3:return[2,!1]}}))}))},e.prototype.register=function(e,t){return r(this,void 0,void 0,(function(){var n,r,a,i;return o(this,(function(o){switch(o.label){case 0:if(!this.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),[2,t(!1)];o.label=1;case 1:return o.trys.push([1,3,,4]),n=this,[4,navigator.serviceWorker.register(e||"/sw.min.js",null)];case 2:return n.serviceWorkerRegistration=o.sent(),r=this.serviceWorkerRegistration.pushManager.getSubscription(),(a=null!==r)&&this.updateNewSubscriptionOnServer(r),[2,t(a)];case 3:return i=o.sent(),console.log("Leanplum: Service Worker Error: ",i),[2,t(!1)];case 4:return[2]}}))}))},e.prototype.subscribeUser=function(){return r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:e=this.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68"),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this.serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})];case 2:if(!(t=r.sent()))throw new Error;return this.updateNewSubscriptionOnServer(t),[3,4];case 3:throw n=r.sent(),new Error("Leanplum: Failed to subscribe the user: "+n);case 4:return[2,!0]}}))}))},e.prototype.unsubscribeUser=function(){return r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:return[4,this.isWebPushSubscribed()];case 1:if(!(e=r.sent()))return[3,7];r.label=2;case 2:return r.trys.push([2,5,,6]),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:if(!(t=r.sent()))throw new Error;return[4,t.unsubscribe()];case 4:return e=r.sent(),[3,6];case 5:throw n=r.sent(),new Error("Leanplum: Error unsubscribing: "+n);case 6:if(e)throw new Error;r.label=7;case 7:return[2]}}))}))},e.prototype.getServiceWorkerRegistration=function(){return r(this,void 0,void 0,(function(){var e;return o(this,(function(t){switch(t.label){case 0:return this.serviceWorkerRegistration?[3,2]:(e=this,[4,navigator.serviceWorker.getRegistration()]);case 1:e.serviceWorkerRegistration=t.sent(),t.label=2;case 2:return[2,this.serviceWorkerRegistration]}}))}))},e.prototype.urlB64ToUint8Array=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),n=window.atob(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r[o]=n.charCodeAt(o);return r},e.prototype.prepareSubscription=function(e){var t=Function.prototype.apply,n=e.getKey?e.getKey("p256dh"):"",r=e.getKey?e.getKey("auth"):"",o=btoa(t.call(String.fromCharCode,null,new Uint8Array(n))),a=btoa(t.call(String.fromCharCode,null,new Uint8Array(r)));return{endpoint:e.endpoint,key:o,auth:a}},e.prototype.updateNewSubscriptionOnServer=function(e){if(e){var t=this.prepareSubscription(e),n=JSON.stringify(t),r=c.default.getFromLocalStorage(u.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION);i.default(r,n)||(c.default.saveToLocalStorage(u.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,n),this.setSubscription(n))}},e.prototype.setSubscription=function(e){if(e){var t=(new s.default).add(u.default.PARAMS.WEB_PUSH_SUBSCRIPTION,e);this.createRequest(u.default.METHODS.SET_DEVICE_ATTRIBUTES,t,{queued:!1,sendNow:!0})}},e}();t.default=l},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(3)),a=r(n(1)),i=r(n(4)),s=function(){function e(e){this.createRequest=e,this.actionMetadata={},this.hasReceivedDiffs=!1,this.merged=void 0,this.variables=null,this.variablesChangedHandlers=[],this.variantDebugInfo={},this.diffs=void 0,this.token="",this.variants=[]}return e.prototype.applyDiffs=function(e,t,n){this.diffs=e,this.variants=t,this.actionMetadata=n,this.hasReceivedDiffs=!0,this.merged=function e(t,n){if("number"==typeof n||"boolean"==typeof n||"string"==typeof n)return n;if(null==n)return t;var r=function(e){return function(t){if(e instanceof Array)for(var n=0;n<e.length;n++)t(e[n]);else for(var r in e)({}).hasOwnProperty.call(e,r)&&t(r)}},o=r(t),a=r(n),i=!1;if(null===t&&!(n instanceof Array))for(var s in i=null,n)if(n.hasOwnProperty(s)){if(null===i&&(i=!0),"string"!=typeof s){i=!1;break}if(s.length<3||"["!==s.charAt(0)||"]"!==s.charAt(s.length-1)){i=!1;break}}if(t instanceof Array||i){var u=[];return o((function(e){u.push(e)})),a((function(t){for(var r=parseInt(t.substring(1,t.length-1)),o=n[t];r>=u.length;)u.push(null);u[r]=e(u[r],o)})),u}var c={};return o((function(e){null!==n[e]&&void 0!==n[e]||(c[e]=t[e])})),a((function(r){c[r]=e(null===t?null:t[r]||{},n[r])})),c}(this.variables,e),this.saveDiffs(),this.onUpdate&&this.onUpdate()},e.prototype.loadDiffs=function(){try{this.applyDiffs(JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.ACTION_METADATA)||null)),this.token=this.loadLocal(a.default.DEFAULT_KEYS.TOKEN),this.variantDebugInfo=this.loadLocal(a.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(e){console.log("Leanplum: Invalid diffs: "+e)}},e.prototype.saveDiffs=function(){this.saveLocal(a.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(this.diffs||{})),this.saveLocal(a.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(this.variants||[])),this.saveLocal(a.default.DEFAULT_KEYS.ACTION_METADATA,JSON.stringify(this.actionMetadata||{})),this.saveLocal(a.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(this.variantDebugInfo||{})),this.saveLocal(a.default.DEFAULT_KEYS.TOKEN,this.token)},e.prototype.getVariables=function(){return void 0!==this.merged?this.merged:this.variables},e.prototype.setVariables=function(e){this.variables=e},e.prototype.addVariablesChangedHandler=function(e){this.variablesChangedHandlers.push(e),this.hasReceivedDiffs&&e()},e.prototype.removeVariablesChangedHandler=function(e){var t=this.variablesChangedHandlers.indexOf(e);t>=0&&this.variablesChangedHandlers.splice(t,1)},e.prototype.triggerVariablesChangedHandlers=function(){for(var e=0;e<this.variablesChangedHandlers.length;e++)this.variablesChangedHandlers[e]()},e.prototype.getVariantDebugInfo=function(){return this.variantDebugInfo},e.prototype.setVariantDebugInfo=function(e){this.variantDebugInfo=e},e.prototype.sendVariables=function(){var e,t=((e={})[a.default.PARAMS.VARIABLES]=this.variables,e),n=(new o.default).body(JSON.stringify(t));this.createRequest(a.default.METHODS.SET_VARS,n,{sendNow:!0})},e.prototype.clearUserContent=function(){this.diffs=void 0,this.variables=null,this.variants=[],this.variantDebugInfo={},this.merged=void 0},e.prototype.loadLocal=function(e){return i.default.getFromLocalStorage(e)},e.prototype.saveLocal=function(e,t){i.default.saveToLocalStorage(e,t)},e}();t.default=s}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,