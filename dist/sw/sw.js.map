{"version":3,"sources":["../../src/PushServiceWorker.js"],"names":["ACTION_NAME_KEY","OPEN_URL_ACTION","ARG_URL","openActions","pushListener","event","jsonString","data","text","console","log","options","JSON","parse","title","tag","openAction","hasOwnProperty","Reflect","deleteProperty","waitUntil","self","registration","showNotification","notificationClickListener","notification","close","notificationId","openActionUrl","clients","openWindow","addEventListener"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;AAEA,MAAMA,kBAAkB,UAAxB;AACA,MAAMC,kBAAkB,UAAxB;AACA,MAAMC,UAAU,KAAhB;;AAEA,MAAIC,cAAc,EAAlB;;AAEA;;;;AAIA,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAIC,aAAaD,MAAME,IAAN,IAAcF,MAAME,IAAN,CAAWC,IAAX,EAAd,GAAkCH,MAAME,IAAN,CAAWC,IAAX,EAAlC,GAAsD,IAAvE;;AAEA,QAAI,CAACF,UAAL,EAAiB;AACfG,cAAQC,GAAR,CAAY,4DAAZ;AACA;AACD;;AAED;AACA,QAAIC,UAAUC,KAAKC,KAAL,CAAWP,UAAX,CAAd;;AAEA;AACA;AACA,QAAI,CAACK,OAAD,IAAY,CAACA,QAAQG,KAArB,IAA8B,CAACH,QAAQI,GAA3C,EAAgD;AAC9CN,cAAQC,GAAR,CAAY,8DACR,UADJ;AAEA;AACD;;AAED;AACA;AACA,QAAIC,QAAQJ,IAAR,IAAgBI,QAAQJ,IAAR,CAAaS,UAA7B,IACAL,QAAQJ,IAAR,CAAaS,UAAb,CAAwBC,cAAxB,CAAuCjB,eAAvC,CADA,IAEAW,QAAQJ,IAAR,CAAaS,UAAb,CAAwBhB,eAAxB,MAA6CC,eAF7C,IAGAU,QAAQJ,IAAR,CAAaS,UAAb,CAAwBC,cAAxB,CAAuCf,OAAvC,CAHJ,EAGqD;AACnDC,kBAAYQ,QAAQI,GAApB,IAA2BJ,QAAQJ,IAAR,CAAaS,UAAb,CAAwBd,OAAxB,CAA3B;AACD;;AAED;AACA,QAAIY,QAAQH,QAAQG,KAApB;AACAI,YAAQC,cAAR,CAAuBR,OAAvB,EAAgC,OAAhC;AACA;AACA;AACAN,UAAMe,SAAN,CAAgBC,KAAKC,YAAL,CAAkBC,gBAAlB,CAAmCT,KAAnC,EAA0CH,OAA1C,CAAhB;AACD;;AAED;;;;;;;AAOA,WAASa,yBAAT,CAAmCnB,KAAnC,EAA0C;AACxCI,YAAQC,GAAR,CAAY,yDAAZ;;AAEAL,UAAMoB,YAAN,CAAmBC,KAAnB;;AAEA,QAAI,CAACrB,MAAMoB,YAAP,IAAuB,CAACpB,MAAMoB,YAAN,CAAmBV,GAA/C,EAAoD;AAClDN,cAAQC,GAAR,CAAY,qEAAZ;AACA;AACD;;AAED,QAAIiB,iBAAiBtB,MAAMoB,YAAN,CAAmBV,GAAxC;AACA,QAAIa,gBAAgBzB,YAAYwB,cAAZ,CAApB;AACA,QAAI,CAACC,aAAL,EAAoB;AAClBnB,cAAQC,GAAR,CAAY,8DAAZ;AACA;AACD;;AAEDQ,YAAQC,cAAR,CAAuBhB,WAAvB,EAAoC,gBAApC;;AAEA;AACAE,UAAMe,SAAN,CAAgBS,QAAQC,UAAR,CAAmBF,aAAnB,CAAhB;AACD;;AAEDP,OAAKU,gBAAL,CAAsB,MAAtB,EAA8B3B,YAA9B;AACAiB,OAAKU,gBAAL,CAAsB,mBAAtB,EAA2CP,yBAA3C","file":"sw.js","sourcesContent":["/*\n *\n *  Copyright 2017 Leanplum Inc. All rights reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License\n *\n *\n *  Original File:\n *\n *  Push Notifications CodeLab\n *  Copyright 2015 Google Inc. All rights reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License\n *\n */\n\n/* global self, clients */\n\nconst ACTION_NAME_KEY = '__name__'\nconst OPEN_URL_ACTION = 'Open URL'\nconst ARG_URL = 'URL'\n\nlet openActions = {}\n\n/**\n * Triggered on push message received.\n * @param {object} event The push payload that the browser received.\n */\nfunction pushListener(event) {\n  let jsonString = event.data && event.data.text() ? event.data.text() : null\n\n  if (!jsonString) {\n    console.log('Leanplum: Push received without payload, skipping display.')\n    return\n  }\n\n  // noinspection JSCheckFunctionSignatures\n  let options = JSON.parse(jsonString)\n\n  /** @namespace options.title The title of the push notification. **/\n  /** @namespace options.tag The id of the push notification **/\n  if (!options || !options.title || !options.tag) {\n    console.log('Leanplum: No options, title or tag/id received, skipping ' +\n        'display.')\n    return\n  }\n\n  // Extract open action url. We only support open url action for now.\n  /** @namespace options.data.openAction The openAction of the push notification. **/\n  if (options.data && options.data.openAction &&\n      options.data.openAction.hasOwnProperty(ACTION_NAME_KEY) &&\n      options.data.openAction[ACTION_NAME_KEY] === OPEN_URL_ACTION &&\n      options.data.openAction.hasOwnProperty(ARG_URL)) {\n    openActions[options.tag] = options.data.openAction[ARG_URL]\n  }\n\n  // Extract title and delete from options.\n  let title = options.title\n  Reflect.deleteProperty(options, 'title')\n  /** @namespace self.registration **/\n  /** @namespace self.registration.showNotification **/\n  event.waitUntil(self.registration.showNotification(title, options))\n}\n\n/**\n * Callback that handles clicks on the notification.\n * @param {object} event The notification event object.\n * @param {object} event.notification The notification object.\n * @param {function} event.waitUntil The browser will keep the service worker running until the\n * promise you passed in has settled.\n */\nfunction notificationClickListener(event) {\n  console.log('Leanplum: [Service Worker] Notification click received.')\n\n  event.notification.close()\n\n  if (!event.notification || !event.notification.tag) {\n    console.log('Leanplum: No notification or tag/id received, skipping open action.')\n    return\n  }\n\n  let notificationId = event.notification.tag\n  let openActionUrl = openActions[notificationId]\n  if (!openActionUrl) {\n    console.log('Leanplum: [Service Worker] No action defined, doing nothing.')\n    return\n  }\n\n  Reflect.deleteProperty(openActions, 'notificationId')\n\n  /** @namespace clients.openWindow **/\n  event.waitUntil(clients.openWindow(openActionUrl))\n}\n\nself.addEventListener('push', pushListener)\nself.addEventListener('notificationclick', notificationClickListener)\n"]}