!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(window,(function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=104)}({104:function(e,t){var n={};self.addEventListener("push",(function(e){var t=e.data&&e.data.text()?e.data.text():null;if(t){var o=JSON.parse(t);if(o&&o.title&&o.tag){o.data&&o.data.openAction&&o.data.openAction.hasOwnProperty("__name__")&&"Open URL"===o.data.openAction.__name__&&o.data.openAction.hasOwnProperty("URL")&&(n[o.tag]=o.data.openAction.URL);var i=o.title;delete o.title,e.waitUntil(self.registration.showNotification(i,o))}else console.log("Leanplum: No options, title or tag/id received, skipping display.")}else console.log("Leanplum: Push received without payload, skipping display.")})),self.addEventListener("notificationclick",(function(e){if(console.log("Leanplum: [Service Worker] Notification click received."),e.notification.close(),e.notification&&e.notification.tag){var t=e.notification.tag,o=n[t];o?(delete n[t],e.waitUntil(clients.openWindow(o))):console.log("Leanplum: [Service Worker] No action defined, doing nothing.")}else console.log("Leanplum: No notification or tag/id received, skipping open action.")}))}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9MZWFucGx1bS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvUHVzaFNlcnZpY2VXb3JrZXIudHMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIm9wZW5BY3Rpb25zIiwic2VsZiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImpzb25TdHJpbmciLCJkYXRhIiwidGV4dCIsIm9wdGlvbnMiLCJKU09OIiwicGFyc2UiLCJ0aXRsZSIsInRhZyIsIm9wZW5BY3Rpb24iLCJ3YWl0VW50aWwiLCJyZWdpc3RyYXRpb24iLCJzaG93Tm90aWZpY2F0aW9uIiwiY29uc29sZSIsImxvZyIsIm5vdGlmaWNhdGlvbiIsImNsb3NlIiwibm90aWZpY2F0aW9uSWQiLCJvcGVuQWN0aW9uVXJsIiwiY2xpZW50cyIsIm9wZW5XaW5kb3ciXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEs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QixLQUFLQyxpQkFBaUIscUJBbEJ0QixTQUFtQ0MsR0FHL0IsR0FGQWEsUUFBUUMsSUFBSSwyREFDWmQsRUFBTWUsYUFBYUMsUUFDZGhCLEVBQU1lLGNBQWlCZixFQUFNZSxhQUFhUCxJQUEvQyxDQUlBLElBQUlTLEVBQWlCakIsRUFBTWUsYUFBYVAsSUFDcENVLEVBQWdCckIsRUFBWW9CLEdBQzNCQyxVQUlFckIsRUFBWW9CLEdBRW5CakIsRUFBTVUsVUFBVVMsUUFBUUMsV0FBV0YsS0FML0JMLFFBQVFDLElBQUkscUVBTlpELFFBQVFDLElBQUkiLCJmaWxlIjoic3cvc3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJMZWFucGx1bVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJMZWFucGx1bVwiXSA9IGZhY3RvcnkoKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwNCk7XG4iLCIvKlxuICpcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZVxuICpcbiAqXG4gKiAgT3JpZ2luYWwgRmlsZTpcbiAqXG4gKiAgUHVzaCBOb3RpZmljYXRpb25zIENvZGVMYWJcbiAqICBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2VcbiAqXG4gKi9cbnZhciBBQ1RJT05fTkFNRV9LRVkgPSAnX19uYW1lX18nO1xudmFyIE9QRU5fVVJMX0FDVElPTiA9ICdPcGVuIFVSTCc7XG52YXIgQVJHX1VSTCA9ICdVUkwnO1xudmFyIG9wZW5BY3Rpb25zID0ge307XG4vKipcbiAqIFRyaWdnZXJlZCBvbiBwdXNoIG1lc3NhZ2UgcmVjZWl2ZWQuXG4gKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIHB1c2ggcGF5bG9hZCB0aGF0IHRoZSBicm93c2VyIHJlY2VpdmVkLlxuICovXG5mdW5jdGlvbiBwdXNoTGlzdGVuZXIoZXZlbnQpIHtcbiAgICB2YXIganNvblN0cmluZyA9IGV2ZW50LmRhdGEgJiYgZXZlbnQuZGF0YS50ZXh0KCkgPyBldmVudC5kYXRhLnRleHQoKSA6IG51bGw7XG4gICAgaWYgKCFqc29uU3RyaW5nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdMZWFucGx1bTogUHVzaCByZWNlaXZlZCB3aXRob3V0IHBheWxvYWQsIHNraXBwaW5nIGRpc3BsYXkuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbm9pbnNwZWN0aW9uIEpTQ2hlY2tGdW5jdGlvblNpZ25hdHVyZXNcbiAgICB2YXIgb3B0aW9ucyA9IEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgLyoqIEBuYW1lc3BhY2Ugb3B0aW9ucy50aXRsZSBUaGUgdGl0bGUgb2YgdGhlIHB1c2ggbm90aWZpY2F0aW9uLiAqKi9cbiAgICAvKiogQG5hbWVzcGFjZSBvcHRpb25zLnRhZyBUaGUgaWQgb2YgdGhlIHB1c2ggbm90aWZpY2F0aW9uICoqL1xuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy50aXRsZSB8fCAhb3B0aW9ucy50YWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBObyBvcHRpb25zLCB0aXRsZSBvciB0YWcvaWQgcmVjZWl2ZWQsIHNraXBwaW5nICcgK1xuICAgICAgICAgICAgJ2Rpc3BsYXkuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gRXh0cmFjdCBvcGVuIGFjdGlvbiB1cmwuIFdlIG9ubHkgc3VwcG9ydCBvcGVuIHVybCBhY3Rpb24gZm9yIG5vdy5cbiAgICAvKiogQG5hbWVzcGFjZSBvcHRpb25zLmRhdGEub3BlbkFjdGlvbiBUaGUgb3BlbkFjdGlvbiBvZiB0aGUgcHVzaCBub3RpZmljYXRpb24uICoqL1xuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhLm9wZW5BY3Rpb24gJiZcbiAgICAgICAgb3B0aW9ucy5kYXRhLm9wZW5BY3Rpb24uaGFzT3duUHJvcGVydHkoQUNUSU9OX05BTUVfS0VZKSAmJlxuICAgICAgICBvcHRpb25zLmRhdGEub3BlbkFjdGlvbltBQ1RJT05fTkFNRV9LRVldID09PSBPUEVOX1VSTF9BQ1RJT04gJiZcbiAgICAgICAgb3B0aW9ucy5kYXRhLm9wZW5BY3Rpb24uaGFzT3duUHJvcGVydHkoQVJHX1VSTCkpIHtcbiAgICAgICAgb3BlbkFjdGlvbnNbb3B0aW9ucy50YWddID0gb3B0aW9ucy5kYXRhLm9wZW5BY3Rpb25bQVJHX1VSTF07XG4gICAgfVxuICAgIC8vIEV4dHJhY3QgdGl0bGUgYW5kIGRlbGV0ZSBmcm9tIG9wdGlvbnMuXG4gICAgdmFyIHRpdGxlID0gb3B0aW9ucy50aXRsZTtcbiAgICBkZWxldGUgb3B0aW9ucy50aXRsZTtcbiAgICAvKiogQG5hbWVzcGFjZSBzZWxmLnJlZ2lzdHJhdGlvbiAqKi9cbiAgICAvKiogQG5hbWVzcGFjZSBzZWxmLnJlZ2lzdHJhdGlvbi5zaG93Tm90aWZpY2F0aW9uICoqL1xuICAgIGV2ZW50LndhaXRVbnRpbChzZWxmLnJlZ2lzdHJhdGlvbi5zaG93Tm90aWZpY2F0aW9uKHRpdGxlLCBvcHRpb25zKSk7XG59XG4vKipcbiAqIENhbGxiYWNrIHRoYXQgaGFuZGxlcyBjbGlja3Mgb24gdGhlIG5vdGlmaWNhdGlvbi5cbiAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgbm90aWZpY2F0aW9uIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBldmVudC5ub3RpZmljYXRpb24gVGhlIG5vdGlmaWNhdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBldmVudC53YWl0VW50aWwgVGhlIGJyb3dzZXIgd2lsbCBrZWVwIHRoZSBzZXJ2aWNlIHdvcmtlciBydW5uaW5nIHVudGlsIHRoZVxuICogcHJvbWlzZSB5b3UgcGFzc2VkIGluIGhhcyBzZXR0bGVkLlxuICovXG5mdW5jdGlvbiBub3RpZmljYXRpb25DbGlja0xpc3RlbmVyKGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBbU2VydmljZSBXb3JrZXJdIE5vdGlmaWNhdGlvbiBjbGljayByZWNlaXZlZC4nKTtcbiAgICBldmVudC5ub3RpZmljYXRpb24uY2xvc2UoKTtcbiAgICBpZiAoIWV2ZW50Lm5vdGlmaWNhdGlvbiB8fCAhZXZlbnQubm90aWZpY2F0aW9uLnRhZykge1xuICAgICAgICBjb25zb2xlLmxvZygnTGVhbnBsdW06IE5vIG5vdGlmaWNhdGlvbiBvciB0YWcvaWQgcmVjZWl2ZWQsIHNraXBwaW5nIG9wZW4gYWN0aW9uLicpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBub3RpZmljYXRpb25JZCA9IGV2ZW50Lm5vdGlmaWNhdGlvbi50YWc7XG4gICAgdmFyIG9wZW5BY3Rpb25VcmwgPSBvcGVuQWN0aW9uc1tub3RpZmljYXRpb25JZF07XG4gICAgaWYgKCFvcGVuQWN0aW9uVXJsKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdMZWFucGx1bTogW1NlcnZpY2UgV29ya2VyXSBObyBhY3Rpb24gZGVmaW5lZCwgZG9pbmcgbm90aGluZy4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWxldGUgb3BlbkFjdGlvbnNbbm90aWZpY2F0aW9uSWRdO1xuICAgIC8qKiBAbmFtZXNwYWNlIGNsaWVudHMub3BlbldpbmRvdyAqKi9cbiAgICBldmVudC53YWl0VW50aWwoY2xpZW50cy5vcGVuV2luZG93KG9wZW5BY3Rpb25VcmwpKTtcbn1cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcigncHVzaCcsIHB1c2hMaXN0ZW5lcik7XG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ25vdGlmaWNhdGlvbmNsaWNrJywgbm90aWZpY2F0aW9uQ2xpY2tMaXN0ZW5lcik7XG4iXSwic291cmNlUm9vdCI6IiJ9