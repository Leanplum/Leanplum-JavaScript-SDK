!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){var n={};self.addEventListener("push",(function(e){var t=e.data&&e.data.text()?e.data.text():null;if(t){var o=JSON.parse(t);if(o&&o.title&&o.tag){o.data&&o.data.openAction&&o.data.openAction.hasOwnProperty("__name__")&&"Open URL"===o.data.openAction.__name__&&o.data.openAction.hasOwnProperty("URL")&&(n[o.tag]=o.data.openAction.URL);var i=o.title;delete o.title,e.waitUntil(self.registration.showNotification(i,o))}else console.log("Leanplum: No options, title or tag/id received, skipping display.")}else console.log("Leanplum: Push received without payload, skipping display.")})),self.addEventListener("notificationclick",(function(e){if(console.log("Leanplum: [Service Worker] Notification click received."),e.notification.close(),e.notification&&e.notification.tag){var t=e.notification.tag,o=n[t];o?(delete n[t],e.waitUntil(clients.openWindow(o))):console.log("Leanplum: [Service Worker] No action defined, doing nothing.")}else console.log("Leanplum: No notification or tag/id received, skipping open action.")}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,